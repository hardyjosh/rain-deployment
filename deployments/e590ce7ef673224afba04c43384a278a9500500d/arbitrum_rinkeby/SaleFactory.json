{
  "address": "0x333F9355Bc47A22f64ac5C5F3d7cC5408544851f",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maximumSaleTimeout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maximumCooldownDuration",
              "type": "uint256"
            },
            {
              "internalType": "contract RedeemableERC20Factory",
              "name": "redeemableERC20Factory",
              "type": "address"
            }
          ],
          "internalType": "struct SaleConstructorConfig",
          "name": "config_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Implementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "child",
          "type": "address"
        }
      ],
      "name": "NewChild",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "createChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "sources",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "constants",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "stackLength",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "argumentsLength",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StateConfig",
              "name": "canStartStateConfig",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "sources",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "constants",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "stackLength",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "argumentsLength",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StateConfig",
              "name": "canEndStateConfig",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "sources",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "constants",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "stackLength",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "argumentsLength",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StateConfig",
              "name": "calculatePriceStateConfig",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "reserve",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "saleTimeout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cooldownDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumRaise",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dustSize",
              "type": "uint256"
            }
          ],
          "internalType": "struct SaleConfig",
          "name": "config_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "distributor",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "initialSupply",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC20Config",
              "name": "erc20Config",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "tier",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minimumTier",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "distributionEndForwardingAddress",
              "type": "address"
            }
          ],
          "internalType": "struct SaleRedeemableERC20Config",
          "name": "saleRedeemableERC20Config_",
          "type": "tuple"
        }
      ],
      "name": "createChildTyped",
      "outputs": [
        {
          "internalType": "contract Sale",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maybeChild_",
          "type": "address"
        }
      ],
      "name": "isChild",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3df8093789df910363b8c2b86f3e874d70a694f2da10e3f54ff6886953aed6f7",
  "receipt": {
    "to": null,
    "from": "0xbF334f8BD1420a1CbFE15407f73919424934B1B3",
    "contractAddress": "0x333F9355Bc47A22f64ac5C5F3d7cC5408544851f",
    "transactionIndex": 0,
    "gasUsed": "58939711",
    "logsBloom": "0x
    "blockHash": "0x1f077b31f971bc101cecd86ba626e6f69e1aaf23beb9b428fb4b40abb5c3d048",
    "transactionHash": "0x3df8093789df910363b8c2b86f3e874d70a694f2da10e3f54ff6886953aed6f7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13009938,
        "transactionHash": "0x3df8093789df910363b8c2b86f3e874d70a694f2da10e3f54ff6886953aed6f7",
        "address": "0x32e15344AE5c5080d273a5827EDDf8DA9a8ae837",
        "topics": [
          "0xebb7bbe68143e887fe137da12458b32f7aec9b8aa0030b338fb7758a798daf9a"
        ],
        "data": "0x000000000000000000000000333f9355bc47a22f64ac5c5f3d7cc5408544851f000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000dce20fe4e286912ec457536ae0b3df5fde21a40a",
        "logIndex": 0,
        "blockHash": "0x1f077b31f971bc101cecd86ba626e6f69e1aaf23beb9b428fb4b40abb5c3d048"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13009938,
        "transactionHash": "0x3df8093789df910363b8c2b86f3e874d70a694f2da10e3f54ff6886953aed6f7",
        "address": "0x333F9355Bc47A22f64ac5C5F3d7cC5408544851f",
        "topics": [
          "0x7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70"
        ],
        "data": "0x000000000000000000000000bf334f8bd1420a1cbfe15407f73919424934b1b300000000000000000000000032e15344ae5c5080d273a5827eddf8da9a8ae837",
        "logIndex": 1,
        "blockHash": "0x1f077b31f971bc101cecd86ba626e6f69e1aaf23beb9b428fb4b40abb5c3d048"
      }
    ],
    "blockNumber": 13009938,
    "cumulativeGasUsed": "8871009",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "maximumSaleTimeout": 10000,
      "maximumCooldownDuration": 1000,
      "redeemableERC20Factory": "0xdcE20fE4E286912ec457536Ae0b3Df5fDE21a40A"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "51f8c0eb364ac8ebbc6da111363b0c63",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maximumSaleTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumCooldownDuration\",\"type\":\"uint256\"},{\"internalType\":\"contract RedeemableERC20Factory\",\"name\":\"redeemableERC20Factory\",\"type\":\"address\"}],\"internalType\":\"struct SaleConstructorConfig\",\"name\":\"config_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Implementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"}],\"name\":\"NewChild\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"createChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"sources\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"stackLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"argumentsLength\",\"type\":\"uint256\"}],\"internalType\":\"struct StateConfig\",\"name\":\"canStartStateConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"sources\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"stackLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"argumentsLength\",\"type\":\"uint256\"}],\"internalType\":\"struct StateConfig\",\"name\":\"canEndStateConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"sources\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"stackLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"argumentsLength\",\"type\":\"uint256\"}],\"internalType\":\"struct StateConfig\",\"name\":\"calculatePriceStateConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"saleTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumRaise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dustSize\",\"type\":\"uint256\"}],\"internalType\":\"struct SaleConfig\",\"name\":\"config_\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20Config\",\"name\":\"erc20Config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"tier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumTier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"distributionEndForwardingAddress\",\"type\":\"address\"}],\"internalType\":\"struct SaleRedeemableERC20Config\",\"name\":\"saleRedeemableERC20Config_\",\"type\":\"tuple\"}],\"name\":\"createChildTyped\",\"outputs\":[{\"internalType\":\"contract Sale\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeChild_\",\"type\":\"address\"}],\"name\":\"isChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createChild(bytes)\":{\"params\":{\"data_\":\"Encoded data to pass down to child contract constructor.\"},\"returns\":{\"_0\":\"New child contract address.\"}},\"createChildTyped(((bytes[],uint256[],uint256,uint256),(bytes[],uint256[],uint256,uint256),(bytes[],uint256[],uint256,uint256),address,address,uint256,uint256,uint256,uint256),((string,string,address,uint256),address,uint256,address))\":{\"params\":{\"config_\":\"`SaleConfig` constructor configuration.\"},\"returns\":{\"_0\":\"New `Sale` child contract.\"}},\"isChild(address)\":{\"params\":{\"maybeChild_\":\"Address of child contract to look up.\"},\"returns\":{\"_0\":\"Returns `true` if address is a contract created by this contract factory, otherwise `false`.\"}}},\"title\":\"SaleFactory\",\"version\":1},\"userdoc\":{\"events\":{\"Implementation(address,address)\":{\"notice\":\"Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this.\"},\"NewChild(address,address)\":{\"notice\":\"Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Build the reference implementation to clone for each child.\"},\"createChild(bytes)\":{\"notice\":\"Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event.\"},\"createChildTyped(((bytes[],uint256[],uint256,uint256),(bytes[],uint256[],uint256,uint256),(bytes[],uint256[],uint256,uint256),address,address,uint256,uint256,uint256,uint256),((string,string,address,uint256),address,uint256,address))\":{\"notice\":\"Allows calling `createChild` with `SeedERC20Config` struct. Use original `Factory` `createChild` function signature if function parameters are already encoded.\"},\"isChild(address)\":{\"notice\":\"Implements `IFactory`. Checks if address is registered as a child contract of this factory.\"}},\"notice\":\"Factory for creating and deploying `Sale` contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sale/SaleFactory.sol\":\"SaleFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/cooldown/Cooldown.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title Cooldown\\n/// @notice `Cooldown` is a base contract that rate limits functions on\\n/// the implementing contract per `msg.sender`.\\n///\\n/// Each time a function with the `onlyAfterCooldown` modifier is called the\\n/// `msg.sender` must wait N blocks before calling any modified function.\\n///\\n/// This does nothing to prevent sybils who can generate an arbitrary number of\\n/// `msg.sender` values in parallel to spam a contract.\\n///\\n/// `Cooldown` is intended to prevent rapid state cycling to grief a contract,\\n/// such as rapidly locking and unlocking a large amount of capital in the\\n/// `SeedERC20` contract.\\n///\\n/// Requiring a lock/deposit of significant economic stake that sybils will not\\n/// have access to AND applying a cooldown IS a sybil mitigation. The economic\\n/// stake alone is NOT sufficient if gas is cheap as sybils can cycle the same\\n/// stake between each other. The cooldown alone is NOT sufficient as many\\n/// sybils can be created, each as a new `msg.sender`.\\n///\\n/// @dev Base for anything that enforces a cooldown delay on functions.\\n/// `Cooldown` requires a minimum time in blocks to elapse between actions that\\n/// cooldown. The modifier `onlyAfterCooldown` both enforces and triggers the\\n/// cooldown. There is a single cooldown across all functions per-contract\\n/// so any function call that requires a cooldown will also trigger it for\\n/// all other functions.\\n///\\n/// Cooldown is NOT an effective sybil resistance alone, as the cooldown is\\n/// per-address only. It is always possible for many accounts to be created\\n/// to spam a contract with dust in parallel.\\n/// Cooldown is useful to stop a single account rapidly cycling contract\\n/// state in a way that can be disruptive to peers. Cooldown works best when\\n/// coupled with economic stake associated with each state change so that\\n/// peers must lock capital during the cooldown. `Cooldown` tracks the first\\n/// `msg.sender` it sees for a call stack so cooldowns are enforced across\\n/// reentrant code. Any function that enforces a cooldown also has reentrancy\\n/// protection.\\ncontract Cooldown {\\n    event CooldownInitialize(address sender, uint256 cooldownDuration);\\n    event CooldownTriggered(address caller, uint256 cooldown);\\n    /// Time in blocks to restrict access to modified functions.\\n    uint256 internal cooldownDuration;\\n\\n    /// Every caller has its own cooldown, the minimum block that the caller\\n    /// call another function sharing the same cooldown state.\\n    mapping(address => uint256) private cooldowns;\\n    address private caller;\\n\\n    /// Initialize the cooldown duration.\\n    /// The cooldown duration is global to the contract.\\n    /// Cooldown duration must be greater than 0.\\n    /// Cooldown duration can only be set once.\\n    /// @param cooldownDuration_ The global cooldown duration.\\n    function initializeCooldown(uint256 cooldownDuration_) internal {\\n        require(cooldownDuration_ > 0, \\\"COOLDOWN_0\\\");\\n        // Reinitialization is a bug.\\n        assert(cooldownDuration == 0);\\n        cooldownDuration = cooldownDuration_;\\n        emit CooldownInitialize(msg.sender, cooldownDuration_);\\n    }\\n\\n    /// Modifies a function to enforce the cooldown for `msg.sender`.\\n    /// Saves the original caller so that cooldowns are enforced across\\n    /// reentrant code.\\n    modifier onlyAfterCooldown() {\\n        address caller_ = caller == address(0) ? caller = msg.sender : caller;\\n        require(cooldowns[caller_] <= block.number, \\\"COOLDOWN\\\");\\n        // Every action that requires a cooldown also triggers a cooldown.\\n        uint256 cooldown_ = block.number + cooldownDuration;\\n        cooldowns[caller_] = cooldown_;\\n        emit CooldownTriggered(caller_, cooldown_);\\n        _;\\n        // Refund as much gas as we can.\\n        delete caller;\\n    }\\n}\\n\",\"keccak256\":\"0x3b251ad397412539d68a29d24f161ec5bb6e47128ea9e68bd768cdb9e2d3a13e\",\"license\":\"CAL\"},\"contracts/erc20/ERC20Config.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// Constructor config for standard Open Zeppelin ERC20.\\n/// @param name Name as defined by Open Zeppelin ERC20.\\n/// @param symbol Symbol as defined by Open Zeppelin ERC20.\\n/// @param distributor Distributor address of the initial supply.\\n/// MAY be zero.\\n/// @param initialSupply Initial supply to mint.\\n/// MAY be zero.\\nstruct ERC20Config {\\n    string name;\\n    string symbol;\\n    address distributor;\\n    uint256 initialSupply;\\n}\\n\",\"keccak256\":\"0xd71c17e9354e155991a6d315fc38050377f65f4a7770b146ba0070819e99c3f0\",\"license\":\"CAL\"},\"contracts/erc20/ERC20Pull.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// Constructor config for `ERC20Pull`.\\n/// @param sender Token sender to bind to `pullERC20`.\\n/// @param token ERC20 token to bind to `pullERC20`.\\nstruct ERC20PullConfig {\\n    address sender;\\n    address token;\\n}\\n\\n/// @title ERC20Pull\\n/// @notice Enables a contract to pull (transfer to self) some `IERC20` token\\n/// from a sender. Both the sender and token must be known and trusted by the\\n/// implementing contract during initialization, and cannot be changed.\\n///\\n/// This enables the `sender` to merely approve the implementing contract then\\n/// anon can call `pullERC20` to have those tokens transferred. In some cases\\n/// (e.g. distributing the proceeds of a raise) it is safer to only approve\\n/// tokens than to transfer (e.g. if there is some bug reverting transfers).\\n///\\n/// The `sender` is singular and bound at construction to avoid the situation\\n/// where EOA accounts inadvertantly \\\"infinite approve\\\" and lose their tokens.\\n/// For this reason EOA accounts are NOT supported as the `sender`. Approvals\\n/// MUST expect the `ERC20Pull` contract to take any and all tokens up to the\\n/// allowance at any moment. EOA accounts typically are not security conscious\\n/// enough to be nominated as the `sender`.\\n///\\n/// The token is singular and bound at construction to avoid the situation\\n/// where anons can force the implementing contract to call an arbitrary\\n/// external contract.\\ncontract ERC20Pull {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    /// Emitted during initialization.\\n    /// @param sender `msg.sender` of initialize.\\n    /// @param tokenSender Address that token can be pulled from.\\n    /// @param token Token that can be pulled.\\n    event ERC20PullInitialize(\\n        address sender,\\n        address tokenSender,\\n        address token\\n    );\\n\\n    /// @dev The `sender` that this contract will attempt to pull tokens from.\\n    address private sender;\\n    /// @dev The ERC20 token that this contract will attempt to pull to itself\\n    /// from `sender`.\\n    address private token;\\n\\n    /// Initialize the sender and token.\\n    /// @param config_ `ERC20PullConfig` to initialize.\\n    function initializeERC20Pull(ERC20PullConfig memory config_) internal {\\n        // Sender and token MUST be set in the config. MAY point at a known\\n        // address that cannot approve the specified token to effectively\\n        // disable pull functionality.\\n        // Sender MUST NOT be an EOA.\\n        // See https://github.com/beehive-innovation/rain-protocol/issues/254\\n        require(config_.sender.isContract(), \\\"EOA_SENDER\\\");\\n        require(config_.token != address(0), \\\"ZERO_TOKEN\\\");\\n        // Reinitialization is a bug.\\n        // We know the token is non-zero for an initialized contract so can\\n        // just check that.\\n        assert(token == address(0));\\n        sender = config_.sender;\\n        token = config_.token;\\n        emit ERC20PullInitialize(msg.sender, config_.sender, config_.token);\\n    }\\n\\n    /// Attempts to transfer `amount_` of `token` to this contract.\\n    /// Relies on `token` having been approved for at least `amount_` by the\\n    /// `sender`. Will revert if the transfer fails due to `safeTransferFrom`.\\n    /// Also relies on `token` not being malicious.\\n    /// @param amount_ The amount to attempt to pull to the implementing\\n    /// contract.\\n    function pullERC20(uint256 amount_) external {\\n        IERC20(token).safeTransferFrom(sender, address(this), amount_);\\n    }\\n}\\n\",\"keccak256\":\"0xc258d02dd862df42c60c17c3b17893814fddf65f7f4c2d532e0418020f1e6c09\",\"license\":\"CAL\"},\"contracts/erc20/ERC20Redeem.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\n\\ncontract ERC20Redeem is ERC20BurnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /// Anon has burned their tokens in exchange for some treasury assets.\\n    /// Emitted once per redeemed asset.\\n    /// @param sender `msg.sender` is burning.\\n    /// @param treasuryAsset Treasury asset being sent to redeemer.\\n    /// @param redeemAmount Amount of token being burned.\\n    /// @param assetAmount Amount of treasury asset being sent.\\n    event Redeem(\\n        address sender,\\n        address treasuryAsset,\\n        uint256 redeemAmount,\\n        uint256 assetAmount\\n    );\\n\\n    /// Anon can notify the world that they are adding treasury assets to the\\n    /// contract. Indexers are strongly encouraged to ignore untrusted anons.\\n    /// @param sender `msg.sender` adding a treasury asset.\\n    /// @param asset The treasury asset being added.\\n    event TreasuryAsset(address sender, address asset);\\n\\n    /// Anon can emit a `TreasuryAsset` event to notify token holders that\\n    /// an asset could be redeemed by burning `RedeemableERC20` tokens.\\n    /// As this is callable by anon the events should be filtered by the\\n    /// indexer to those from trusted entities only.\\n    /// @param newTreasuryAsset_ The asset to log.\\n    function newTreasuryAsset(address newTreasuryAsset_) public {\\n        emit TreasuryAsset(msg.sender, newTreasuryAsset_);\\n    }\\n\\n    /// Burn tokens for a prorata share of the current treasury.\\n    ///\\n    /// The assets to be redeemed for must be specified as an array. This keeps\\n    /// the redeem functionality:\\n    /// - Gas efficient as we avoid tracking assets in storage\\n    /// - Decentralised as any user can deposit any asset to be redeemed\\n    /// - Error resistant as any individual asset reverting can be avoided by\\n    ///   redeeming againt sans the problematic asset.\\n    /// It is also a super sharp edge if someone burns their tokens prematurely\\n    /// or with an incorrect asset list. Implementing contracts are strongly\\n    /// encouraged to implement additional safety rails to prevent high value\\n    /// mistakes.\\n    /// Only \\\"vanilla\\\" erc20 token balances are supported as treasury assets.\\n    /// I.e. if the balance is changing such as due to a rebasing token or\\n    /// other mechanism then the WRONG token amounts will be redeemed. The\\n    /// redemption calculation is very simple and naive in that it takes the\\n    /// current balance of this contract of the assets being claimed via\\n    /// redemption to calculate the \\\"prorata\\\" entitlement. If the contract's\\n    /// balance of the claimed token is changing between redemptions (other\\n    /// than due to the redemption itself) then each redemption will send\\n    /// incorrect amounts.\\n    /// @param treasuryAssets_ The list of assets to redeem.\\n    /// @param redeemAmount_ The amount of redeemable token to burn.\\n    function _redeem(IERC20[] memory treasuryAssets_, uint256 redeemAmount_)\\n        internal\\n    {\\n        uint256 assetsLength_ = treasuryAssets_.length;\\n\\n        // Calculate everything before any balances change.\\n        uint256[] memory amounts_ = new uint256[](assetsLength_);\\n\\n        // The fraction of the assets we release is the fraction of the\\n        // outstanding total supply of the redeemable being burned.\\n        // Every treasury asset is released in the same proportion.\\n        // Guard against no asset redemptions and log all events before we\\n        // change any contract state or call external contracts.\\n        require(assetsLength_ > 0, \\\"EMPTY_ASSETS\\\");\\n        uint256 supply_ = IERC20(address(this)).totalSupply();\\n        uint256 amount_ = 0;\\n        for (uint256 i_ = 0; i_ < assetsLength_; i_++) {\\n            amount_ =\\n                (treasuryAssets_[i_].balanceOf(address(this)) * redeemAmount_) /\\n                supply_;\\n            require(amount_ > 0, \\\"ZERO_AMOUNT\\\");\\n            emit Redeem(\\n                msg.sender,\\n                address(treasuryAssets_[i_]),\\n                redeemAmount_,\\n                amount_\\n            );\\n            amounts_[i_] = amount_;\\n        }\\n\\n        // Burn FIRST (reentrancy safety).\\n        _burn(msg.sender, redeemAmount_);\\n\\n        // THEN send all assets.\\n        for (uint256 i_ = 0; i_ < assetsLength_; i_++) {\\n            treasuryAssets_[i_].safeTransfer(msg.sender, amounts_[i_]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x01e0e94c9dabf2a7784af0ec801b0b5f5696821b205bb06117fb31572fb4fc3e\",\"license\":\"CAL\"},\"contracts/factory/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IFactory} from \\\"./IFactory.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Factory\\n/// @notice Base contract for deploying and registering child contracts.\\nabstract contract Factory is IFactory, ReentrancyGuard {\\n    /// @dev state to track each deployed contract address. A `Factory` will\\n    /// never lie about deploying a child, unless `isChild` is overridden to do\\n    /// so.\\n    mapping(address => bool) private contracts;\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// `_createChild` hook must be overridden to actually create child\\n    /// contract.\\n    ///\\n    /// Implementers may want to overload this function with a typed equivalent\\n    /// to expose domain specific structs etc. to the compiled ABI consumed by\\n    /// tooling and other scripts. To minimise gas costs for deployment it is\\n    /// expected that the tooling will consume the typed ABI, then encode the\\n    /// arguments and pass them to this function directly.\\n    ///\\n    /// @param data_ ABI encoded data to pass to child contract constructor.\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        returns (address);\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Calls the `_createChild` hook that inheriting contracts must override.\\n    /// Registers child contract address such that `isChild` is `true`.\\n    /// Emits `NewChild` event.\\n    ///\\n    /// @param data_ Encoded data to pass down to child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        returns (address)\\n    {\\n        // Create child contract using hook.\\n        address child_ = _createChild(data_);\\n        // Ensure the child at this address has not previously been deployed.\\n        require(!contracts[child_], \\\"DUPLICATE_CHILD\\\");\\n        // Register child contract address to `contracts` mapping.\\n        contracts[child_] = true;\\n        // Emit `NewChild` event with child contract address.\\n        emit IFactory.NewChild(msg.sender, child_);\\n        return child_;\\n    }\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// @param maybeChild_ Address of child contract to look up.\\n    /// @return Returns `true` if address is a contract created by this\\n    /// contract factory, otherwise `false`.\\n    function isChild(address maybeChild_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return contracts[maybeChild_];\\n    }\\n}\\n\",\"keccak256\":\"0x1e603d9367137008af1b035b02832d86048fc5156310e9080e5d5f873c0f4846\",\"license\":\"CAL\"},\"contracts/factory/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\ninterface IFactory {\\n    /// Whenever a new child contract is deployed, a `NewChild` event\\n    /// containing the new child contract address MUST be emitted.\\n    /// @param sender `msg.sender` that deployed the contract (factory).\\n    /// @param child address of the newly deployed child.\\n    event NewChild(address sender, address child);\\n\\n    /// Factories that clone a template contract MUST emit an event any time\\n    /// they set the implementation being cloned. Factories that deploy new\\n    /// contracts without cloning do NOT need to emit this.\\n    /// @param sender `msg.sender` that deployed the implementation (factory).\\n    /// @param implementation address of the implementation contract that will\\n    /// be used for future clones if relevant.\\n    event Implementation(address sender, address implementation);\\n\\n    /// Creates a new child contract.\\n    ///\\n    /// @param data_ Domain specific data for the child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_) external returns (address);\\n\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// Addresses that were not deployed by `createChild` MUST NOT return\\n    /// `true` from `isChild`. This is CRITICAL to the security guarantees for\\n    /// any contract implementing `IFactory`.\\n    ///\\n    /// @param maybeChild_ Address to check registration for.\\n    /// @return `true` if address was deployed by this contract factory,\\n    /// otherwise `false`.\\n    function isChild(address maybeChild_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3e9ca6613b0c19d98c4e19a7586d4109e498db2cf7d6e38e34fc2d2c0dbc32e2\",\"license\":\"CAL\"},\"contracts/math/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @dev The scale of all fixed point math. This is adopting the conventions of\\n/// both ETH (wei) and most ERC20 tokens, so is hopefully uncontroversial.\\nuint256 constant FP_DECIMALS = 18;\\n/// @dev The number `1` in the standard fixed point math scaling. Most of the\\n/// differences between fixed point math and regular math is multiplying or\\n/// dividing by `ONE` after the appropriate scaling has been applied.\\nuint256 constant FP_ONE = 1e18;\\n\\n/// @title FixedPointMath\\n/// @notice Sometimes we want to do math with decimal values but all we have\\n/// are integers, typically uint256 integers. Floats are very complex so we\\n/// don't attempt to simulate them. Instead we provide a standard definition of\\n/// \\\"one\\\" as 10 ** 18 and scale everything up/down to this as fixed point math.\\n/// Overflows are errors as per Solidity.\\nlibrary FixedPointMath {\\n    /// Scale a fixed point decimal of some scale factor to match `DECIMALS`.\\n    /// @param a_ Some fixed point decimal value.\\n    /// @param aDecimals_ The number of fixed decimals of `a_`.\\n    /// @return `a_` scaled to match `DECIMALS`.\\n    function scale18(uint256 a_, uint256 aDecimals_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 decimals_;\\n        if (FP_DECIMALS == aDecimals_) {\\n            return a_;\\n        } else if (FP_DECIMALS > aDecimals_) {\\n            unchecked {\\n                decimals_ = FP_DECIMALS - aDecimals_;\\n            }\\n            return a_ * 10**decimals_;\\n        } else {\\n            unchecked {\\n                decimals_ = aDecimals_ - FP_DECIMALS;\\n            }\\n            return a_ / 10**decimals_;\\n        }\\n    }\\n\\n    /// Scale a fixed point decimals of `DECIMALS` to some other scale.\\n    /// @param a_ A `DECIMALS` fixed point decimals.\\n    /// @param targetDecimals_ The new scale of `a_`.\\n    /// @return `a_` rescaled from `DECIMALS` to `targetDecimals_`.\\n    function scaleN(uint256 a_, uint256 targetDecimals_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 decimals_;\\n        if (targetDecimals_ == FP_DECIMALS) {\\n            return a_;\\n        } else if (FP_DECIMALS > targetDecimals_) {\\n            unchecked {\\n                decimals_ = FP_DECIMALS - targetDecimals_;\\n            }\\n            return a_ / 10**decimals_;\\n        } else {\\n            unchecked {\\n                decimals_ = targetDecimals_ - FP_DECIMALS;\\n            }\\n            return a_ * 10**decimals_;\\n        }\\n    }\\n\\n    /// Scale a fixed point up or down by `scaleBy_` orders of magnitude.\\n    /// The caller MUST ensure the end result matches `DECIMALS` if other\\n    /// functions in this library are to work correctly.\\n    /// Notably `scaleBy` is a SIGNED integer so scaling down by negative OOMS\\n    /// is supported.\\n    /// @param a_ Some integer of any scale.\\n    /// @param scaleBy_ OOMs to scale `a_` up or down by.\\n    /// @return `a_` rescaled according to `scaleBy_`.\\n    function scaleBy(uint256 a_, int8 scaleBy_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (scaleBy_ == 0) {\\n            return a_;\\n        } else if (scaleBy_ > 0) {\\n            return a_ * 10**uint8(scaleBy_);\\n        } else {\\n            uint256 posScaleDownBy_;\\n            unchecked {\\n                posScaleDownBy_ = uint8(-scaleBy_);\\n            }\\n            return a_ / 10**posScaleDownBy_;\\n        }\\n    }\\n\\n    /// Fixed point multiplication in native scale decimals.\\n    /// Both `a_` and `b_` MUST be `DECIMALS` fixed point decimals.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return `a_` multiplied by `b_` to `DECIMALS` fixed point decimals.\\n    function fixedPointMul(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (a_ * b_) / FP_ONE;\\n    }\\n\\n    /// Fixed point division in native scale decimals.\\n    /// Both `a_` and `b_` MUST be `DECIMALS` fixed point decimals.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return `a_` divided by `b_` to `DECIMALS` fixed point decimals.\\n    function fixedPointDiv(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (a_ * FP_ONE) / b_;\\n    }\\n}\\n\",\"keccak256\":\"0xe97a9b0075a2836d04071aa3d60172a60176a676c0f370fe61eafbe73ed6c745\",\"license\":\"CAL\"},\"contracts/math/SaturatingMath.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title SaturatingMath\\n/// @notice Sometimes we neither want math operations to error nor wrap around\\n/// on an overflow or underflow. In the case of transferring assets an error\\n/// may cause assets to be locked in an irretrievable state within the erroring\\n/// contract, e.g. due to a tiny rounding/calculation error. We also can't have\\n/// assets underflowing and attempting to approve/transfer \\\"infinity\\\" when we\\n/// wanted \\\"almost or exactly zero\\\" but some calculation bug underflowed zero.\\n/// Ideally there are no calculation mistakes, but in guarding against bugs it\\n/// may be safer pragmatically to saturate arithmatic at the numeric bounds.\\n/// Note that saturating div is not supported because 0/0 is undefined.\\nlibrary SaturatingMath {\\n    /// Saturating addition.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ + b_ and max uint256.\\n    function saturatingAdd(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 c_ = a_ + b_;\\n            return c_ < a_ ? type(uint256).max : c_;\\n        }\\n    }\\n\\n    /// Saturating subtraction.\\n    /// @param a_ Minuend.\\n    /// @param b_ Subtrahend.\\n    /// @return Maximum of a_ - b_ and 0.\\n    function saturatingSub(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return a_ > b_ ? a_ - b_ : 0;\\n        }\\n    }\\n\\n    /// Saturating multiplication.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ * b_ and max uint256.\\n    function saturatingMul(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being\\n            // zero, but the benefit is lost if 'b' is also tested.\\n            // https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a_ == 0) return 0;\\n            uint256 c_ = a_ * b_;\\n            return c_ / a_ != b_ ? type(uint256).max : c_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9078a23bd04812d8a57e26ef51ddc7f2c6b0c65d8c7cfc2f2ebf40e6642fff88\",\"license\":\"CAL\"},\"contracts/phased/Phased.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title Phased\\n/// @notice `Phased` is an abstract contract that defines up to `9` phases that\\n/// an implementing contract moves through.\\n///\\n/// Phase `0` is always the first phase and does not, and cannot, be set\\n/// expicitly. Effectively it is implied that phase `0` has been active\\n/// since block zero.\\n///\\n/// Each subsequent phase `1` through `8` must be scheduled sequentially and\\n/// explicitly at a block number.\\n///\\n/// Only the immediate next phase can be scheduled with `scheduleNextPhase`,\\n/// it is not possible to schedule multiple phases ahead.\\n///\\n/// Multiple phases can be scheduled in a single block if each scheduled phase\\n/// is scheduled for the current block.\\n///\\n/// Several utility functions and modifiers are provided.\\n///\\n/// One event `PhaseShiftScheduled` is emitted each time a phase shift is\\n/// scheduled (not when the scheduled phase is reached).\\n///\\n/// @dev `Phased` contracts have a defined timeline with available\\n/// functionality grouped into phases.\\n/// Every `Phased` contract starts at `0` and moves sequentially\\n/// through phases `1` to `8`.\\n/// Every `Phase` other than `0` is optional, there is no requirement\\n/// that all 9 phases are implemented.\\n/// Phases can never be revisited, the inheriting contract always moves through\\n/// each achieved phase linearly.\\n/// This is enforced by only allowing `scheduleNextPhase` to be called once per\\n/// phase.\\n/// It is possible to call `scheduleNextPhase` several times in a single block\\n/// but the `block.number` for each phase must be reached each time to schedule\\n/// the next phase.\\n/// Importantly there are events and several modifiers and checks available to\\n/// ensure that functionality is limited to the current phase.\\n/// The full history of each phase shift block is recorded as a fixed size\\n/// array of `uint32`.\\ncontract Phased {\\n    /// @dev Every phase block starts uninitialized.\\n    /// Only uninitialized blocks can be set by the phase scheduler.\\n    uint32 private constant UNINITIALIZED = type(uint32).max;\\n    /// @dev This is how many phases can fit in a `uint256`.\\n    uint256 private constant MAX_PHASE = 8;\\n\\n    /// `PhaseScheduled` is emitted when the next phase is scheduled.\\n    /// @param sender `msg.sender` that scheduled the next phase.\\n    /// @param newPhase The next phase being scheduled.\\n    /// @param scheduledBlock The block the phase will be achieved.\\n    event PhaseScheduled(\\n        address sender,\\n        uint256 newPhase,\\n        uint256 scheduledBlock\\n    );\\n\\n    /// 8 phases each as 32 bits to fit a single 32 byte word.\\n    uint32[MAX_PHASE] public phaseBlocks;\\n\\n    /// Initialize the blocks at \\\"never\\\".\\n    /// All phase blocks are initialized to `UNINITIALIZED`.\\n    /// i.e. not fallback solidity value of `0`.\\n    function initializePhased() internal {\\n        // Reinitialization is a bug.\\n        // Only need to check the first block as all blocks are about to be set\\n        // to `UNINITIALIZED`.\\n        assert(phaseBlocks[0] < 1);\\n        uint32[MAX_PHASE] memory phaseBlocks_ = [\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED\\n        ];\\n        phaseBlocks = phaseBlocks_;\\n        // 0 is always the block for implied phase 0.\\n        emit PhaseScheduled(msg.sender, 0, 0);\\n    }\\n\\n    /// Pure function to reduce an array of phase blocks and block number to a\\n    /// specific `Phase`.\\n    /// The phase will be the highest attained even if several phases have the\\n    /// same block number.\\n    /// If every phase block is after the block number then `0` is\\n    /// returned.\\n    /// If every phase block is before the block number then `MAX_PHASE` is\\n    /// returned.\\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\\n    /// @param blockNumber_ Determine the relevant phase relative to this block\\n    /// number.\\n    /// @return The \\\"current\\\" phase relative to the block number and phase\\n    /// blocks list.\\n    function phaseAtBlockNumber(\\n        uint32[MAX_PHASE] memory phaseBlocks_,\\n        uint256 blockNumber_\\n    ) public pure returns (uint256) {\\n        for (uint256 i_ = 0; i_ < MAX_PHASE; i_++) {\\n            if (blockNumber_ < phaseBlocks_[i_]) {\\n                return i_;\\n            }\\n        }\\n        return MAX_PHASE;\\n    }\\n\\n    /// Pure function to reduce an array of phase blocks and phase to a\\n    /// specific block number.\\n    /// `Phase.ZERO` will always return block `0`.\\n    /// Every other phase will map to a block number in `phaseBlocks_`.\\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\\n    /// @param phase_ Determine the relevant block number for this phase.\\n    /// @return The block number for the phase according to `phaseBlocks_`.\\n    function blockNumberForPhase(\\n        uint32[MAX_PHASE] memory phaseBlocks_,\\n        uint256 phase_\\n    ) public pure returns (uint256) {\\n        return phase_ > 0 ? phaseBlocks_[phase_ - 1] : 0;\\n    }\\n\\n    /// Impure read-only function to return the \\\"current\\\" phase from internal\\n    /// contract state.\\n    /// Simply wraps `phaseAtBlockNumber` for current values of `phaseBlocks`\\n    /// and `block.number`.\\n    function currentPhase() public view returns (uint256) {\\n        return phaseAtBlockNumber(phaseBlocks, block.number);\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase.\\n    /// @param phase_ Modified functions can only be called during this phase.\\n    modifier onlyPhase(uint256 phase_) {\\n        require(currentPhase() == phase_, \\\"BAD_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase OR if the\\n    /// specified phase has passed.\\n    /// @param phase_ Modified function only callable during or after this\\n    /// phase.\\n    modifier onlyAtLeastPhase(uint256 phase_) {\\n        require(currentPhase() >= phase_, \\\"MIN_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Writes the block for the next phase.\\n    /// Only uninitialized blocks can be written to.\\n    /// Only the immediate next phase relative to `currentPhase` can be written\\n    /// to. It is still required to specify the `phase_` so that it is explicit\\n    /// and clear in the calling code which phase is being moved to.\\n    /// Emits `PhaseShiftScheduled` with the phase block.\\n    /// @param phase_ The phase being scheduled.\\n    /// @param block_ The block for the phase.\\n    function schedulePhase(uint256 phase_, uint256 block_) internal {\\n        require(block.number <= block_, \\\"NEXT_BLOCK_PAST\\\");\\n        require(block_ < UNINITIALIZED, \\\"NEXT_BLOCK_UNINITIALIZED\\\");\\n        // Don't need to check for underflow as the index will be used as a\\n        // fixed array index below. Implies that scheduling phase `0` is NOT\\n        // supported.\\n        uint256 index_;\\n        unchecked {\\n            index_ = phase_ - 1;\\n        }\\n        // Bit of a hack to check the current phase against the index to\\n        // save calculating the subtraction twice.\\n        require(currentPhase() == index_, \\\"NEXT_PHASE\\\");\\n\\n        require(UNINITIALIZED == phaseBlocks[index_], \\\"NEXT_BLOCK_SET\\\");\\n\\n        // Cannot exceed UNINITIALIZED (see above) so don't need to check\\n        // overflow on downcast.\\n        unchecked {\\n            phaseBlocks[index_] = uint32(block_);\\n        }\\n\\n        emit PhaseScheduled(msg.sender, phase_, block_);\\n    }\\n}\\n\",\"keccak256\":\"0x52a0382e49b725e4ac16bc96a7eef4f90dc3014c7f4b5d0ff78d68ce479fc1e1\",\"license\":\"CAL\"},\"contracts/redeemableERC20/RedeemableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ERC20Config} from \\\"../erc20/ERC20Config.sol\\\";\\nimport \\\"../erc20/ERC20Redeem.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ITier} from \\\"../tier/ITier.sol\\\";\\nimport {TierReport} from \\\"../tier/libraries/TierReport.sol\\\";\\n\\nimport {Phased} from \\\"../phased/Phased.sol\\\";\\n\\nimport {ERC20Pull, ERC20PullConfig} from \\\"../erc20/ERC20Pull.sol\\\";\\n\\n/// Everything required by the `RedeemableERC20` constructor.\\n/// @param reserve Reserve token that the associated `Trust` or equivalent\\n/// raise contract will be forwarding to the `RedeemableERC20` contract.\\n/// @param erc20Config ERC20 config forwarded to the ERC20 constructor.\\n/// @param tier Tier contract to compare statuses against on transfer.\\n/// @param minimumTier Minimum tier required for transfers in `Phase.ZERO`.\\n/// Can be `0`.\\n/// @param distributionEndForwardingAddress Optional address to send rTKN to at\\n/// the end of the distribution phase. If `0` address then all undistributed\\n/// rTKN will burn itself at the end of the distribution.\\nstruct RedeemableERC20Config {\\n    address reserve;\\n    ERC20Config erc20Config;\\n    address tier;\\n    uint256 minimumTier;\\n    address distributionEndForwardingAddress;\\n}\\n\\n/// @title RedeemableERC20\\n/// @notice This is the ERC20 token that is minted and distributed.\\n///\\n/// During `Phase.ZERO` the token can be traded and so compatible with the\\n/// Balancer pool mechanics.\\n///\\n/// During `Phase.ONE` the token is frozen and no longer able to be traded on\\n/// any AMM or transferred directly.\\n///\\n/// The token can be redeemed during `Phase.ONE` which burns the token in\\n/// exchange for pro-rata erc20 tokens held by the `RedeemableERC20` contract\\n/// itself.\\n///\\n/// The token balances can be used indirectly for other claims, promotions and\\n/// events as a proof of participation in the original distribution by token\\n/// holders.\\n///\\n/// The token can optionally be restricted by the `ITier` contract to only\\n/// allow receipients with a specified membership status.\\n///\\n/// @dev `RedeemableERC20` is an ERC20 with 2 phases.\\n///\\n/// `Phase.ZERO` is the distribution phase where the token can be freely\\n/// transfered but not redeemed.\\n/// `Phase.ONE` is the redemption phase where the token can be redeemed but no\\n/// longer transferred.\\n///\\n/// Redeeming some amount of `RedeemableERC20` burns the token in exchange for\\n/// some other tokens held by the contract. For example, if the\\n/// `RedeemableERC20` token contract holds 100 000 USDC then a holder of the\\n/// redeemable token can burn some of their tokens to receive a % of that USDC.\\n/// If they redeemed (burned) an amount equal to 10% of the redeemable token\\n/// supply then they would receive 10 000 USDC.\\n///\\n/// To make the treasury assets discoverable anyone can call `newTreasuryAsset`\\n/// to emit an event containing the treasury asset address. As malicious and/or\\n/// spam users can emit many treasury events there is a need for sensible\\n/// indexing and filtering of asset events to only trusted users. This contract\\n/// is agnostic to how that trust relationship is defined for each user.\\n///\\n/// Users must specify all the treasury assets they wish to redeem to the\\n/// `redeem` function. After `redeem` is called the redeemed tokens are burned\\n/// so all treasury assets must be specified and claimed in a batch atomically.\\n/// Note: The same amount of `RedeemableERC20` is burned, regardless of which\\n/// treasury assets were specified. Specifying fewer assets will NOT increase\\n/// the proportion of each that is returned.\\n///\\n/// `RedeemableERC20` has several owner administrative functions:\\n/// - Owner can add senders and receivers that can send/receive tokens even\\n///   during `Phase.ONE`\\n/// - Owner can end `Phase.ONE` during `Phase.ZERO` by specifying the address\\n///   of a distributor, which will have any undistributed tokens burned.\\n/// The owner should be a `Trust` not an EOA.\\n///\\n/// The redeem functions MUST be used to redeem and burn RedeemableERC20s\\n/// (NOT regular transfers).\\n///\\n/// `redeem` will simply revert if called outside `Phase.ONE`.\\n/// A `Redeem` event is emitted on every redemption (per treasury asset) as\\n/// `(redeemer, asset, redeemAmount)`.\\ncontract RedeemableERC20 is Initializable, Phased, ERC20Redeem, ERC20Pull {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev Phase constants.\\n    /// Contract is not yet initialized.\\n    uint256 private constant PHASE_UNINITIALIZED = 0;\\n    /// @dev Token is in the distribution phase and can be transferred freely\\n    /// subject to tier requirements.\\n    uint256 private constant PHASE_DISTRIBUTING = 1;\\n    /// @dev Token is frozen and cannot be transferred unless the\\n    /// sender/receiver is authorized as a sender/receiver.\\n    uint256 private constant PHASE_FROZEN = 2;\\n\\n    /// @dev Bits for a receiver.\\n    uint256 private constant RECEIVER = 0x1;\\n    /// @dev Bits for a sender.\\n    uint256 private constant SENDER = 0x2;\\n\\n    /// @dev To be clear, this admin is NOT intended to be an EOA.\\n    /// This contract is designed assuming the admin is a `Sale` or equivalent\\n    /// contract that itself does NOT have an admin key.\\n    address private admin;\\n    /// @dev Tracks addresses that can always send/receive regardless of phase.\\n    /// sender/receiver => access bits\\n    mapping(address => uint256) private access;\\n\\n    /// Results of initializing.\\n    /// @param sender `msg.sender` of initialize.\\n    /// @param config Initialization config.\\n    event Initialize(address sender, RedeemableERC20Config config);\\n\\n    /// A new token sender has been added.\\n    /// @param sender `msg.sender` that approved the token sender.\\n    /// @param grantedSender address that is now a token sender.\\n    event Sender(address sender, address grantedSender);\\n\\n    /// A new token receiver has been added.\\n    /// @param sender `msg.sender` that approved the token receiver.\\n    /// @param grantedReceiver address that is now a token receiver.\\n    event Receiver(address sender, address grantedReceiver);\\n\\n    /// RedeemableERC20 uses the standard/default 18 ERC20 decimals.\\n    /// The minimum supply enforced by the constructor is \\\"one\\\" token which is\\n    /// `10 ** 18`.\\n    /// The minimum supply does not prevent subsequent redemption/burning.\\n    uint256 private constant MINIMUM_INITIAL_SUPPLY = 10**18;\\n\\n    /// Tier contract that produces the report that `minimumTier` is checked\\n    /// against.\\n    /// Public so external contracts can interface with the required tier.\\n    ITier public tier;\\n\\n    /// The minimum status that a user must hold to receive transfers during\\n    /// `Phase.ZERO`.\\n    /// The tier contract passed to `TierByConstruction` determines if\\n    /// the status is held during `_beforeTokenTransfer`.\\n    /// Public so external contracts can interface with the required tier.\\n    uint256 public minimumTier;\\n\\n    /// Optional address to send rTKN to at the end of the distribution phase.\\n    /// If `0` address then all undistributed rTKN will burn itself at the end\\n    /// of the distribution.\\n    address private distributionEndForwardingAddress;\\n\\n    /// Mint the full ERC20 token supply and configure basic transfer\\n    /// restrictions. Initializes all base contracts.\\n    /// @param config_ Initialized configuration.\\n    function initialize(RedeemableERC20Config calldata config_)\\n        external\\n        initializer\\n    {\\n        initializePhased();\\n\\n        tier = ITier(config_.tier);\\n        __ERC20_init(config_.erc20Config.name, config_.erc20Config.symbol);\\n        initializeERC20Pull(\\n            ERC20PullConfig(config_.erc20Config.distributor, config_.reserve)\\n        );\\n\\n        require(\\n            config_.erc20Config.initialSupply >= MINIMUM_INITIAL_SUPPLY,\\n            \\\"MINIMUM_INITIAL_SUPPLY\\\"\\n        );\\n        minimumTier = config_.minimumTier;\\n        distributionEndForwardingAddress = config_\\n            .distributionEndForwardingAddress;\\n\\n        // Minting and burning must never fail.\\n        access[address(0)] = RECEIVER | SENDER;\\n\\n        // Admin receives full supply.\\n        access[config_.erc20Config.distributor] = RECEIVER;\\n\\n        // Forwarding address must be able to receive tokens.\\n        if (distributionEndForwardingAddress != address(0)) {\\n            access[distributionEndForwardingAddress] = RECEIVER;\\n        }\\n\\n        admin = config_.erc20Config.distributor;\\n\\n        // Need to mint after assigning access.\\n        _mint(\\n            config_.erc20Config.distributor,\\n            config_.erc20Config.initialSupply\\n        );\\n\\n        // The reserve must always be one of the treasury assets.\\n        newTreasuryAsset(config_.reserve);\\n\\n        emit Initialize(msg.sender, config_);\\n\\n        // Smoke test on whatever is on the other side of `config_.tier`.\\n        // It is a common mistake to pass in a contract without the `ITier`\\n        // interface and brick transfers. We want to discover that ASAP.\\n        // E.g. `Verify` instead of `VerifyTier`.\\n        // Slither does not like this unused return, but we're not looking for\\n        // any specific return value, just trying to avoid something that\\n        // blatantly errors out.\\n        // slither-disable-next-line unused-return\\n        ITier(config_.tier).report(msg.sender);\\n\\n        schedulePhase(PHASE_DISTRIBUTING, block.number);\\n    }\\n\\n    /// Require a function is only admin callable.\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"ONLY_ADMIN\\\");\\n        _;\\n    }\\n\\n    /// Check that an address is a receiver.\\n    /// A sender is also a receiver.\\n    /// @param maybeReceiver_ account to check.\\n    /// @return True if account is a receiver.\\n    function isReceiver(address maybeReceiver_) public view returns (bool) {\\n        return access[maybeReceiver_] & RECEIVER > 0;\\n    }\\n\\n    /// Admin can grant an address receiver rights.\\n    /// @param newReceiver_ The account to grand receiver.\\n    function grantReceiver(address newReceiver_) external onlyAdmin {\\n        // Using `|` preserves sender if previously granted.\\n        access[newReceiver_] |= RECEIVER;\\n        emit Receiver(msg.sender, newReceiver_);\\n    }\\n\\n    /// Check that an address is a sender.\\n    /// @param maybeSender_ account to check.\\n    /// @return True if account is a sender.\\n    function isSender(address maybeSender_) public view returns (bool) {\\n        return access[maybeSender_] & SENDER > 0;\\n    }\\n\\n    /// Admin can grant an addres sender rights.\\n    /// @param newSender_ The account to grant sender.\\n    function grantSender(address newSender_) external onlyAdmin {\\n        // Uinsg `|` preserves receiver if previously granted.\\n        access[newSender_] |= SENDER;\\n        emit Sender(msg.sender, newSender_);\\n    }\\n\\n    /// The admin can forward or burn all tokens of a single address to end\\n    /// `PHASE_DISTRIBUTING`.\\n    /// The intent is that during `PHASE_DISTRIBUTING` there is some contract\\n    /// responsible for distributing the tokens.\\n    /// The admin specifies the distributor to end `PHASE_DISTRIBUTING` and the\\n    /// forwarding address set during initialization is used. If the forwarding\\n    /// address is `0` the rTKN will be burned, otherwise the entire balance of\\n    /// the distributor is forwarded to the nominated address. In practical\\n    /// terms the forwarding allows for escrow depositors to receive a prorata\\n    /// claim on unsold rTKN if they forward it to themselves, otherwise raise\\n    /// participants will receive a greater share of the final escrowed tokens\\n    /// due to the burn reducing the total supply.\\n    /// The distributor is NOT set during the constructor because it may not\\n    /// exist at that point. For example, Balancer needs the paired erc20\\n    /// tokens to exist before the trading pool can be built.\\n    /// @param distributor_ The distributor according to the admin.\\n    /// BURN the tokens if `address(0)`.\\n    function endDistribution(address distributor_)\\n        external\\n        onlyPhase(PHASE_DISTRIBUTING)\\n        onlyAdmin\\n    {\\n        schedulePhase(PHASE_FROZEN, block.number);\\n        address forwardTo_ = distributionEndForwardingAddress;\\n        uint256 distributorBalance_ = balanceOf(distributor_);\\n        if (distributorBalance_ > 0) {\\n            if (forwardTo_ == address(0)) {\\n                _burn(distributor_, distributorBalance_);\\n            } else {\\n                _transfer(distributor_, forwardTo_, distributorBalance_);\\n            }\\n        }\\n    }\\n\\n    /// Wraps `_redeem` from `ERC20Redeem`.\\n    /// Very thin wrapper so be careful when calling!\\n    /// @param treasuryAssets_ The treasury assets to redeem for. If this is\\n    /// empty or incomplete then tokens will be permanently burned for no\\n    /// reason by the caller and the remaining funds will be effectively\\n    /// redistributed to everyone else.\\n    function redeem(IERC20[] calldata treasuryAssets_, uint256 redeemAmount_)\\n        external\\n        onlyPhase(PHASE_FROZEN)\\n    {\\n        _redeem(treasuryAssets_, redeemAmount_);\\n    }\\n\\n    /// Apply phase sensitive transfer restrictions.\\n    /// During `Phase.ZERO` only tier requirements apply.\\n    /// During `Phase.ONE` all transfers except burns are prevented.\\n    /// If a transfer involves either a sender or receiver with the SENDER\\n    /// or RECEIVER role, respectively, it will bypass these restrictions.\\n    /// @inheritdoc ERC20Upgradeable\\n    function _beforeTokenTransfer(\\n        address sender_,\\n        address receiver_,\\n        uint256 amount_\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(sender_, receiver_, amount_);\\n\\n        // Sending tokens to this contract (e.g. instead of redeeming) is\\n        // always an error.\\n        require(receiver_ != address(this), \\\"TOKEN_SEND_SELF\\\");\\n\\n        // Some contracts may attempt a preflight (e.g. Balancer) of a 0 amount\\n        // transfer.\\n        // We don't want to accidentally cause external errors due to zero\\n        // value transfers.\\n        if (\\n            amount_ > 0 &&\\n            // The sender and receiver lists bypass all access restrictions.\\n            !(isSender(sender_) || isReceiver(receiver_))\\n        ) {\\n            // During `PHASE_DISTRIBUTING` transfers are only restricted by the\\n            // tier of the recipient. Every other phase only allows senders and\\n            // receivers as above.\\n            require(currentPhase() == PHASE_DISTRIBUTING, \\\"FROZEN\\\");\\n\\n            // Receivers act as \\\"hubs\\\" that can send to \\\"spokes\\\".\\n            // i.e. any address of the minimum tier.\\n            // Spokes cannot send tokens another \\\"hop\\\" e.g. to each other.\\n            // Spokes can only send back to a receiver (doesn't need to be\\n            // the same receiver they received from).\\n            require(isReceiver(sender_), \\\"2SPOKE\\\");\\n            require(\\n                TierReport.tierAtBlockFromReport(\\n                    tier.report(receiver_),\\n                    block.number\\n                ) >= minimumTier,\\n                \\\"MIN_TIER\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d6a738069f0c1559456e12e9fa8e1c9d2d7884f5144680140766f94bae62d51\",\"license\":\"CAL\"},\"contracts/redeemableERC20/RedeemableERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {Factory} from \\\"../factory/Factory.sol\\\";\\nimport {RedeemableERC20, RedeemableERC20Config} from \\\"./RedeemableERC20.sol\\\";\\nimport {ITier} from \\\"../tier/ITier.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\n/// @title RedeemableERC20Factory\\n/// @notice Factory for deploying and registering `RedeemableERC20` contracts.\\ncontract RedeemableERC20Factory is Factory {\\n    /// Template contract to clone.\\n    /// Deployed by the constructor.\\n    address public immutable implementation;\\n\\n    /// Build the reference implementation to clone for each child.\\n    constructor() {\\n        address implementation_ = address(new RedeemableERC20());\\n        emit Implementation(msg.sender, implementation_);\\n        implementation = implementation_;\\n    }\\n\\n    /// @inheritdoc Factory\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        RedeemableERC20Config memory config_ = abi.decode(\\n            data_,\\n            (RedeemableERC20Config)\\n        );\\n        address clone_ = Clones.clone(implementation);\\n        RedeemableERC20(clone_).initialize(config_);\\n        return clone_;\\n    }\\n\\n    /// Allows calling `createChild` with `RedeemableERC20Config` struct.\\n    /// Use original `Factory` `createChild` function signature if function\\n    /// parameters are already encoded.\\n    ///\\n    /// @param config_ `RedeemableERC20` constructor configuration.\\n    /// @return New `RedeemableERC20` child contract.\\n    function createChildTyped(RedeemableERC20Config calldata config_)\\n        external\\n        returns (RedeemableERC20)\\n    {\\n        return RedeemableERC20(this.createChild(abi.encode(config_)));\\n    }\\n}\\n\",\"keccak256\":\"0x9dd4f3a970390ecdd05aa18ab68379a8ea4315a5cf807c5f800818a1edc12e14\",\"license\":\"CAL\"},\"contracts/sale/ISale.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// An `ISale` can be in one of 4 possible states and a linear progression is\\n/// expected from an \\\"in flight\\\" status to an immutable definitive outcome.\\n/// - Pending: The sale is deployed onchain but cannot be interacted with yet.\\n/// - Active: The sale can now be bought into and otherwise interacted with.\\n/// - Success: The sale has ended AND reached its minimum raise target.\\n/// - Fail: The sale has ended BUT NOT reached its minimum raise target.\\n/// Once an `ISale` reaches `Active` it MUST NOT return `Pending` ever again.\\n/// Once an `ISale` reaches `Success` or `Fail` it MUST NOT return any other\\n/// status ever again.\\nenum SaleStatus {\\n    Pending,\\n    Active,\\n    Success,\\n    Fail\\n}\\n\\ninterface ISale {\\n    /// Returns the address of the token being sold in the sale.\\n    /// MUST NOT change during the lifecycle of the sale contract.\\n    function token() external view returns (address);\\n\\n    /// Returns the address of the token that sale prices are denominated in.\\n    /// MUST NOT change during the lifecycle of the sale contract.\\n    function reserve() external view returns (address);\\n\\n    /// Returns the current `SaleStatus` of the sale.\\n    /// Represents a linear progression of the sale through its major lifecycle\\n    /// events.\\n    function saleStatus() external view returns (SaleStatus);\\n}\\n\",\"keccak256\":\"0x05ea99f5e024326b2964dfed6c49b895376826e7115265978ceeccd9278a5b20\",\"license\":\"CAL\"},\"contracts/sale/Sale.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {Cooldown} from \\\"../cooldown/Cooldown.sol\\\";\\n\\nimport \\\"../math/FixedPointMath.sol\\\";\\nimport \\\"../vm/RainVM.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {AllStandardOps, ALL_STANDARD_OPS_START, ALL_STANDARD_OPS_LENGTH} from \\\"../vm/ops/AllStandardOps.sol\\\";\\nimport {VMState, StateConfig} from \\\"../vm/libraries/VMState.sol\\\";\\nimport {ERC20Config} from \\\"../erc20/ERC20Config.sol\\\";\\nimport \\\"./ISale.sol\\\";\\n//solhint-disable-next-line max-line-length\\nimport {RedeemableERC20, RedeemableERC20Config} from \\\"../redeemableERC20/RedeemableERC20.sol\\\";\\n//solhint-disable-next-line max-line-length\\nimport {RedeemableERC20Factory} from \\\"../redeemableERC20/RedeemableERC20Factory.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/// Everything required to construct a Sale (not initialize).\\n/// @param maximumSaleTimeout The sale timeout set in initialize cannot exceed\\n/// this. Avoids downstream escrows and similar trapping funds due to sales\\n/// that never end, or perhaps never even start.\\n/// @param maximumCooldownDuration The cooldown duration set in initialize\\n/// cannot exceed this. Avoids the \\\"no refunds\\\" situation where someone sets an\\n/// infinite cooldown, then accidentally or maliciously the sale ends up in a\\n/// state where it cannot end (bad \\\"can end\\\" script), leading to trapped funds.\\n/// @param redeemableERC20Factory The factory contract that creates redeemable\\n/// erc20 tokens that the `Sale` can mint, sell and burn.\\nstruct SaleConstructorConfig {\\n    uint256 maximumSaleTimeout;\\n    uint256 maximumCooldownDuration;\\n    RedeemableERC20Factory redeemableERC20Factory;\\n}\\n\\n/// Everything required to configure (initialize) a Sale.\\n/// @param canStartStateConfig State config for the script that allows a Sale\\n/// to start.\\n/// @param canEndStateConfig State config for the script that allows a Sale to\\n/// end. IMPORTANT: A Sale can always end if/when its rTKN sells out,\\n/// regardless of the result of this script.\\n/// @param calculatePriceStateConfig State config for the script that defines\\n/// the current price quoted by a Sale.\\n/// @param recipient The recipient of the proceeds of a Sale, if/when the Sale\\n/// is successful.\\n/// @param reserve The reserve token the Sale is deonominated in.\\n/// @param saleTimeout The number of blocks before this sale can timeout.\\n/// SHOULD be well after the expected end time as a timeout will fail an active\\n/// or pending sale regardless of any funds raised.\\n/// @param cooldownDuration forwarded to `Cooldown` contract initialization.\\n/// @param minimumRaise defines the amount of reserve required to raise that\\n/// defines success/fail of the sale. Reaching the minimum raise DOES NOT cause\\n/// the raise to end early (unless the \\\"can end\\\" script allows it of course).\\n/// @param dustSize The minimum amount of rTKN that must remain in the Sale\\n/// contract unless it is all purchased, clearing the raise to 0 stock and thus\\n/// ending the raise.\\nstruct SaleConfig {\\n    StateConfig canStartStateConfig;\\n    StateConfig canEndStateConfig;\\n    StateConfig calculatePriceStateConfig;\\n    address recipient;\\n    IERC20 reserve;\\n    uint256 saleTimeout;\\n    uint256 cooldownDuration;\\n    uint256 minimumRaise;\\n    uint256 dustSize;\\n}\\n\\n/// Forwarded config to RedeemableERC20 initialization.\\nstruct SaleRedeemableERC20Config {\\n    ERC20Config erc20Config;\\n    address tier;\\n    uint256 minimumTier;\\n    address distributionEndForwardingAddress;\\n}\\n\\n/// Defines a request to buy rTKN from an active sale.\\n/// @param feeRecipient Optional recipient to send fees to. Intended to be a\\n/// \\\"tip\\\" for the front-end client that the buyer is using to fund development,\\n/// infrastructure, etc.\\n/// @param fee Size of the optional fee to send to the recipient. Denominated\\n/// in the reserve token of the `Sale` contract.\\n/// @param minimumUnits The minimum size of the buy. If the sale is close to\\n/// selling out then the buyer may not fulfill their entire order, so this sets\\n/// the minimum units the buyer is willing to accept for their order. MAY be 0\\n/// if the buyer is willing to accept any amount of tokens.\\n/// @param desiredUnits The maximum and desired size of the buy. The sale will\\n/// always attempt to fulfill the buy order to the maximum rTKN amount possible\\n/// according to the unsold stock on hand. Typically all the desired units will\\n/// clear but as the sale runs low on stock it may not be able to.\\n/// @param maximumPrice As the price quoted by the sale is a programmable curve\\n/// it may change rapidly between when the buyer submitted a transaction to the\\n/// mempool and when it is mined. Setting a maximum price is akin to setting\\n/// slippage on a traditional AMM. The transaction will revert if the sale\\n/// price exceeds the buyer's maximum.\\nstruct BuyConfig {\\n    address feeRecipient;\\n    uint256 fee;\\n    uint256 minimumUnits;\\n    uint256 desiredUnits;\\n    uint256 maximumPrice;\\n}\\n\\n/// Defines the receipt for a successful buy.\\n/// The receipt includes the final units and price paid for rTKN, which are\\n/// known as possible ranges in `BuyConfig`.\\n/// Importantly a receipt allows a buy to be reversed for as long as the sale\\n/// is active, subject to buyer cooldowns as per `Cooldown`. In the case of a\\n/// finalized but failed sale, all buyers can immediately process refunds for\\n/// their receipts without cooldown. As the receipt is crucial to the refund\\n/// process every receipt is logged so it can be indexed and never lost, and\\n/// unique IDs bound to the buyer in onchain storage prevent receipts from\\n/// being used in a fraudulent context. The entire receipt including the id is\\n/// hashed in the storage mapping that binds it to a buyer so that a buyer\\n/// cannot change the receipt offchain to claim fraudulent refunds.\\n/// Front-end fees are also tracked and refunded for each receipt, to prevent\\n/// front end clients from gaming/abusing sale contracts.\\n/// @param id Every receipt is assigned a sequential ID to ensure uniqueness\\n/// across all receipts.\\n/// @param feeRecipient as per `BuyConfig`.\\n/// @param fee as per `BuyConfig`.\\n/// @param units number of rTKN bought and refundable.\\n/// @param price price paid per unit denominated and refundable in reserve.\\nstruct Receipt {\\n    uint256 id;\\n    address feeRecipient;\\n    uint256 fee;\\n    uint256 units;\\n    uint256 price;\\n}\\n\\n// solhint-disable-next-line max-states-count\\ncontract Sale is\\n    Initializable,\\n    Cooldown,\\n    RainVM,\\n    VMState,\\n    ISale,\\n    ReentrancyGuard\\n{\\n    using Math for uint256;\\n    using FixedPointMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// Contract is constructing.\\n    /// @param sender `msg.sender` of the contract deployer.\\n    event Construct(address sender, SaleConstructorConfig config);\\n    /// Contract is initializing (being cloned by factory).\\n    /// @param sender `msg.sender` of the contract initializer (cloner).\\n    /// @param config All initialization config passed by the sender.\\n    /// @param token The freshly deployed and minted rTKN for the sale.\\n    event Initialize(address sender, SaleConfig config, address token);\\n    /// Sale is started (moved to active sale state).\\n    /// @param sender `msg.sender` that started the sale.\\n    event Start(address sender);\\n    /// Sale has ended (moved to success/fail sale state).\\n    /// @param sender `msg.sender` that ended the sale.\\n    /// @param saleStatus The final success/fail state of the sale.\\n    event End(address sender, SaleStatus saleStatus);\\n    /// Sale has failed due to a timeout (failed to even start/end).\\n    /// @param sender `msg.sender` that timed out the sale.\\n    event Timeout(address sender);\\n    /// rTKN being bought.\\n    /// Importantly includes the receipt that sender can use to apply for a\\n    /// refund later if they wish.\\n    /// @param sender `msg.sender` buying rTKN.\\n    /// @param config All buy config passed by the sender.\\n    /// @param receipt The purchase receipt, can be used to claim refunds.\\n    event Buy(address sender, BuyConfig config, Receipt receipt);\\n    /// rTKN being refunded.\\n    /// Includes the receipt used to justify the refund.\\n    event Refund(address sender, Receipt receipt);\\n\\n    /// @dev local opcode to stack remaining rTKN units.\\n    uint256 private constant OPCODE_REMAINING_UNITS = 0;\\n    /// @dev local opcode to stack total reserve taken in so far.\\n    uint256 private constant OPCODE_TOTAL_RESERVE_IN = 1;\\n    /// @dev local opcode to stack the rTKN units/amount of the current buy.\\n    uint256 private constant OPCODE_CURRENT_BUY_UNITS = 2;\\n    /// @dev local opcode to stack the address of the rTKN.\\n    uint256 private constant OPCODE_TOKEN_ADDRESS = 3;\\n    /// @dev local opcode to stack the address of the reserve token.\\n    uint256 private constant OPCODE_RESERVE_ADDRESS = 4;\\n    /// @dev local opcodes length.\\n    uint256 internal constant LOCAL_OPS_LENGTH = 5;\\n\\n    /// @dev local offset for local ops.\\n    uint256 private immutable localOpsStart;\\n    /// @dev the saleTimeout cannot exceed this. Prevents downstream contracts\\n    /// that require a finalization such as escrows from getting permanently\\n    /// stuck in a pending or active status due to buggy scripts.\\n    uint256 private immutable maximumSaleTimeout;\\n    /// @dev the cooldown duration cannot exceed this. Prevents \\\"no refunds\\\" in\\n    /// a raise that never ends. Configured at the factory level upon deploy.\\n    uint256 private immutable maximumCooldownDuration;\\n\\n    /// Factory responsible for minting rTKN.\\n    RedeemableERC20Factory private immutable redeemableERC20Factory;\\n    /// Minted rTKN for each sale.\\n    /// Exposed via. `ISale.token()`.\\n    RedeemableERC20 private _token;\\n\\n    /// @dev as per `SaleConfig`.\\n    address private recipient;\\n    /// @dev as per `SaleConfig`.\\n    address private canStartStatePointer;\\n    /// @dev as per `SaleConfig`.\\n    address private canEndStatePointer;\\n    /// @dev as per `SaleConfig`.\\n    address private calculatePriceStatePointer;\\n    /// @dev as per `SaleConfig`.\\n    uint256 private minimumRaise;\\n    /// @dev as per `SaleConfig`.\\n    uint256 private dustSize;\\n    /// @dev as per `SaleConfig`.\\n    /// Exposed via. `ISale.reserve()`.\\n    IERC20 private _reserve;\\n\\n    /// @dev the current sale status exposed as `ISale.saleStatus`.\\n    SaleStatus private _saleStatus;\\n    /// @dev the current sale can always end in failure at this block even if\\n    /// it did not start. Provided it did not already end of course.\\n    uint256 private saleTimeout;\\n\\n    /// @dev remaining rTKN units to sell. MAY NOT be the rTKN balance of the\\n    /// Sale contract if rTKN has been sent directly to the sale contract\\n    /// outside the standard buy/refund loop.\\n    uint256 private remainingUnits;\\n    /// @dev total reserve taken in to the sale contract via. buys. Does NOT\\n    /// include any reserve sent directly to the sale contract outside the\\n    /// standard buy/refund loop.\\n    uint256 private totalReserveIn;\\n\\n    /// @dev Binding buyers to receipt hashes to maybe a non-zero value.\\n    /// A receipt will only be honoured if the mapping resolves to non-zero.\\n    /// The receipt hashing ensures that receipts cannot be manipulated before\\n    /// redemption. Each mapping is deleted if/when receipt is used for refund.\\n    /// Buyer => keccak receipt => exists (1+ or 0).\\n    mapping(address => mapping(bytes32 => uint256)) private receipts;\\n    /// @dev simple incremental counter to keep all receipts unique so that\\n    /// receipt hashes bound to buyers never collide.\\n    uint256 private nextReceiptId;\\n\\n    /// @dev Tracks combined fees per recipient to be claimed if/when a sale\\n    /// is successful.\\n    /// Fee recipient => unclaimed fees.\\n    mapping(address => uint256) private fees;\\n\\n    constructor(SaleConstructorConfig memory config_) {\\n        localOpsStart = ALL_STANDARD_OPS_START + ALL_STANDARD_OPS_LENGTH;\\n\\n        maximumSaleTimeout = config_.maximumSaleTimeout;\\n        maximumCooldownDuration = config_.maximumCooldownDuration;\\n\\n        redeemableERC20Factory = config_.redeemableERC20Factory;\\n\\n        emit Construct(msg.sender, config_);\\n    }\\n\\n    function initialize(\\n        SaleConfig memory config_,\\n        SaleRedeemableERC20Config memory saleRedeemableERC20Config_\\n    ) external initializer {\\n        require(\\n            config_.cooldownDuration <= maximumCooldownDuration,\\n            \\\"MAX_COOLDOWN\\\"\\n        );\\n        initializeCooldown(config_.cooldownDuration);\\n\\n        require(config_.saleTimeout <= maximumSaleTimeout, \\\"MAX_TIMEOUT\\\");\\n        saleTimeout = block.number + config_.saleTimeout;\\n\\n        // 0 minimum raise is ambiguous as to how it should be handled. It\\n        // literally means \\\"the raise succeeds without any trades\\\", which\\n        // doesn't have a clear way to move funds around as there are no\\n        // recipients of potentially escrowed or redeemable funds. There needs\\n        // to be at least 1 reserve token paid from 1 buyer in order to\\n        // meaningfully process success logic.\\n        require(config_.minimumRaise > 0, \\\"MIN_RAISE_0\\\");\\n        minimumRaise = config_.minimumRaise;\\n\\n        canStartStatePointer = _snapshot(\\n            _newState(config_.canStartStateConfig)\\n        );\\n        canEndStatePointer = _snapshot(_newState(config_.canEndStateConfig));\\n        calculatePriceStatePointer = _snapshot(\\n            _newState(config_.calculatePriceStateConfig)\\n        );\\n        recipient = config_.recipient;\\n\\n        dustSize = config_.dustSize;\\n\\n        // just making this explicit during initialization in case it ever\\n        // takes a nonzero value somehow due to refactor.\\n        _saleStatus = SaleStatus.Pending;\\n\\n        _reserve = config_.reserve;\\n\\n        // The distributor of the rTKN is always set to the sale contract.\\n        // It is an error for the deployer to attempt to set the distributor.\\n        require(\\n            saleRedeemableERC20Config_.erc20Config.distributor == address(0),\\n            \\\"DISTRIBUTOR_SET\\\"\\n        );\\n        saleRedeemableERC20Config_.erc20Config.distributor = address(this);\\n\\n        remainingUnits = saleRedeemableERC20Config_.erc20Config.initialSupply;\\n\\n        RedeemableERC20 token_ = RedeemableERC20(\\n            redeemableERC20Factory.createChild(\\n                abi.encode(\\n                    RedeemableERC20Config(\\n                        address(config_.reserve),\\n                        saleRedeemableERC20Config_.erc20Config,\\n                        saleRedeemableERC20Config_.tier,\\n                        saleRedeemableERC20Config_.minimumTier,\\n                        saleRedeemableERC20Config_\\n                            .distributionEndForwardingAddress\\n                    )\\n                )\\n            )\\n        );\\n        _token = token_;\\n\\n        emit Initialize(msg.sender, config_, address(token_));\\n    }\\n\\n    /// @inheritdoc ISale\\n    function token() external view returns (address) {\\n        return address(_token);\\n    }\\n\\n    /// @inheritdoc ISale\\n    function reserve() external view returns (address) {\\n        return address(_reserve);\\n    }\\n\\n    /// @inheritdoc ISale\\n    function saleStatus() external view returns (SaleStatus) {\\n        return _saleStatus;\\n    }\\n\\n    /// Can the sale start?\\n    /// Evals `canStartStatePointer` to a boolean that determines whether the\\n    /// sale can start (move from pending to active). Buying from and ending\\n    /// the sale will both always fail if the sale never started.\\n    /// The sale can ONLY start if it is currently in pending status.\\n    function canStart() public view returns (bool) {\\n        // Only a pending sale can start. Starting a sale more than once would\\n        // always be a bug.\\n        if (_saleStatus == SaleStatus.Pending) {\\n            State memory state_ = _restore(canStartStatePointer);\\n            eval(\\\"\\\", state_, 0);\\n            return state_.stack[state_.stackIndex - 1] > 0;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// Can the sale end?\\n    /// Evals `canEndStatePointer` to a boolean that determines whether the\\n    /// sale can end (move from active to success/fail). Buying will fail if\\n    /// the sale has ended.\\n    /// If the sale is out of rTKN stock it can ALWAYS end and in this case\\n    /// will NOT eval the \\\"can end\\\" script.\\n    /// The sale can ONLY end if it is currently in active status.\\n    function canEnd() public view returns (bool) {\\n        // Only an active sale can end. Ending an ended or pending sale would\\n        // always be a bug.\\n        if (_saleStatus == SaleStatus.Active) {\\n            // It is always possible to end an out of stock sale because at\\n            // this point the only further buys that can happen are after a\\n            // refund, and it makes no sense that someone would refund at a low\\n            // price to buy at a high price. Therefore we should end the sale\\n            // and tally the final result as soon as we sell out.\\n            if (remainingUnits < 1) {\\n                return true;\\n            }\\n            // The raise is active and still has stock remaining so we delegate\\n            // to the appropriate script for an answer.\\n            else {\\n                State memory state_ = _restore(canEndStatePointer);\\n                eval(\\\"\\\", state_, 0);\\n                return state_.stack[state_.stackIndex - 1] > 0;\\n            }\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// Calculates the current reserve price quoted for 1 unit of rTKN.\\n    /// Used internally to process `buy`.\\n    /// @param units_ Amount of rTKN to quote a price for, will be available to\\n    /// the price script from OPCODE_CURRENT_BUY_UNITS.\\n    function calculatePrice(uint256 units_) public view returns (uint256) {\\n        State memory state_ = _restore(calculatePriceStatePointer);\\n        eval(abi.encode(units_), state_, 0);\\n\\n        return state_.stack[state_.stackIndex - 1];\\n    }\\n\\n    /// Start the sale (move from pending to active).\\n    /// `canStart` MUST return true.\\n    function start() external {\\n        require(canStart(), \\\"CANT_START\\\");\\n        _saleStatus = SaleStatus.Active;\\n        emit Start(msg.sender);\\n    }\\n\\n    /// End the sale (move from active to success or fail).\\n    /// `canEnd` MUST return true.\\n    function end() public {\\n        require(canEnd(), \\\"CANT_END\\\");\\n\\n        bool success_ = totalReserveIn >= minimumRaise;\\n        SaleStatus endStatus_ = success_ ? SaleStatus.Success : SaleStatus.Fail;\\n\\n        remainingUnits = 0;\\n        _saleStatus = endStatus_;\\n        emit End(msg.sender, endStatus_);\\n        _token.endDistribution(address(this));\\n\\n        // Only send reserve to recipient if the raise is a success.\\n        // If the raise is NOT a success then everyone can refund their reserve\\n        // deposited individually.\\n        if (success_) {\\n            _reserve.safeTransfer(recipient, totalReserveIn);\\n        }\\n    }\\n\\n    /// Timeout the sale (move from pending or active to fail).\\n    /// The ONLY condition for a timeout is that the `saleTimeout` block set\\n    /// during initialize is in the past. This means that regardless of what\\n    /// happens re: starting, ending, buying, etc. if the sale does NOT manage\\n    /// to unambiguously end by the timeout block then it can timeout to a fail\\n    /// state. This means that any downstream escrows or similar can always\\n    /// expect that eventually they will see a pass/fail state and so are safe\\n    /// to lock funds while a Sale is active.\\n    function timeout() external {\\n        require(saleTimeout < block.number, \\\"EARLY_TIMEOUT\\\");\\n        require(\\n            _saleStatus == SaleStatus.Pending ||\\n                _saleStatus == SaleStatus.Active,\\n            \\\"ALREADY_ENDED\\\"\\n        );\\n\\n        // Mimic `end` with a failed state but `Timeout` event.\\n        remainingUnits = 0;\\n        _saleStatus = SaleStatus.Fail;\\n        emit Timeout(msg.sender);\\n        _token.endDistribution(address(this));\\n    }\\n\\n    /// Main entrypoint to the sale. Sells rTKN in exchange for reserve token.\\n    /// The price curve is eval'd to produce a reserve price quote. Each 1 unit\\n    /// of rTKN costs `price` reserve token where BOTH the rTKN units and price\\n    /// are treated as 18 decimal fixed point values. If the reserve token has\\n    /// more or less precision by its own conventions (e.g. \\\"decimals\\\" method\\n    /// on ERC20 tokens) then the price will need to scale accordingly.\\n    /// The receipt is _logged_ rather than returned as it cannot be used in\\n    /// same block for a refund anyway due to cooldowns.\\n    /// @param config_ All parameters to configure the purchase.\\n    function buy(BuyConfig memory config_)\\n        external\\n        onlyAfterCooldown\\n        nonReentrant\\n    {\\n        require(0 < config_.minimumUnits, \\\"0_MINIMUM\\\");\\n        require(\\n            config_.minimumUnits <= config_.desiredUnits,\\n            \\\"MINIMUM_OVER_DESIRED\\\"\\n        );\\n\\n        require(_saleStatus == SaleStatus.Active, \\\"NOT_ACTIVE\\\");\\n\\n        uint256 units_ = config_.desiredUnits.min(remainingUnits);\\n        require(units_ >= config_.minimumUnits, \\\"INSUFFICIENT_STOCK\\\");\\n\\n        uint256 price_ = calculatePrice(units_);\\n\\n        require(price_ <= config_.maximumPrice, \\\"MAXIMUM_PRICE\\\");\\n        uint256 cost_ = price_.fixedPointMul(units_);\\n\\n        Receipt memory receipt_ = Receipt(\\n            nextReceiptId,\\n            config_.feeRecipient,\\n            config_.fee,\\n            units_,\\n            price_\\n        );\\n        nextReceiptId++;\\n        // There should never be more than one of the same key due to the ID\\n        // counter but we can use checked math to easily cover the case of\\n        // potential duplicate receipts due to some bug.\\n        receipts[msg.sender][keccak256(abi.encode(receipt_))]++;\\n\\n        fees[config_.feeRecipient] += config_.fee;\\n\\n        // We ignore any rTKN or reserve that is sent to the contract directly\\n        // outside of a `buy` call. This also means we don't support reserve\\n        // tokens with balances that can change outside of transfers\\n        // (e.g. rebase).\\n        remainingUnits -= units_;\\n        totalReserveIn += cost_;\\n\\n        // This happens before `end` so that the transfer from happens before\\n        // the transfer to.\\n        // `end` changes state so `buy` needs to be nonReentrant.\\n        _reserve.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            cost_ + config_.fee\\n        );\\n        // This happens before `end` so that the transfer happens before the\\n        // distributor is burned and token is frozen.\\n        IERC20(address(_token)).safeTransfer(msg.sender, units_);\\n\\n        if (remainingUnits < 1) {\\n            end();\\n        } else {\\n            require(remainingUnits >= dustSize, \\\"DUST\\\");\\n        }\\n\\n        emit Buy(msg.sender, config_, receipt_);\\n    }\\n\\n    /// @dev This is here so we can use a modifier like a function call.\\n    function refundCooldown()\\n        private\\n        onlyAfterCooldown\\n    // solhint-disable-next-line no-empty-blocks\\n    {\\n\\n    }\\n\\n    /// Rollback a buy given its receipt.\\n    /// Ignoring gas (which cannot be refunded) the refund process rolls back\\n    /// all state changes caused by a buy, other than the receipt id increment.\\n    /// Refunds are limited by the global cooldown to mitigate rapid buy/refund\\n    /// cycling that could cause volatile price curves or other unwanted side\\n    /// effects for other sale participants. Cooldowns are bypassed if the sale\\n    /// ends and is a failure.\\n    /// @param receipt_ The receipt of the buy to rollback.\\n    function refund(Receipt calldata receipt_) external {\\n        require(_saleStatus != SaleStatus.Success, \\\"REFUND_SUCCESS\\\");\\n        // If the sale failed then cooldowns do NOT apply. Everyone should\\n        // immediately refund all their receipts.\\n        if (_saleStatus != SaleStatus.Fail) {\\n            refundCooldown();\\n        }\\n\\n        // Checked math here will prevent consuming a receipt that doesn't\\n        // exist or was already refunded as it will underflow.\\n        receipts[msg.sender][keccak256(abi.encode(receipt_))]--;\\n\\n        uint256 cost_ = receipt_.price.fixedPointMul(receipt_.units);\\n\\n        totalReserveIn -= cost_;\\n        remainingUnits += receipt_.units;\\n        fees[receipt_.feeRecipient] -= receipt_.fee;\\n\\n        emit Refund(msg.sender, receipt_);\\n\\n        IERC20(address(_token)).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            receipt_.units\\n        );\\n        _reserve.safeTransfer(msg.sender, cost_ + receipt_.fee);\\n    }\\n\\n    /// After a sale ends in success all fees collected for a recipient can be\\n    /// cleared. If the raise is active or fails then fees cannot be claimed as\\n    /// they are set aside in case of refund. A failed raise implies that all\\n    /// buyers should immediately refund and zero fees claimed.\\n    /// @param recipient_ The recipient to claim fees for. Does NOT need to be\\n    /// the `msg.sender`.\\n    function claimFees(address recipient_) external {\\n        require(_saleStatus == SaleStatus.Success, \\\"NOT_SUCCESS\\\");\\n        uint256 amount_ = fees[recipient_];\\n        if (amount_ > 0) {\\n            delete fees[recipient_];\\n            _reserve.safeTransfer(recipient_, amount_);\\n        }\\n    }\\n\\n    /// @inheritdoc RainVM\\n    function applyOp(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view override {\\n        unchecked {\\n            if (opcode_ < localOpsStart) {\\n                AllStandardOps.applyOp(\\n                    state_,\\n                    opcode_ - ALL_STANDARD_OPS_START,\\n                    operand_\\n                );\\n            } else {\\n                opcode_ -= localOpsStart;\\n                require(opcode_ < LOCAL_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n                if (opcode_ == OPCODE_REMAINING_UNITS) {\\n                    state_.stack[state_.stackIndex] = remainingUnits;\\n                } else if (opcode_ == OPCODE_TOTAL_RESERVE_IN) {\\n                    state_.stack[state_.stackIndex] = totalReserveIn;\\n                } else if (opcode_ == OPCODE_CURRENT_BUY_UNITS) {\\n                    uint256 units_ = abi.decode(context_, (uint256));\\n                    state_.stack[state_.stackIndex] = units_;\\n                } else if (opcode_ == OPCODE_TOKEN_ADDRESS) {\\n                    state_.stack[state_.stackIndex] = uint256(\\n                        uint160(address(_token))\\n                    );\\n                } else if (opcode_ == OPCODE_RESERVE_ADDRESS) {\\n                    state_.stack[state_.stackIndex] = uint256(\\n                        uint160(address(_reserve))\\n                    );\\n                }\\n                state_.stackIndex++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ea4b93f3ed8d09759ce50bcb9f244b8532c8fbda0877e78839a861f4c821719\",\"license\":\"CAL\"},\"contracts/sale/SaleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {Factory} from \\\"../factory/Factory.sol\\\";\\nimport \\\"./Sale.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\n/// @title SaleFactory\\n/// @notice Factory for creating and deploying `Sale` contracts.\\ncontract SaleFactory is Factory {\\n    /// Template contract to clone.\\n    /// Deployed by the constructor.\\n    address private immutable implementation;\\n\\n    /// Build the reference implementation to clone for each child.\\n    constructor(SaleConstructorConfig memory config_) {\\n        address implementation_ = address(new Sale(config_));\\n        // silence slither.\\n        require(implementation_ != address(0), \\\"0_IMPLEMENTATION\\\");\\n        emit Implementation(msg.sender, implementation_);\\n        implementation = implementation_;\\n    }\\n\\n    /// @inheritdoc Factory\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        (\\n            SaleConfig memory config_,\\n            SaleRedeemableERC20Config memory saleRedeemableERC20Config_\\n        ) = abi.decode(data_, (SaleConfig, SaleRedeemableERC20Config));\\n        address clone_ = Clones.clone(implementation);\\n        Sale(clone_).initialize(config_, saleRedeemableERC20Config_);\\n        return clone_;\\n    }\\n\\n    /// Allows calling `createChild` with `SeedERC20Config` struct.\\n    /// Use original `Factory` `createChild` function signature if function\\n    /// parameters are already encoded.\\n    ///\\n    /// @param config_ `SaleConfig` constructor configuration.\\n    /// @return New `Sale` child contract.\\n    function createChildTyped(\\n        SaleConfig calldata config_,\\n        SaleRedeemableERC20Config calldata saleRedeemableERC20Config_\\n    ) external returns (Sale) {\\n        return\\n            Sale(\\n                this.createChild(\\n                    abi.encode(config_, saleRedeemableERC20Config_)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x3c5292d6ad368532cc3c366f705e5a5f9ff0eaabf3504b31c0624d7debd72215\",\"license\":\"CAL\"},\"contracts/sstore2/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of\\n  data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n    error WriteError();\\n\\n    /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n    function write(bytes memory _data) internal returns (address pointer) {\\n        // Append 00 to _data so contract can't be called\\n        // Build init code\\n        bytes memory code = Bytecode.creationCodeFor(\\n            abi.encodePacked(hex\\\"00\\\", _data)\\n        );\\n\\n        // Deploy contract using create\\n        assembly {\\n            pointer := create(0, add(code, 32), mload(code))\\n        }\\n\\n        // Address MUST be non-zero\\n        if (pointer == address(0)) revert WriteError();\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer, uint256 _start)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n    function read(\\n        address _pointer,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x233f8e9ad3717999efbf17923c0f16aaf910f79064aff273485237b4f2a1ef2f\",\"license\":\"MIT\"},\"contracts/sstore2/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nlibrary Bytecode {\\n    error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n    /**\\n    @notice Generate a creation code that results on a contract with `_code` as\\n    bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n    function creationCodeFor(bytes memory _code)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n        return\\n            abi.encodePacked(\\n                hex\\\"63\\\",\\n                uint32(_code.length),\\n                hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n                _code\\n            );\\n    }\\n\\n    /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n    function codeSize(address _addr) internal view returns (uint256 size) {\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n    }\\n\\n    /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n    function codeAt(\\n        address _addr,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal view returns (bytes memory oCode) {\\n        uint256 csize = codeSize(_addr);\\n        if (csize == 0) return bytes(\\\"\\\");\\n\\n        if (_start > csize) return bytes(\\\"\\\");\\n        if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end);\\n\\n        unchecked {\\n            uint256 reqSize = _end - _start;\\n            uint256 maxSize = csize - _start;\\n\\n            uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n            assembly {\\n                // allocate output byte array - this could also be done without\\n                // assembly\\n                // by using o_code = new bytes(size)\\n                oCode := mload(0x40)\\n                // new \\\"memory end\\\" including padding\\n                mstore(\\n                    0x40,\\n                    add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n                )\\n                // store length in memory\\n                mstore(oCode, size)\\n                // actually retrieve the code, this needs assembly\\n                extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb113974373d234e70f518f0f7c3f34162c008031c168ba3b8ed12f438d5e7145\",\"license\":\"MIT\"},\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers as a `uint`.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at `1`; Tier `0` is implied if no tier has ever\\n///     been held.\\n///   - Tier `0` is NOT encoded in the report, it is simply the fallback value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If a tier is held but the historical block information is not available\\n///     the report MAY return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if tier 0 is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\n///\\n/// So the four possible states and report values are:\\n/// - Tier is held and block is known: Block is in the report\\n/// - Tier is held but block is NOT known: `0` is in the report\\n/// - Tier is NOT held: `0xFF..` is in the report\\n/// - Tier is unknown: `0xFF..` is in the report\\ninterface ITier {\\n    /// Every time a tier changes we log start and end tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    /// The start tier MAY be lower than the current tier as at the block this\\n    /// event is emitted in.\\n    /// @param sender The `msg.sender` that authorized the tier change.\\n    /// @param account The account changing tier.\\n    /// @param startTier The previous tier the account held.\\n    /// @param endTier The newly acquired tier the account now holds.\\n    /// @param data The associated data for the tier change.\\n    event TierChange(\\n        address sender,\\n        address account,\\n        uint256 startTier,\\n        uint256 endTier,\\n        bytes data\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, uint startTier, uint endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where tier 3 can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// tier 0 to themselves.\\n    ///\\n    /// The tier 0 status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        uint256 endTier,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with tier 0 for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at tier 8\\n    /// from high bits and working down to tier 1.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost and\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae2cc8231b77c7d7d907f88c7a627191bb84c26794b8a3d76ff7841eebff7316\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierConstants.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title TierConstants\\n/// @notice Constants for use with tier logic.\\nlibrary TierConstants {\\n    /// NEVER is 0xFF.. as it is infinitely in the future.\\n    /// NEVER for an entire report.\\n    uint256 internal constant NEVER_REPORT = type(uint256).max;\\n    /// NEVER for a single tier.\\n    uint32 internal constant NEVER_TIER = type(uint32).max;\\n\\n    /// Always is 0 as it is the genesis block.\\n    /// Tiers can't predate the chain but they can predate an `ITier` contract.\\n    uint256 internal constant ALWAYS = 0;\\n\\n    /// Account has never held a tier.\\n    uint256 internal constant TIER_ZERO = 0;\\n\\n    /// Magic number for tier one.\\n    uint256 internal constant TIER_ONE = 1;\\n    /// Magic number for tier two.\\n    uint256 internal constant TIER_TWO = 2;\\n    /// Magic number for tier three.\\n    uint256 internal constant TIER_THREE = 3;\\n    /// Magic number for tier four.\\n    uint256 internal constant TIER_FOUR = 4;\\n    /// Magic number for tier five.\\n    uint256 internal constant TIER_FIVE = 5;\\n    /// Magic number for tier six.\\n    uint256 internal constant TIER_SIX = 6;\\n    /// Magic number for tier seven.\\n    uint256 internal constant TIER_SEVEN = 7;\\n    /// Magic number for tier eight.\\n    uint256 internal constant TIER_EIGHT = 8;\\n    /// Maximum tier is `TIER_EIGHT`.\\n    uint256 internal constant MAX_TIER = TIER_EIGHT;\\n}\\n\",\"keccak256\":\"0x271026773264b9c4e68753778ffeeb00c7bd31ddf350f526ae383b2aef4bd6ff\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierReport.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ITier} from \\\"../ITier.sol\\\";\\nimport \\\"./TierConstants.sol\\\";\\n\\n/// @title TierReport\\n/// @notice `TierReport` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this\\n/// factors that out.\\nlibrary TierReport {\\n    /// Enforce upper limit on tiers so we can do unchecked math.\\n    /// @param tier_ The tier to enforce bounds on.\\n    modifier maxTier(uint256 tier_) {\\n        require(tier_ <= TierConstants.MAX_TIER, \\\"MAX_TIER\\\");\\n        _;\\n    }\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(uint256 report_, uint256 blockNumber_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < 8; i_++) {\\n                if (uint32(uint256(report_ >> (i_ * 32))) > blockNumber_) {\\n                    return i_;\\n                }\\n            }\\n            return TierConstants.MAX_TIER;\\n        }\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // ZERO is a special case. Everyone has always been at least ZERO,\\n            // since block 0.\\n            if (tier_ == 0) {\\n                return 0;\\n            }\\n\\n            uint256 offset_ = (tier_ - 1) * 32;\\n            return uint256(uint32(uint256(report_ >> offset_)));\\n        }\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            uint256 mask_ = (TierConstants.NEVER_REPORT >> offset_) << offset_;\\n            return report_ | mask_;\\n        }\\n    }\\n\\n    /// Updates a report with a block number for a given tier.\\n    /// More gas efficient than `updateBlocksForTierRange` if only a single\\n    /// tier is being modified.\\n    /// The tier at/above the given tier is updated. E.g. tier `0` will update\\n    /// the block for tier `1`.\\n    /// @param report_ Report to use as the baseline for the updated report.\\n    /// @param tier_ The tier level to update.\\n    /// @param blockNumber_ The new block number for `tier_`.\\n    function updateBlockAtTier(\\n        uint256 report_,\\n        uint256 tier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(tier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            return\\n                (report_ &\\n                    ~uint256(uint256(TierConstants.NEVER_TIER) << offset_)) |\\n                uint256(blockNumber_ << offset_);\\n        }\\n    }\\n\\n    /// Updates a report with a block number for every tier in a range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start tier.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier at the start of the range (exclusive).\\n    /// @param endTier_ The tier at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every tier in the\\n    /// range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(endTier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_;\\n            for (uint256 i_ = startTier_; i_ < endTier_; i_++) {\\n                offset_ = i_ * 32;\\n                report_ =\\n                    (report_ &\\n                        ~uint256(\\n                            uint256(TierConstants.NEVER_TIER) << offset_\\n                        )) |\\n                    uint256(blockNumber_ << offset_);\\n            }\\n            return report_;\\n        }\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure returns (uint256) {\\n        return\\n            endTier_ < startTier_\\n                ? truncateTiersAbove(report_, endTier_)\\n                : updateBlocksForTierRange(\\n                    report_,\\n                    startTier_,\\n                    endTier_,\\n                    blockNumber_\\n                );\\n    }\\n}\\n\",\"keccak256\":\"0x214b857ca65e52ee4e7e631f656b650f612e1bf2e3cf7cf74544fa3550a10743\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierwiseCombine.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TierReport.sol\\\";\\nimport \\\"../../math/SaturatingMath.sol\\\";\\n\\nlibrary TierwiseCombine {\\n    using Math for uint256;\\n    using SaturatingMath for uint256;\\n\\n    /// Every lte check in `selectLte` must pass.\\n    uint256 internal constant LOGIC_EVERY = 0;\\n    /// Only one lte check in `selectLte` must pass.\\n    uint256 internal constant LOGIC_ANY = 1;\\n\\n    /// Select the minimum block number from passing blocks in `selectLte`.\\n    uint256 internal constant MODE_MIN = 0;\\n    /// Select the maximum block number from passing blocks in `selectLte`.\\n    uint256 internal constant MODE_MAX = 1;\\n    /// Select the first block number that passes in `selectLte`.\\n    uint256 internal constant MODE_FIRST = 2;\\n\\n    /// Performs a tierwise saturating subtraction of two reports.\\n    /// Intepret as \\\"# of blocks older report was held before newer report\\\".\\n    /// If older report is in fact newer then `0` will be returned.\\n    /// i.e. the diff cannot be negative, older report as simply spent 0 blocks\\n    /// existing before newer report, if it is in truth the newer report.\\n    /// @param newerReport_ Block to subtract from.\\n    /// @param olderReport_ Block to subtract.\\n    function saturatingSub(uint256 newerReport_, uint256 olderReport_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 ret_;\\n            for (uint256 tier_ = 1; tier_ <= 8; tier_++) {\\n                uint256 newerBlock_ = TierReport.tierBlock(newerReport_, tier_);\\n                uint256 olderBlock_ = TierReport.tierBlock(olderReport_, tier_);\\n                uint256 diff_ = newerBlock_.saturatingSub(olderBlock_);\\n                ret_ = TierReport.updateBlockAtTier(ret_, tier_ - 1, diff_);\\n            }\\n            return ret_;\\n        }\\n    }\\n\\n    /// Given a list of reports, selects the best tier in a tierwise fashion.\\n    /// The \\\"best\\\" criteria can be configured by `logic_` and `mode_`.\\n    /// Logic can be \\\"every\\\" or \\\"any\\\", which means that the reports for a given\\n    /// tier must either all or any be less than or equal to the reference\\n    /// `blockNumber_`.\\n    /// Mode can be \\\"min\\\", \\\"max\\\", \\\"first\\\" which selects between all the block\\n    /// numbers for a given tier that meet the lte criteria.\\n    /// IMPORTANT: If the output of `selectLte` is used to write to storage\\n    /// care must be taken to ensure that \\\"upcoming\\\" tiers relative to the\\n    /// `blockNumber_` are not overwritten inappropriately. Typically this\\n    /// function should be used as a filter over reads only from an upstream\\n    /// source of truth.\\n    /// @param reports_ The list of reports to select over.\\n    /// @param blockNumber_ The block number that tier blocks must be lte.\\n    /// @param logic_ `LOGIC_EVERY` or `LOGIC_ANY`.\\n    /// @param mode_ `MODE_MIN`, `MODE_MAX` or `MODE_FIRST`.\\n    function selectLte(\\n        uint256[] memory reports_,\\n        uint256 blockNumber_,\\n        uint256 logic_,\\n        uint256 mode_\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 ret_;\\n            uint256 block_;\\n            bool anyLte_;\\n            uint256 length_ = reports_.length;\\n            for (uint256 tier_ = 1; tier_ <= 8; tier_++) {\\n                uint256 accumulator_;\\n                // Nothing lte the reference block for this tier yet.\\n                anyLte_ = false;\\n\\n                // Initialize the accumulator for this tier.\\n                if (mode_ == MODE_MIN) {\\n                    accumulator_ = TierConstants.NEVER_REPORT;\\n                } else {\\n                    accumulator_ = 0;\\n                }\\n\\n                // Filter all the blocks at the current tier from all the\\n                // reports against the reference tier and each other.\\n                for (uint256 i_ = 0; i_ < length_; i_++) {\\n                    block_ = TierReport.tierBlock(reports_[i_], tier_);\\n\\n                    if (block_ <= blockNumber_) {\\n                        // Min and max need to compare current value against\\n                        // the accumulator.\\n                        if (mode_ == MODE_MIN) {\\n                            accumulator_ = block_.min(accumulator_);\\n                        } else if (mode_ == MODE_MAX) {\\n                            accumulator_ = block_.max(accumulator_);\\n                        } else if (mode_ == MODE_FIRST && !anyLte_) {\\n                            accumulator_ = block_;\\n                        }\\n                        anyLte_ = true;\\n                    } else if (logic_ == LOGIC_EVERY) {\\n                        // Can short circuit for an \\\"every\\\" check.\\n                        accumulator_ = TierConstants.NEVER_REPORT;\\n                        break;\\n                    }\\n                }\\n                if (!anyLte_) {\\n                    accumulator_ = TierConstants.NEVER_REPORT;\\n                }\\n                ret_ = TierReport.updateBlockAtTier(\\n                    ret_,\\n                    tier_ - 1,\\n                    accumulator_\\n                );\\n            }\\n            return ret_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0594a22229d590e8db2b217ea9bd4ce2b20fcb2a85f305e6582a693b42b18ae6\",\"license\":\"CAL\"},\"contracts/vm/RainVM.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// Everything required to evaluate and track the state of a rain script.\\n/// As this is a struct it will be in memory when passed to `RainVM` and so\\n/// will be modified by reference internally. This is important for gas\\n/// efficiency; the stack, arguments and stackIndex will likely be mutated by\\n/// the running script.\\n/// @param stackIndex Opcodes write to the stack at the stack index and can\\n/// consume from the stack by decrementing the index and reading between the\\n/// old and new stack index.\\n/// IMPORANT: The stack is never zeroed out so the index must be used to\\n/// find the \\\"top\\\" of the stack as the result of an `eval`.\\n/// @param stack Stack is the general purpose runtime state that opcodes can\\n/// read from and write to according to their functionality.\\n/// @param sources Sources available to be executed by `eval`.\\n/// Notably `ZIPMAP` can also select a source to execute by index.\\n/// @param constants Constants that can be copied to the stack by index by\\n/// `VAL`.\\n/// @param arguments `ZIPMAP` populates arguments which can be copied to the\\n/// stack by `VAL`.\\nstruct State {\\n    uint256 stackIndex;\\n    uint256[] stack;\\n    bytes[] sources;\\n    uint256[] constants;\\n    uint256[] arguments;\\n}\\n\\n/// @dev Number of provided opcodes for `RainVM`.\\nuint256 constant RAIN_VM_OPS_LENGTH = 5;\\n\\n/// @title RainVM\\n/// @notice micro VM for implementing and executing custom contract DSLs.\\n/// Libraries and contracts map opcodes to `view` functionality then RainVM\\n/// runs rain scripts using these opcodes. Rain scripts dispatch as pairs of\\n/// bytes. The first byte is an opcode to run and the second byte is a value\\n/// the opcode can use contextually to inform how to run. Typically opcodes\\n/// will read/write to the stack to produce some meaningful final state after\\n/// all opcodes have been dispatched.\\n///\\n/// The only thing required to run a rain script is a `State` struct to pass\\n/// to `eval`, and the index of the source to run. Additional context can\\n/// optionally be provided to be used by opcodes. For example, an `ITier`\\n/// contract can take the input of `report`, abi encode it as context, then\\n/// expose a local opcode that copies this account to the stack. The state will\\n/// be mutated by reference rather than returned by `eval`, this is to make it\\n/// very clear to implementers that the inline mutation is occurring.\\n///\\n/// Rain scripts run \\\"top to bottom\\\", i.e. \\\"left to right\\\".\\n/// See the tests for examples on how to construct rain script in JavaScript\\n/// then pass to `ImmutableSource` contracts deployed by a factory that then\\n/// run `eval` to produce a final value.\\n///\\n/// There are only 4 \\\"core\\\" opcodes for `RainVM`:\\n/// - `0`: Skip self and optionally additional opcodes, `0 0` is a noop.\\n///   DEPRECATED! DON'T USE SKIP!\\n///   See https://github.com/beehive-innovation/rain-protocol/issues/262\\n/// - `1`: Copy value from either `constants` or `arguments` at index `operand`\\n///   to the top of the stack. High bit of `operand` is `0` for `constants` and\\n///   `1` for `arguments`.\\n/// - `2`: Duplicates the value at stack index `operand_` to the top of the\\n///   stack.\\n/// - `3`: Zipmap takes N values from the stack, interprets each as an array of\\n///   configurable length, then zips them into `arguments` and maps a source\\n///   from `sources` over these. See `zipmap` for more details.\\n///\\n/// To do anything useful the contract that inherits `RainVM` needs to provide\\n/// opcodes to build up an internal DSL. This may sound complex but it only\\n/// requires mapping opcode integers to functions to call, and reading/writing\\n/// values to the stack as input/output for these functions. Further, opcode\\n/// packs are provided in rain that any inheriting contract can use as a normal\\n/// solidity library. See `MathOps.sol` opcode pack and the\\n/// `CalculatorTest.sol` test contract for an example of how to dispatch\\n/// opcodes and handle the results in a wrapping contract.\\n///\\n/// RainVM natively has no concept of branching logic such as `if` or loops.\\n/// An opcode pack could implement these similar to the core zipmap by lazily\\n/// evaluating a source from `sources` based on some condition, etc. Instead\\n/// some simpler, eagerly evaluated selection tools such as `min` and `max` in\\n/// the `MathOps` opcode pack are provided. Future versions of `RainVM` MAY\\n/// implement lazy `if` and other similar patterns.\\n///\\n/// The `eval` function is `view` because rain scripts are expected to compute\\n/// results only without modifying any state. The contract wrapping the VM is\\n/// free to mutate as usual. This model encourages exposing only read-only\\n/// functionality to end-user deployers who provide scripts to a VM factory.\\n/// Removing all writes removes a lot of potential foot-guns for rain script\\n/// authors and allows VM contract authors to reason more clearly about the\\n/// input/output of the wrapping solidity code.\\n///\\n/// Internally `RainVM` makes heavy use of unchecked math and assembly logic\\n/// as the opcode dispatch logic runs on a tight loop and so gas costs can ramp\\n/// up very quickly. Implementing contracts and opcode packs SHOULD require\\n/// that opcodes they receive do not exceed the codes they are expecting.\\nabstract contract RainVM {\\n    /// DEPRECATED! DONT USE SKIP!\\n    /// `0` is a skip as this is the fallback value for unset solidity bytes.\\n    /// Any additional \\\"whitespace\\\" in rain scripts will be noops as `0 0` is\\n    /// \\\"skip self\\\". The val can be used to skip additional opcodes but take\\n    /// care to not underflow the source itself.\\n    uint256 private constant OP_SKIP = 0;\\n    /// `1` copies a value either off `constants` or `arguments` to the top of\\n    /// the stack. The high bit of the operand specifies which, `0` for\\n    /// `constants` and `1` for `arguments`.\\n    uint256 private constant OP_VAL = 1;\\n    /// `2` Duplicates the value at index `operand_` to the top of the stack.\\n    uint256 private constant OP_DUP = 2;\\n    /// `3` takes N values off the stack, interprets them as an array then zips\\n    /// and maps a source from `sources` over them. The source has access to\\n    /// the original constants using `1 0` and to zipped arguments as `1 1`.\\n    uint256 private constant OP_ZIPMAP = 3;\\n    /// `4` ABI encodes the entire stack and logs it to the hardhat console.\\n    uint256 private constant OP_DEBUG = 4;\\n\\n    /// Zipmap is rain script's native looping construct.\\n    /// N values are taken from the stack as `uint256` then split into `uintX`\\n    /// values where X is configurable by `operand_`. Each 1 increment in the\\n    /// operand size config doubles the number of items in the implied arrays.\\n    /// For example, size 0 is 1 `uint256` value, size 1 is\\n    /// `2x `uint128` values, size 2 is 4x `uint64` values and so on.\\n    ///\\n    /// The implied arrays are zipped and then copied into `arguments` and\\n    /// mapped over with a source from `sources`. Each iteration of the mapping\\n    /// copies values into `arguments` from index `0` but there is no attempt\\n    /// to zero out any values that may already be in the `arguments` array.\\n    /// It is the callers responsibility to ensure that the `arguments` array\\n    /// is correctly sized and populated for the mapped source.\\n    ///\\n    /// The `operand_` for the zipmap opcode is split into 3 components:\\n    /// - 3 low bits: The index of the source to use from `sources`.\\n    /// - 2 middle bits: The size of the loop, where 0 is 1 iteration\\n    /// - 3 high bits: The number of vals to be zipped from the stack where 0\\n    ///   is 1 value to be zipped.\\n    ///\\n    /// This is a separate function to avoid blowing solidity compile stack.\\n    /// In the future it may be moved inline to `eval` for gas efficiency.\\n    ///\\n    /// See https://en.wikipedia.org/wiki/Zipping_(computer_science)\\n    /// See https://en.wikipedia.org/wiki/Map_(higher-order_function)\\n    /// @param context_ Domain specific context the wrapping contract can\\n    /// provide to passthrough back to its own opcodes.\\n    /// @param state_ The execution state of the VM.\\n    /// @param operand_ The operand_ associated with this dispatch to zipmap.\\n    function zipmap(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            uint256 sourceIndex_;\\n            uint256 stepSize_;\\n            uint256 offset_;\\n            uint256 valLength_;\\n            // assembly here to shave some gas.\\n            assembly {\\n                // rightmost 3 bits are the index of the source to use from\\n                // sources in `state_`.\\n                sourceIndex_ := and(operand_, 0x07)\\n                // bits 4 and 5 indicate size of the loop. Each 1 increment of\\n                // the size halves the bits of the arguments to the zipmap.\\n                // e.g. 256 `stepSize_` would copy all 256 bits of the uint256\\n                // into args for the inner `eval`. A loop size of `1` would\\n                // shift `stepSize_` by 1 (halving it) and meaning the uint256\\n                // is `eval` as 2x 128 bit values (runs twice). A loop size of\\n                // `2` would run 4 times as 64 bit values, and so on.\\n                //\\n                // Slither false positive here for the shift of constant `256`.\\n                // slither-disable-next-line incorrect-shift\\n                stepSize_ := shr(and(shr(3, operand_), 0x03), 256)\\n                // `offset_` is used by the actual bit shifting operations and\\n                // is precalculated here to save some gas as this is a hot\\n                // performance path.\\n                offset_ := sub(256, stepSize_)\\n                // bits 5+ determine the number of vals to be zipped. At least\\n                // one value must be provided so a `valLength_` of `0` is one\\n                // value to loop over.\\n                valLength_ := add(shr(5, operand_), 1)\\n            }\\n            state_.stackIndex -= valLength_;\\n\\n            uint256[] memory baseVals_ = new uint256[](valLength_);\\n            for (uint256 a_ = 0; a_ < valLength_; a_++) {\\n                baseVals_[a_] = state_.stack[state_.stackIndex + a_];\\n            }\\n\\n            for (uint256 step_ = 0; step_ < 256; step_ += stepSize_) {\\n                for (uint256 a_ = 0; a_ < valLength_; a_++) {\\n                    state_.arguments[a_] =\\n                        (baseVals_[a_] << (offset_ - step_)) >>\\n                        offset_;\\n                }\\n                eval(context_, state_, sourceIndex_);\\n            }\\n        }\\n    }\\n\\n    /// Evaluates a rain script.\\n    /// The main workhorse of the rain VM, `eval` runs any core opcodes and\\n    /// dispatches anything it is unaware of to the implementing contract.\\n    /// For a script to be useful the implementing contract must override\\n    /// `applyOp` and dispatch non-core opcodes to domain specific logic. This\\n    /// could be mathematical operations for a calculator, tier reports for\\n    /// a membership combinator, entitlements for a minting curve, etc.\\n    ///\\n    /// Everything required to coordinate the execution of a rain script to\\n    /// completion is contained in the `State`. The context and source index\\n    /// are provided so the caller can provide additional data and kickoff the\\n    /// opcode dispatch from the correct source in `sources`.\\n    function eval(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 sourceIndex_\\n    ) internal view {\\n        // State needs to start with the stack index at a valid position which\\n        // may not be the case in general.\\n        require(state_.stackIndex <= state_.stack.length, \\\"STACK_OVERFLOW\\\");\\n\\n        // Everything in eval can be checked statically, there are no dynamic\\n        // runtime values read from the stack that can cause out of bounds\\n        // behaviour. E.g. sourceIndex in zipmap and size of a skip are both\\n        // taken from the operand in the source, not the stack. A program that\\n        // operates out of bounds SHOULD be flagged by static code analysis and\\n        // avoided by end-users.\\n        unchecked {\\n            uint256 i_ = 0;\\n            uint256 opcode_;\\n            uint256 operand_;\\n            uint256 len_;\\n            uint256 sourceLocation_;\\n            uint256 constantsLocation_;\\n            uint256 argumentsLocation_;\\n            uint256 stackLocation_;\\n            assembly {\\n                stackLocation_ := mload(add(state_, 0x20))\\n                sourceLocation_ := mload(\\n                    add(\\n                        mload(add(state_, 0x40)),\\n                        add(0x20, mul(sourceIndex_, 0x20))\\n                    )\\n                )\\n                constantsLocation_ := mload(add(state_, 0x60))\\n                argumentsLocation_ := mload(add(state_, 0x80))\\n                len_ := mload(sourceLocation_)\\n            }\\n\\n            // Loop until complete.\\n            while (i_ < len_) {\\n                assembly {\\n                    i_ := add(i_, 2)\\n                    let op_ := mload(add(sourceLocation_, i_))\\n                    opcode_ := byte(30, op_)\\n                    operand_ := byte(31, op_)\\n                }\\n                if (opcode_ < RAIN_VM_OPS_LENGTH) {\\n                    if (opcode_ == OP_VAL) {\\n                        assembly {\\n                            let location_ := argumentsLocation_\\n                            if iszero(and(operand_, 0x80)) {\\n                                location_ := constantsLocation_\\n                            }\\n\\n                            let valIndex_ := and(operand_, 0x7F)\\n                            // Attempted to read beyond constants/arguments.\\n                            if iszero(lt(valIndex_, mload(location_))) {\\n                                revert(0, 0)\\n                            }\\n\\n                            let stackIndex_ := mload(state_)\\n                            // Copy value to stack.\\n                            mstore(\\n                                add(\\n                                    stackLocation_,\\n                                    add(0x20, mul(stackIndex_, 0x20))\\n                                ),\\n                                mload(\\n                                    add(\\n                                        location_,\\n                                        add(0x20, mul(valIndex_, 0x20))\\n                                    )\\n                                )\\n                            )\\n                            mstore(state_, add(stackIndex_, 1))\\n                        }\\n                    } else if (opcode_ == OP_DUP) {\\n                        assembly {\\n                            let stackIndex_ := mload(state_)\\n                            // DUPing data past the values on the stack.\\n                            if iszero(lt(operand_, stackIndex_)) {\\n                                revert(0, 0)\\n                            }\\n                            mstore(\\n                                add(\\n                                    stackLocation_,\\n                                    add(0x20, mul(stackIndex_, 0x20))\\n                                ),\\n                                mload(\\n                                    add(\\n                                        stackLocation_,\\n                                        add(0x20, mul(operand_, 0x20))\\n                                    )\\n                                )\\n                            )\\n                            mstore(state_, add(stackIndex_, 1))\\n                        }\\n                    } else if (opcode_ == OP_ZIPMAP) {\\n                        zipmap(context_, state_, operand_);\\n                    } else if (opcode_ == OP_DEBUG) {\\n                        console.logBytes(abi.encode(state_));\\n                    } else {\\n                        // SKIP was deprecated and is now removed. This is due\\n                        // to skip making it impossible to statically analyse\\n                        // a script to calculate a valid stack length ahead of\\n                        // time.\\n                        require(opcode_ != OP_SKIP, \\\"SKIP_REMOVED\\\");\\n                    }\\n                } else {\\n                    applyOp(context_, state_, opcode_, operand_);\\n                }\\n                // The stack index may be the same as the length as this means\\n                // the stack is full. But we cannot write past the end of the\\n                // stack. This also catches a stack index that underflows due\\n                // to unchecked or assembly math. This check MAY be redundant\\n                // with standard OOB checks on the stack array due to indexing\\n                // into it, but is a required guard in the case of VM assembly.\\n                // Future versions of the VM will precalculate all stack\\n                // movements at deploy time rather than runtime as this kind of\\n                // accounting adds nontrivial gas across longer scripts that\\n                // include many opcodes.\\n                // Note: This check would NOT be safe in the case that some\\n                // opcode used assembly in a way that can underflow the stack\\n                // as this would allow a malicious rain script to write to the\\n                // stack length and/or the stack index.\\n                require(\\n                    state_.stackIndex <= state_.stack.length,\\n                    \\\"STACK_OVERFLOW\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /// Every contract that implements `RainVM` should override `applyOp` so\\n    /// that useful opcodes are available to script writers.\\n    /// For an example of a simple and efficient `applyOp` implementation that\\n    /// dispatches over several opcode packs see `CalculatorTest.sol`.\\n    /// Implementing contracts are encouraged to handle the dispatch with\\n    /// unchecked math as the dispatch is a critical performance path and\\n    /// default solidity checked math can significantly increase gas cost for\\n    /// each opcode dispatched. Consider that a single zipmap could loop over\\n    /// dozens of opcode dispatches internally.\\n    /// Stack is modified by reference NOT returned.\\n    /// @param context_ Bytes that the implementing contract can passthrough\\n    /// to be ready internally by its own opcodes. RainVM ignores the context.\\n    /// @param state_ The RainVM state that tracks the execution progress.\\n    /// @param opcode_ The current opcode to dispatch.\\n    /// @param operand_ Additional information to inform the opcode dispatch.\\n    function applyOp(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view virtual {} //solhint-disable-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0xa89ed8b28be8125868d40990388613b99f89a4f00f4e1be00c70b0aca7bc02d8\",\"license\":\"CAL\"},\"contracts/vm/libraries/VMState.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../RainVM.sol\\\";\\nimport \\\"../../sstore2/SSTORE2.sol\\\";\\n\\n/// Config required to build a new `State`.\\n/// @param sources Sources verbatim.\\n/// @param constants Constants verbatim.\\n/// @param stackLength Sets the length of the uint256[] of the stack.\\n/// @param argumentsLength Sets the length of the uint256[] of the arguments.\\nstruct StateConfig {\\n    bytes[] sources;\\n    uint256[] constants;\\n    uint256 stackLength;\\n    uint256 argumentsLength;\\n}\\n\\n/// @title StateSnapshot\\n/// @notice Deploys everything required to build a fresh `State` for rainVM\\n/// execution as an evm contract onchain. Uses SSTORE2 to abi encode rain\\n/// script into evm bytecode, then stores an immutable pointer to the resulting\\n/// contract. Allows arbitrary length rain script source, constants and stack.\\n/// Gas scales for reads much better for longer data than attempting to put\\n/// all the source into storage.\\n/// See https://github.com/0xsequence/sstore2\\ncontract VMState {\\n    /// A new shapshot has been deployed onchain.\\n    /// @param sender `msg.sender` of the deployer.\\n    /// @param pointer Pointer to the onchain snapshot contract.\\n    /// @param state `State` of the snapshot that was deployed.\\n    event Snapshot(address sender, address pointer, State state);\\n\\n    /// Builds a new `State` from `StateConfig`.\\n    /// Empty stack and arguments with stack index 0.\\n    /// @param config_ State config to build the new `State`.\\n    function _newState(StateConfig memory config_)\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        require(config_.sources.length > 0, \\\"0_SOURCES\\\");\\n        return\\n            State(\\n                0,\\n                new uint256[](config_.stackLength),\\n                config_.sources,\\n                config_.constants,\\n                new uint256[](config_.argumentsLength)\\n            );\\n    }\\n\\n    /// Snapshot a RainVM state as an immutable onchain contract.\\n    /// Usually `State` will be new as per `newState` but can be a snapshot of\\n    /// an \\\"in flight\\\" execution state also.\\n    /// @param state_ The state to snapshot.\\n    function _snapshot(State memory state_) internal returns (address) {\\n        address pointer_ = SSTORE2.write(abi.encode(state_));\\n        emit Snapshot(msg.sender, pointer_, state_);\\n        return pointer_;\\n    }\\n\\n    /// Builds a fresh state for rainVM execution from all construction data.\\n    /// This can be passed directly to `eval` for a `RainVM` contract.\\n    /// @param pointer_ The pointer (address) of the snapshot to restore.\\n    function _restore(address pointer_) internal view returns (State memory) {\\n        return abi.decode(SSTORE2.read(pointer_), (State));\\n    }\\n}\\n\",\"keccak256\":\"0x1540767aef3d09c8806fda50ccc7b596eba9a0b5b5bbe4f00f7b2bf84ecb9b8c\",\"license\":\"CAL\"},\"contracts/vm/ops/AllStandardOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State, RainVM, RAIN_VM_OPS_LENGTH} from \\\"../RainVM.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {EVMConstantOps, EVM_CONSTANT_OPS_LENGTH} from \\\"./evm/EVMConstantOps.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {FixedPointMathOps, FIXED_POINT_MATH_OPS_LENGTH} from \\\"./math/FixedPointMathOps.sol\\\";\\nimport {IERC20Ops, IERC20_OPS_LENGTH} from \\\"./token/IERC20Ops.sol\\\";\\nimport {IERC721Ops, IERC721_OPS_LENGTH} from \\\"./token/IERC721Ops.sol\\\";\\nimport {IERC1155Ops, IERC1155_OPS_LENGTH} from \\\"./token/IERC1155Ops.sol\\\";\\nimport {LogicOps, LOGIC_OPS_LENGTH} from \\\"./math/LogicOps.sol\\\";\\nimport {MathOps, MATH_OPS_LENGTH} from \\\"./math/MathOps.sol\\\";\\nimport {TierOps, TIER_OPS_LENGTH} from \\\"./tier/TierOps.sol\\\";\\n\\nuint256 constant ALL_STANDARD_OPS_START = RAIN_VM_OPS_LENGTH;\\nuint256 constant FIXED_POINT_MATH_OPS_START = EVM_CONSTANT_OPS_LENGTH;\\nuint256 constant MATH_OPS_START = FIXED_POINT_MATH_OPS_START +\\n    FIXED_POINT_MATH_OPS_LENGTH;\\nuint256 constant LOGIC_OPS_START = MATH_OPS_START + MATH_OPS_LENGTH;\\nuint256 constant TIER_OPS_START = LOGIC_OPS_START + LOGIC_OPS_LENGTH;\\nuint256 constant IERC20_OPS_START = TIER_OPS_START + TIER_OPS_LENGTH;\\nuint256 constant IERC721_OPS_START = IERC20_OPS_START + IERC20_OPS_LENGTH;\\nuint256 constant IERC1155_OPS_START = IERC721_OPS_START + IERC721_OPS_LENGTH;\\nuint256 constant ALL_STANDARD_OPS_LENGTH = IERC1155_OPS_START +\\n    IERC1155_OPS_LENGTH;\\n\\n/// @title AllStandardOps\\n/// @notice RainVM opcode pack to expose all other packs.\\nlibrary AllStandardOps {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            if (opcode_ < FIXED_POINT_MATH_OPS_START) {\\n                EVMConstantOps.applyOp(state_, opcode_, operand_);\\n            } else if (opcode_ < TIER_OPS_START) {\\n                if (opcode_ < MATH_OPS_START) {\\n                    FixedPointMathOps.applyOp(\\n                        state_,\\n                        opcode_ - FIXED_POINT_MATH_OPS_START,\\n                        operand_\\n                    );\\n                } else if (opcode_ < LOGIC_OPS_START) {\\n                    MathOps.applyOp(state_, opcode_ - MATH_OPS_START, operand_);\\n                } else {\\n                    LogicOps.applyOp(\\n                        state_,\\n                        opcode_ - LOGIC_OPS_START,\\n                        operand_\\n                    );\\n                }\\n            } else if (opcode_ < IERC20_OPS_START) {\\n                TierOps.applyOp(state_, opcode_ - TIER_OPS_START, operand_);\\n            } else {\\n                if (opcode_ < IERC721_OPS_START) {\\n                    IERC20Ops.applyOp(\\n                        state_,\\n                        opcode_ - IERC20_OPS_START,\\n                        operand_\\n                    );\\n                } else if (opcode_ < IERC1155_OPS_START) {\\n                    IERC721Ops.applyOp(\\n                        state_,\\n                        opcode_ - IERC721_OPS_START,\\n                        operand_\\n                    );\\n                } else {\\n                    IERC1155Ops.applyOp(\\n                        state_,\\n                        opcode_ - IERC1155_OPS_START,\\n                        operand_\\n                    );\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4893d114d3e41273ae705428529c209dc72e9ff2790bfc1f4843155111affb0\",\"license\":\"CAL\"},\"contracts/vm/ops/evm/EVMConstantOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\n\\n/// @dev Opcode for the block number.\\nuint256 constant OPCODE_BLOCK_NUMBER = 0;\\n/// @dev Opcode for the block timestamp.\\nuint256 constant OPCODE_BLOCK_TIMESTAMP = 1;\\n/// @dev Opcode for the `msg.sender`.\\nuint256 constant OPCODE_SENDER = 2;\\n/// @dev Opcode for `this` address of the current contract.\\nuint256 constant OPCODE_THIS_ADDRESS = 3;\\n/// @dev Number of provided opcodes for `BlockOps`.\\nuint256 constant EVM_CONSTANT_OPS_LENGTH = 4;\\n\\n/// @title EVMConstantOps\\n/// @notice RainVM opcode pack to access constants from the EVM environment.\\nlibrary EVMConstantOps {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < EVM_CONSTANT_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n            // Stack the current `block.number`.\\n            if (opcode_ == OPCODE_BLOCK_NUMBER) {\\n                state_.stack[state_.stackIndex] = block.number;\\n            }\\n            // Stack the current `block.timestamp`.\\n            else if (opcode_ == OPCODE_BLOCK_TIMESTAMP) {\\n                // solhint-disable-next-line not-rely-on-time\\n                state_.stack[state_.stackIndex] = block.timestamp;\\n            } else if (opcode_ == OPCODE_SENDER) {\\n                // Stack the `msg.sender`.\\n                state_.stack[state_.stackIndex] = uint256(uint160(msg.sender));\\n            } else {\\n                state_.stack[state_.stackIndex] = uint256(\\n                    uint160(address(this))\\n                );\\n            }\\n            state_.stackIndex++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7d9c8fc47e7dc10839cc8c3f88b1d6442c0115a4f7cdce4103cfadcd09f2d00\",\"license\":\"CAL\"},\"contracts/vm/ops/math/FixedPointMathOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\nimport \\\"../../../math/FixedPointMath.sol\\\";\\n\\n/// @dev Opcode for multiplication.\\nuint256 constant OPCODE_SCALE18_MUL = 0;\\n/// @dev Opcode for division.\\nuint256 constant OPCODE_SCALE18_DIV = 1;\\n/// @dev Opcode to rescale some fixed point number to 18 OOMs in situ.\\nuint256 constant OPCODE_SCALE18 = 2;\\n/// @dev Opcode to rescale an 18 OOMs fixed point number to scale N.\\nuint256 constant OPCODE_SCALEN = 3;\\n/// @dev Opcode to rescale an arbitrary fixed point number by some OOMs.\\nuint256 constant OPCODE_SCALE_BY = 4;\\n/// @dev Opcode for stacking the definition of one.\\nuint256 constant OPCODE_ONE = 5;\\n/// @dev Opcode for stacking number of fixed point decimals used.\\nuint256 constant OPCODE_DECIMALS = 6;\\n/// @dev Number of provided opcodes for `FixedPointMathOps`.\\nuint256 constant FIXED_POINT_MATH_OPS_LENGTH = 7;\\n\\n/// @title FixedPointMathOps\\n/// @notice RainVM opcode pack to perform basic checked math operations.\\n/// Underflow and overflow will error as per default solidity behaviour.\\nlibrary FixedPointMathOps {\\n    using FixedPointMath for uint256;\\n\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal pure {\\n        unchecked {\\n            require(opcode_ < FIXED_POINT_MATH_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n\\n            if (opcode_ < OPCODE_SCALE18) {\\n                uint256 baseIndex_ = state_.stackIndex - 2;\\n                if (opcode_ == OPCODE_SCALE18_MUL) {\\n                    state_.stack[baseIndex_] =\\n                        state_.stack[baseIndex_].scale18(operand_) *\\n                        state_.stack[baseIndex_ + 1];\\n                } else if (opcode_ == OPCODE_SCALE18_DIV) {\\n                    state_.stack[baseIndex_] =\\n                        state_.stack[baseIndex_].scale18(operand_) /\\n                        state_.stack[baseIndex_ + 1];\\n                }\\n                state_.stackIndex--;\\n            } else if (opcode_ < OPCODE_ONE) {\\n                uint256 baseIndex_ = state_.stackIndex - 1;\\n                if (opcode_ == OPCODE_SCALE18) {\\n                    state_.stack[baseIndex_] = state_.stack[baseIndex_].scale18(\\n                        operand_\\n                    );\\n                } else if (opcode_ == OPCODE_SCALEN) {\\n                    state_.stack[baseIndex_] = state_.stack[baseIndex_].scaleN(\\n                        operand_\\n                    );\\n                } else if (opcode_ == OPCODE_SCALE_BY) {\\n                    state_.stack[baseIndex_] = state_.stack[baseIndex_].scaleBy(\\n                        int8(uint8(operand_))\\n                    );\\n                }\\n            } else {\\n                if (opcode_ == OPCODE_ONE) {\\n                    state_.stack[state_.stackIndex] = FP_ONE;\\n                    state_.stackIndex++;\\n                } else if (opcode_ == OPCODE_DECIMALS) {\\n                    state_.stack[state_.stackIndex] = FP_DECIMALS;\\n                    state_.stackIndex++;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xee40001a9c12bf4c78da5b8b555edb14ebb5c578386049e156b6e94f6cde4e01\",\"license\":\"CAL\"},\"contracts/vm/ops/math/LogicOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\n\\n/// @dev Number of provided opcodes for `LogicOps`.\\n/// The opcodes are NOT listed on the library as they are all internal to\\n/// the assembly and yul doesn't seem to support using solidity constants\\n/// as switch case values.\\nuint256 constant LOGIC_OPS_LENGTH = 7;\\n\\n/// @title LogicOps\\n/// @notice RainVM opcode pack to perform some basic logic operations.\\nlibrary LogicOps {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal pure {\\n        require(opcode_ < LOGIC_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n        assembly {\\n            let stackIndex_ := mload(state_)\\n            // This is the start of the stack, adjusted for the leading length\\n            // 32 bytes.\\n            // i.e. reading from stackLocation_ gives the first value of the\\n            // stack and NOT its length.\\n            let stackTopLocation_ := add(\\n                // pointer to the stack.\\n                mload(add(state_, 0x20)),\\n                add(\\n                    // length of the stack\\n                    0x20,\\n                    // index of the stack\\n                    mul(stackIndex_, 0x20)\\n                )\\n            )\\n\\n            switch opcode_\\n            // ISZERO\\n            case 0 {\\n                // The stackIndex_ doesn't change for iszero as there is\\n                // one input and output. ISZERO reads one value so the stack\\n                // index needs to be nonzero.\\n                if iszero(stackIndex_) {\\n                    revert(0, 0)\\n                }\\n                let location_ := sub(stackTopLocation_, 0x20)\\n                mstore(location_, iszero(mload(location_)))\\n            }\\n            // EAGER_IF\\n            // Eager because BOTH x_ and y_ must be eagerly evaluated\\n            // before EAGER_IF will select one of them. If both x_ and y_\\n            // are cheap (e.g. constant values) then this may also be the\\n            // simplest and cheapest way to select one of them.\\n            case 1 {\\n                // EAGER_IF reads 3 values.\\n                if lt(stackIndex_, 3) {\\n                    revert(0, 0)\\n                }\\n                // decrease stack index by 2 (3 inputs, 1 output)\\n                mstore(state_, sub(stackIndex_, 2))\\n                let location_ := sub(stackTopLocation_, 0x60)\\n                switch mload(location_)\\n                // false => use second value\\n                case 0 {\\n                    mstore(location_, mload(add(location_, 0x40)))\\n                }\\n                // true => use first value\\n                default {\\n                    mstore(location_, mload(add(location_, 0x20)))\\n                }\\n            }\\n            // EQUAL_TO\\n            case 2 {\\n                // EQUAL_TO reads 2 values.\\n                if lt(stackIndex_, 2) {\\n                    revert(0, 0)\\n                }\\n                // decrease stack index by 1 (2 inputs, 1 output)\\n                mstore(state_, sub(stackIndex_, 1))\\n                let location_ := sub(stackTopLocation_, 0x40)\\n                mstore(\\n                    location_,\\n                    eq(mload(location_), mload(add(location_, 0x20)))\\n                )\\n            }\\n            // LESS_THAN\\n            case 3 {\\n                // LESS_THAN reads 2 values.\\n                if lt(stackIndex_, 2) {\\n                    revert(0, 0)\\n                }\\n                // decrease stack index by 1 (2 inputs, 1 output)\\n                mstore(state_, sub(stackIndex_, 1))\\n                let location_ := sub(stackTopLocation_, 0x40)\\n                mstore(\\n                    location_,\\n                    lt(mload(location_), mload(add(location_, 0x20)))\\n                )\\n            }\\n            // GREATER_THAN\\n            case 4 {\\n                // GREATER_THAN reads 2 values.\\n                if lt(stackIndex_, 2) {\\n                    revert(0, 0)\\n                }\\n                // decrease stack index by 1 (2 inputs, 1 output)\\n                mstore(state_, sub(stackIndex_, 1))\\n                let location_ := sub(stackTopLocation_, 0x40)\\n                mstore(\\n                    location_,\\n                    gt(mload(location_), mload(add(location_, 0x20)))\\n                )\\n            }\\n            // EVERY\\n            // EVERY is either the first item if every item is nonzero, else 0.\\n            // operand_ is the length of items to check.\\n            // EVERY of length `0` is a noop.\\n            case 5 {\\n                // EVERY reads operand_ values.\\n                if lt(stackIndex_, operand_) {\\n                    revert(0, 0)\\n                }\\n                if iszero(iszero(operand_)) {\\n                    // decrease stack index by 1 less than operand_\\n                    mstore(state_, sub(stackIndex_, sub(operand_, 1)))\\n                    let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n                    for {\\n                        let cursor_ := location_\\n                    } lt(cursor_, stackTopLocation_) {\\n                        cursor_ := add(cursor_, 0x20)\\n                    } {\\n                        // If anything is zero then EVERY is a failed check.\\n                        if iszero(mload(cursor_)) {\\n                            mstore(location_, 0)\\n                            break\\n                        }\\n                    }\\n                }\\n            }\\n            // ANY\\n            // ANY is the first nonzero item, else 0.\\n            // operand_ id the length of items to check.\\n            // ANY of length `0` is a noop.\\n            case 6 {\\n                // ANY reads operand_ values.\\n                if lt(stackIndex_, operand_) {\\n                    revert(0, 0)\\n                }\\n                if iszero(iszero(operand_)) {\\n                    // decrease stack index by 1 less than the operand_\\n                    mstore(state_, sub(stackIndex_, sub(operand_, 1)))\\n                    let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n                    for {\\n                        let cursor_ := location_\\n                    } lt(cursor_, stackTopLocation_) {\\n                        cursor_ := add(cursor_, 0x20)\\n                    } {\\n                        // If anything is NOT zero then ANY is a successful\\n                        // check and can short-circuit.\\n                        let item_ := mload(cursor_)\\n                        if iszero(iszero(item_)) {\\n                            // Write the usable value to the top of the stack.\\n                            mstore(location_, item_)\\n                            break\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf4c3187c76e8e7e98c02452933000177894dd3285508894fc131de85c80aa9ae\",\"license\":\"CAL\"},\"contracts/vm/ops/math/MathOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\nimport \\\"../../../math/SaturatingMath.sol\\\";\\n\\n/// @dev Opcode for addition.\\nuint256 constant OPCODE_ADD = 0;\\n/// @dev Opcode for saturating addition.\\nuint256 constant OPCODE_SATURATING_ADD = 1;\\n/// @dev Opcode for subtraction.\\nuint256 constant OPCODE_SUB = 2;\\n/// @dev Opcode for saturating subtraction.\\nuint256 constant OPCODE_SATURATING_SUB = 3;\\n/// @dev Opcode for multiplication.\\nuint256 constant OPCODE_MUL = 4;\\n/// @dev Opcode for saturating multiplication.\\nuint256 constant OPCODE_SATURATING_MUL = 5;\\n/// @dev Opcode for division.\\nuint256 constant OPCODE_DIV = 6;\\n/// @dev Opcode for modulo.\\nuint256 constant OPCODE_MOD = 7;\\n/// @dev Opcode for exponentiation.\\nuint256 constant OPCODE_EXP = 8;\\n/// @dev Opcode for minimum.\\nuint256 constant OPCODE_MIN = 9;\\n/// @dev Opcode for maximum.\\nuint256 constant OPCODE_MAX = 10;\\n/// @dev Number of provided opcodes for `MathOps`.\\nuint256 constant MATH_OPS_LENGTH = 11;\\n\\n/// @title MathOps\\n/// @notice RainVM opcode pack to perform basic checked math operations.\\n/// Underflow and overflow will error as per default solidity behaviour.\\n/// SaturatingMath opcodes are provided as \\\"core\\\" math because the VM has no\\n/// ability to lazily execute code, which means that overflows cannot be\\n/// guarded with conditional logic. Saturation is a quick and dirty solution to\\n/// overflow that is valid in many situations.\\nlibrary MathOps {\\n    using SaturatingMath for uint256;\\n\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal pure {\\n        require(opcode_ < MATH_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n        uint256 baseIndex_;\\n        uint256 top_;\\n        unchecked {\\n            baseIndex_ = state_.stackIndex - operand_;\\n            top_ = state_.stackIndex - 1;\\n        }\\n        uint256 cursor_ = baseIndex_;\\n        uint256 accumulator_ = state_.stack[cursor_];\\n\\n        // Addition.\\n        if (opcode_ == OPCODE_ADD) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ += state_.stack[cursor_];\\n            }\\n        }\\n        // Saturating addition.\\n        else if (opcode_ == OPCODE_SATURATING_ADD) {\\n            unchecked {\\n                while (cursor_ < top_ && accumulator_ < type(uint256).max) {\\n                    cursor_++;\\n                    accumulator_ = accumulator_.saturatingAdd(\\n                        state_.stack[cursor_]\\n                    );\\n                }\\n            }\\n        }\\n        // Subtraction.\\n        else if (opcode_ == OPCODE_SUB) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ -= state_.stack[cursor_];\\n            }\\n        }\\n        // Saturating subtraction.\\n        else if (opcode_ == OPCODE_SATURATING_SUB) {\\n            unchecked {\\n                while (cursor_ < top_ && 0 < accumulator_) {\\n                    cursor_++;\\n                    accumulator_ = accumulator_.saturatingSub(\\n                        state_.stack[cursor_]\\n                    );\\n                }\\n            }\\n        }\\n        // Multiplication.\\n        // Slither false positive here complaining about dividing before\\n        // multiplying but both are mututally exclusive according to `opcode_`.\\n        else if (opcode_ == OPCODE_MUL) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ *= state_.stack[cursor_];\\n            }\\n        }\\n        // Saturating multiplication.\\n        else if (opcode_ == OPCODE_SATURATING_MUL) {\\n            unchecked {\\n                while (cursor_ < top_ && accumulator_ < type(uint256).max) {\\n                    cursor_++;\\n                    accumulator_ = accumulator_.saturatingMul(\\n                        state_.stack[cursor_]\\n                    );\\n                }\\n            }\\n        }\\n        // Division.\\n        else if (opcode_ == OPCODE_DIV) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ /= state_.stack[cursor_];\\n            }\\n        }\\n        // Modulo.\\n        else if (opcode_ == OPCODE_MOD) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ %= state_.stack[cursor_];\\n            }\\n        }\\n        // Exponentiation.\\n        else if (opcode_ == OPCODE_EXP) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ = accumulator_**state_.stack[cursor_];\\n            }\\n        }\\n        // Minimum.\\n        else if (opcode_ == OPCODE_MIN) {\\n            uint256 item_;\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                item_ = state_.stack[cursor_];\\n                if (item_ < accumulator_) {\\n                    accumulator_ = item_;\\n                }\\n            }\\n        }\\n        // Maximum.\\n        else if (opcode_ == OPCODE_MAX) {\\n            uint256 item_;\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                item_ = state_.stack[cursor_];\\n                if (item_ > accumulator_) {\\n                    accumulator_ = item_;\\n                }\\n            }\\n        }\\n\\n        unchecked {\\n            state_.stack[baseIndex_] = accumulator_;\\n            state_.stackIndex = baseIndex_ + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fad86e0435b18cc5b8986702571779ff1ba54c0fa7fc947e91272dec595eeb8\",\"license\":\"CAL\"},\"contracts/vm/ops/tier/TierOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\nimport \\\"../../../tier/libraries/TierReport.sol\\\";\\nimport \\\"../../../tier/libraries/TierwiseCombine.sol\\\";\\n\\n/// @dev Opcode to call `report` on an `ITier` contract.\\nuint256 constant OPCODE_REPORT = 0;\\n/// @dev Opcode to stack a report that has never been held for all tiers.\\nuint256 constant OPCODE_NEVER = 1;\\n/// @dev Opcode to stack a report that has always been held for all tiers.\\nuint256 constant OPCODE_ALWAYS = 2;\\n/// @dev Opcode to calculate the tierwise diff of two reports.\\nuint256 constant OPCODE_SATURATING_DIFF = 3;\\n/// @dev Opcode to update the blocks over a range of tiers for a report.\\nuint256 constant OPCODE_UPDATE_BLOCKS_FOR_TIER_RANGE = 4;\\n/// @dev Opcode to tierwise select the best block lte a reference block.\\nuint256 constant OPCODE_SELECT_LTE = 5;\\n/// @dev Number of provided opcodes for `TierOps`.\\nuint256 constant TIER_OPS_LENGTH = 6;\\n\\n/// @title TierOps\\n/// @notice RainVM opcode pack to operate on tier reports.\\n/// The opcodes all map to functions from `ITier` and associated libraries such\\n/// as `TierConstants`, `TierwiseCombine`, and `TierReport`. For each, the\\n/// order of consumed values on the stack corresponds to the order of arguments\\n/// to interface/library functions.\\nlibrary TierOps {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < TIER_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n            uint256 baseIndex_;\\n            // Stack the report returned by an `ITier` contract.\\n            // Top two stack vals are used as `ITier` contract and address\\n            // to check the report for.\\n            if (opcode_ == OPCODE_REPORT) {\\n                state_.stackIndex -= 1;\\n                baseIndex_ = state_.stackIndex - 1;\\n                state_.stack[baseIndex_] = ITier(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).report(address(uint160(state_.stack[baseIndex_ + 1])));\\n            }\\n            // Stack a report that has never been held at any tier.\\n            else if (opcode_ == OPCODE_NEVER) {\\n                state_.stack[state_.stackIndex] = TierConstants.NEVER_REPORT;\\n                state_.stackIndex++;\\n            }\\n            // Stack a report that has always been held at every tier.\\n            else if (opcode_ == OPCODE_ALWAYS) {\\n                state_.stack[state_.stackIndex] = TierConstants.ALWAYS;\\n                state_.stackIndex++;\\n            }\\n            // Stack the tierwise saturating subtraction of two reports.\\n            // If the older report is newer than newer report the result will\\n            // be `0`, else a tierwise diff in blocks will be obtained.\\n            // The older and newer report are taken from the stack.\\n            else if (opcode_ == OPCODE_SATURATING_DIFF) {\\n                state_.stackIndex -= 2;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 newerReport_ = state_.stack[baseIndex_];\\n                uint256 olderReport_ = state_.stack[baseIndex_ + 1];\\n                state_.stack[baseIndex_] = TierwiseCombine.saturatingSub(\\n                    newerReport_,\\n                    olderReport_\\n                );\\n                state_.stackIndex++;\\n            }\\n            // Stacks a report with updated blocks over tier range.\\n            // The start and end tier are taken from the low and high bits of\\n            // the `operand_` respectively.\\n            // The report to update and block number to update to are both\\n            // taken from the stack.\\n            else if (opcode_ == OPCODE_UPDATE_BLOCKS_FOR_TIER_RANGE) {\\n                uint256 startTier_ = operand_ & 0x0f; // & 00001111\\n                uint256 endTier_ = (operand_ >> 4) & 0x0f; // & 00001111\\n                state_.stackIndex -= 2;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 report_ = state_.stack[baseIndex_];\\n                uint256 blockNumber_ = state_.stack[baseIndex_ + 1];\\n                state_.stack[baseIndex_] = TierReport.updateBlocksForTierRange(\\n                    report_,\\n                    startTier_,\\n                    endTier_,\\n                    blockNumber_\\n                );\\n                state_.stackIndex++;\\n            }\\n            // Stacks the result of a `selectLte` combinator.\\n            // All `selectLte` share the same stack and argument handling.\\n            // Takes the `logic_` and `mode_` from the `operand_` high bits.\\n            // `logic_` is the highest bit.\\n            // `mode_` is the 2 highest bits after `logic_`.\\n            // The other bits specify how many values to take from the stack\\n            // as reports to compare against each other and the block number.\\n            else if (opcode_ == OPCODE_SELECT_LTE) {\\n                uint256 logic_ = operand_ >> 7;\\n                uint256 mode_ = (operand_ >> 5) & 0x3; // & 00000011\\n                uint256 reportsLength_ = operand_ & 0x1F; // & 00011111\\n\\n                // Need one more than reports length to include block number.\\n                state_.stackIndex -= reportsLength_ + 1;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 cursor_ = baseIndex_;\\n\\n                uint256[] memory reports_ = new uint256[](reportsLength_);\\n                for (uint256 a_ = 0; a_ < reportsLength_; a_++) {\\n                    reports_[a_] = state_.stack[cursor_];\\n                    cursor_++;\\n                }\\n                uint256 blockNumber_ = state_.stack[cursor_];\\n\\n                state_.stack[baseIndex_] = TierwiseCombine.selectLte(\\n                    reports_,\\n                    blockNumber_,\\n                    logic_,\\n                    mode_\\n                );\\n                state_.stackIndex++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb48a76a41c3cd04c041402e55d9e67e1fa3bc9bff7e64ed79df9bfcc9bb6279\",\"license\":\"CAL\"},\"contracts/vm/ops/token/IERC1155Ops.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/// @dev Opcode for `IERC1155` `balanceOf`.\\nuint256 constant OPCODE_BALANCE_OF = 0;\\n/// @dev Opcode for `IERC1155` `balanceOfBatch`.\\nuint256 constant OPCODE_BALANCE_OF_BATCH = 1;\\n/// @dev Number of provided opcodes for `IERC1155Ops`.\\nuint256 constant IERC1155_OPS_LENGTH = 2;\\n\\n/// @title IERC1155Ops\\n/// @notice RainVM opcode pack to read the IERC1155 interface.\\nlibrary IERC1155Ops {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < IERC1155_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n\\n            // Stack the return of `balanceOf`.\\n            if (opcode_ == OPCODE_BALANCE_OF) {\\n                state_.stackIndex -= 2;\\n                uint256 baseIndex_ = state_.stackIndex - 1;\\n                state_.stack[baseIndex_] = IERC1155(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).balanceOf(\\n                        address(uint160(state_.stack[baseIndex_ + 1])),\\n                        state_.stack[baseIndex_ + 2]\\n                    );\\n            }\\n            // Stack the return of `balanceOfBatch`.\\n            // Operand will be the length\\n            else if (opcode_ == OPCODE_BALANCE_OF_BATCH) {\\n                uint256 len_ = operand_ + 1;\\n                address[] memory addresses_ = new address[](len_);\\n                uint256[] memory ids_ = new uint256[](len_);\\n\\n                // Consumes (2 * len_ + 1) inputs and produces len_ outputs.\\n                state_.stackIndex = state_.stackIndex - (len_ + 1);\\n                uint256 baseIndex_ = state_.stackIndex - len_;\\n\\n                IERC1155 token_ = IERC1155(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                );\\n                for (uint256 i_ = 0; i_ < len_; i_++) {\\n                    addresses_[i_] = address(\\n                        uint160(state_.stack[baseIndex_ + i_ + 1])\\n                    );\\n                    ids_[i_] = state_.stack[baseIndex_ + len_ + i_ + 1];\\n                }\\n\\n                uint256[] memory balances_ = token_.balanceOfBatch(\\n                    addresses_,\\n                    ids_\\n                );\\n\\n                for (uint256 i_ = 0; i_ < len_; i_++) {\\n                    state_.stack[baseIndex_ + i_] = balances_[i_];\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94ca907fbf0d3b2704b5b26bebda18dfdb63f57129fdc809406d3a1a201f4270\",\"license\":\"CAL\"},\"contracts/vm/ops/token/IERC20Ops.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev Opcode for `IERC20` `balanceOf`.\\nuint256 constant OPCODE_BALANCE_OF = 0;\\n/// @dev Opcode for `IERC20` `totalSupply`.\\nuint256 constant OPCODE_TOTAL_SUPPLY = 1;\\n/// @dev Number of provided opcodes for `IERC20Ops`.\\nuint256 constant IERC20_OPS_LENGTH = 2;\\n\\n/// @title IERC20Ops\\n/// @notice RainVM opcode pack to read the IERC20 interface.\\nlibrary IERC20Ops {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < IERC20_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n\\n            // Stack the return of `balanceOf`.\\n            if (opcode_ == OPCODE_BALANCE_OF) {\\n                state_.stackIndex--;\\n                uint256 baseIndex_ = state_.stackIndex - 1;\\n                state_.stack[baseIndex_] = IERC20(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).balanceOf(address(uint160(state_.stack[state_.stackIndex])));\\n            }\\n            // Stack the return of `totalSupply`.\\n            else if (opcode_ == OPCODE_TOTAL_SUPPLY) {\\n                uint256 baseIndex_ = state_.stackIndex - 1;\\n                state_.stack[baseIndex_] = IERC20(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).totalSupply();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92b910de932cb5d0dfa4f6ed706b72e515487ce1fcb673b53df3d0036329c7c7\",\"license\":\"CAL\"},\"contracts/vm/ops/token/IERC721Ops.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @dev Opcode for `IERC721` `balanceOf`.\\nuint256 constant OPCODE_BALANCE_OF = 0;\\n/// @dev Opcode for `IERC721` `ownerOf`.\\nuint256 constant OPCODE_OWNER_OF = 1;\\n/// @dev Number of provided opcodes for `IERC721Ops`.\\nuint256 constant IERC721_OPS_LENGTH = 2;\\n\\n/// @title IERC721Ops\\n/// @notice RainVM opcode pack to read the IERC721 interface.\\nlibrary IERC721Ops {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < IERC721_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n\\n            state_.stackIndex--;\\n            uint256 baseIndex_ = state_.stackIndex - 1;\\n            // Stack the return of `balanceOf`.\\n            if (opcode_ == OPCODE_BALANCE_OF) {\\n                state_.stack[baseIndex_] = IERC721(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).balanceOf(address(uint160(state_.stack[state_.stackIndex])));\\n            }\\n            // Stack the return of `ownerOf`.\\n            else if (opcode_ == OPCODE_OWNER_OF) {\\n                state_.stack[baseIndex_] = uint256(\\n                    uint160(\\n                        IERC721(address(uint160(state_.stack[baseIndex_])))\\n                            .ownerOf(state_.stack[state_.stackIndex])\\n                    )\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x83fd624d44e6ba3a34303d90757a6d15d8679d0233928eec1add8e1442673da2\",\"license\":\"CAL\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063079fb762146100465780632ea72a4914610083578063fc91a89714610096575b600080fd5b6100596100543660046104e7565b6100df565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61005961009136600461055b565b610185565b6100cf6100a43660046105fd565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b604051901515815260200161007a565b60003073ffffffffffffffffffffffffffffffffffffffff16632ea72a4984846040516020016101109291906109a2565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161013b9190610b37565b6020604051808303816000875af115801561015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017e9190610b4a565b9392505050565b6000600260005414156101f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600090815561020a8484610333565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205490915060ff161561029d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4455504c49434154455f4348494c44000000000000000000000000000000000060448201526064016101f0565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092527f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b6000808061034384860186610f4a565b9150915060006103727f0000000000000000000000000000000000000000000000000000000000000000610405565b6040517f7939b0fe00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff821690637939b0fe906103c9908690869060040161122c565b600060405180830381600087803b1580156103e357600080fd5b505af11580156103f7573d6000803e3d6000fd5b509298975050505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff81166104e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c65640000000000000000000060448201526064016101f0565b919050565b600080604083850312156104fa57600080fd5b823567ffffffffffffffff8082111561051257600080fd5b90840190610120828703121561052757600080fd5b9092506020840135908082111561053d57600080fd5b5083016080818603121561055057600080fd5b809150509250929050565b6000806020838503121561056e57600080fd5b823567ffffffffffffffff8082111561058657600080fd5b818501915085601f83011261059a57600080fd5b8135818111156105a957600080fd5b8660208285010111156105bb57600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146105ef57600080fd5b50565b80356104e2816105cd565b60006020828403121561060f57600080fd5b813561017e816105cd565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261064e57600080fd5b90910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261068c57600080fd5b830160208101925035905067ffffffffffffffff8111156106ac57600080fd5b8060051b36038313156106be57600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261074357600080fd5b830160208101925035905067ffffffffffffffff81111561076357600080fd5b8036038313156106be57600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156107a457600080fd5b8260051b8083602087013760009401602001938452509192915050565b6000608083016107d18384610657565b608086528281845260a08701905060a08260051b88010193508260005b83811015610849577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60898703018352610827828661070e565b6108328882846106c5565b9750505060209283019291909101906001016107ee565b505050505061085b6020840184610657565b858303602087015261086e838284610772565b9250505060408301356040850152606083013560608501528091505092915050565b600061089c828361061a565b608084526108aa818261070e565b6080808701526108bf610100870182846106c5565b9150506108cf602083018361070e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030160a08801526109048382846106c5565b925050506040820135610916816105cd565b73ffffffffffffffffffffffffffffffffffffffff1660c0860152606082013560e0860152610947602085016105f2565b73ffffffffffffffffffffffffffffffffffffffff8116602087015291506040840135604086015261097b606085016105f2565b73ffffffffffffffffffffffffffffffffffffffff8116606087015291505b949350505050565b6040815260006109b2848561061a565b6101208060408501526109c96101608501836107c1565b91506109d8602087018761061a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc080868503016060870152610a0d84836107c1565b9350610a1c604089018961061a565b91508086850301608087015250610a3383826107c1565b925050610a42606087016105f2565b73ffffffffffffffffffffffffffffffffffffffff1660a0850152610a69608087016105f2565b73ffffffffffffffffffffffffffffffffffffffff811660c08601525060a086013560e085015261010060c08701358186015260e0870135828601528087013561014086015250508281036020840152610ac38185610890565b95945050505050565b6000815180845260005b81811015610af257602081850181015186830182015201610ad6565b81811115610b04576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061017e6020830184610acc565b600060208284031215610b5c57600080fd5b815161017e816105cd565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610bb957610bb9610b67565b60405290565b604051610120810167ffffffffffffffff81118282101715610bb957610bb9610b67565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610c2a57610c2a610b67565b604052919050565b600067ffffffffffffffff821115610c4c57610c4c610b67565b5060051b60200190565b600067ffffffffffffffff831115610c7057610c70610b67565b610ca160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601610be3565b9050828152838383011115610cb557600080fd5b828260208301376000602084830101529392505050565b600082601f830112610cdd57600080fd5b81356020610cf2610ced83610c32565b610be3565b82815260059290921b84018101918181019086841115610d1157600080fd5b8286015b84811015610d2c5780358352918301918301610d15565b509695505050505050565b600060808284031215610d4957600080fd5b610d51610b96565b9050813567ffffffffffffffff80821115610d6b57600080fd5b818401915084601f830112610d7f57600080fd5b81356020610d8f610ced83610c32565b82815260059290921b84018101918181019088841115610dae57600080fd5b8286015b84811015610dfb57803586811115610dca5760008081fd5b8701603f81018b13610ddc5760008081fd5b610ded8b8683013560408401610c56565b845250918301918301610db2565b5086525085810135935082841115610e1257600080fd5b610e1e87858801610ccc565b8186015250505050604082013560408201526060820135606082015292915050565b600082601f830112610e5157600080fd5b61017e83833560208501610c56565b600060808284031215610e7257600080fd5b610e7a610b96565b9050813567ffffffffffffffff80821115610e9457600080fd5b9083019060808286031215610ea857600080fd5b610eb0610b96565b823582811115610ebf57600080fd5b610ecb87828601610e40565b825250602083013582811115610ee057600080fd5b610eec87828601610e40565b60208301525060408301359150610f02826105cd565b81604082015260608301356060820152808452505050610f24602083016105f2565b602082015260408201356040820152610f3f606083016105f2565b606082015292915050565b60008060408385031215610f5d57600080fd5b823567ffffffffffffffff80821115610f7557600080fd5b908401906101208287031215610f8a57600080fd5b610f92610bbf565b823582811115610fa157600080fd5b610fad88828601610d37565b825250602083013582811115610fc257600080fd5b610fce88828601610d37565b602083015250604083013582811115610fe657600080fd5b610ff288828601610d37565b604083015250611004606084016105f2565b6060820152611015608084016105f2565b608082015260a083013560a082015260c083013560c082015260e083013560e082015261010080840135818301525080945050602085013591508082111561105c57600080fd5b5061106985828601610e60565b9150509250929050565b600081518084526020808501945080840160005b838110156110a357815187529582019590820190600101611087565b509495945050505050565b60006080830182516080855281815180845260a08701915060a08160051b88010193506020808401935060005b82811015611127577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60898703018452611115868651610acc565b955093810193928101926001016110db565b50808701519350878503818901525050506111428282611073565b91505060408301516040850152606083015160608501528091505092915050565b60008151608084528051608080860152611181610100860182610acc565b905060208201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808683030160a08701526111bc8282610acc565b915050604082015173ffffffffffffffffffffffffffffffffffffffff80821660c0880152606084015160e08801528060208701511660208801525050604084015160408601526060840151915061099a606086018373ffffffffffffffffffffffffffffffffffffffff169052565b604081526000835161012080604085015261124b6101608501836110ae565b915060208601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08086850301606087015261128784836110ae565b93506040880151915080868503016080870152506112a583826110ae565b92505060608601516112cf60a086018273ffffffffffffffffffffffffffffffffffffffff169052565b50608086015173ffffffffffffffffffffffffffffffffffffffff811660c08601525060a086015160e085015260c0860151610100818187015260e088015183870152808801516101408701525050508281036020840152610ac3818561116356fea2646970667358221220c60ef6184818a000b5ca8e3725035d37948d0d2d683ea6ffdf6ddb8afb0d3fe164736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createChild(bytes)": {
        "params": {
          "data_": "Encoded data to pass down to child contract constructor."
        },
        "returns": {
          "_0": "New child contract address."
        }
      },
      "createChildTyped(((bytes[],uint256[],uint256,uint256),(bytes[],uint256[],uint256,uint256),(bytes[],uint256[],uint256,uint256),address,address,uint256,uint256,uint256,uint256),((string,string,address,uint256),address,uint256,address))": {
        "params": {
          "config_": "`SaleConfig` constructor configuration."
        },
        "returns": {
          "_0": "New `Sale` child contract."
        }
      },
      "isChild(address)": {
        "params": {
          "maybeChild_": "Address of child contract to look up."
        },
        "returns": {
          "_0": "Returns `true` if address is a contract created by this contract factory, otherwise `false`."
        }
      }
    },
    "title": "SaleFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Implementation(address,address)": {
        "notice": "Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this."
      },
      "NewChild(address,address)": {
        "notice": "Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Build the reference implementation to clone for each child."
      },
      "createChild(bytes)": {
        "notice": "Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event."
      },
      "createChildTyped(((bytes[],uint256[],uint256,uint256),(bytes[],uint256[],uint256,uint256),(bytes[],uint256[],uint256,uint256),address,address,uint256,uint256,uint256,uint256),((string,string,address,uint256),address,uint256,address))": {
        "notice": "Allows calling `createChild` with `SeedERC20Config` struct. Use original `Factory` `createChild` function signature if function parameters are already encoded."
      },
      "isChild(address)": {
        "notice": "Implements `IFactory`. Checks if address is registered as a child contract of this factory."
      }
    },
    "notice": "Factory for creating and deploying `Sale` contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3818,
        "contract": "contracts/sale/SaleFactory.sol:SaleFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10061,
        "contract": "contracts/sale/SaleFactory.sol:SaleFactory",
        "label": "contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}