{
  "address": "0x16D33236D7Af17ca55E60EcE64e9F6CeD32Ba416",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Implementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "child",
          "type": "address"
        }
      ],
      "name": "NewChild",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "createChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes[]",
              "name": "sources",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "constants",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "stackLength",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "argumentsLength",
              "type": "uint256"
            }
          ],
          "internalType": "struct StateConfig",
          "name": "config_",
          "type": "tuple"
        }
      ],
      "name": "createChildTyped",
      "outputs": [
        {
          "internalType": "contract CombineTier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maybeChild_",
          "type": "address"
        }
      ],
      "name": "isChild",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3c836487be6e335488bf17d4a794b3eb41c1950db512fffb594fb95721f270b",
  "receipt": {
    "to": null,
    "from": "0xbF334f8BD1420a1CbFE15407f73919424934B1B3",
    "contractAddress": "0x16D33236D7Af17ca55E60EcE64e9F6CeD32Ba416",
    "transactionIndex": 0,
    "gasUsed": "36693510",
    "logsBloom": "0x
    "blockHash": "0x7fe76f676f8b58607e08424f65f3f15c56a101433121aed6fe7ec101e5f93aca",
    "transactionHash": "0xc3c836487be6e335488bf17d4a794b3eb41c1950db512fffb594fb95721f270b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17202627,
        "transactionHash": "0xc3c836487be6e335488bf17d4a794b3eb41c1950db512fffb594fb95721f270b",
        "address": "0x16D33236D7Af17ca55E60EcE64e9F6CeD32Ba416",
        "topics": [
          "0x7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70"
        ],
        "data": "0x000000000000000000000000bf334f8bd1420a1cbfe15407f73919424934b1b3000000000000000000000000d0ce9e4cb06d63cb02a9a71a070d3b0be7db94d1",
        "logIndex": 0,
        "blockHash": "0x7fe76f676f8b58607e08424f65f3f15c56a101433121aed6fe7ec101e5f93aca"
      }
    ],
    "blockNumber": 17202627,
    "cumulativeGasUsed": "5867990",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "51f8c0eb364ac8ebbc6da111363b0c63",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Implementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"}],\"name\":\"NewChild\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"createChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"sources\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"stackLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"argumentsLength\",\"type\":\"uint256\"}],\"internalType\":\"struct StateConfig\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"createChildTyped\",\"outputs\":[{\"internalType\":\"contract CombineTier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeChild_\",\"type\":\"address\"}],\"name\":\"isChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createChild(bytes)\":{\"params\":{\"data_\":\"Encoded data to pass down to child contract constructor.\"},\"returns\":{\"_0\":\"New child contract address.\"}},\"createChildTyped((bytes[],uint256[],uint256,uint256))\":{\"params\":{\"config_\":\"`ImmutableSourceConfig` of the `CombineTier` logic.\"},\"returns\":{\"_0\":\"New `CombineTier` child contract address.\"}},\"isChild(address)\":{\"params\":{\"maybeChild_\":\"Address of child contract to look up.\"},\"returns\":{\"_0\":\"Returns `true` if address is a contract created by this contract factory, otherwise `false`.\"}}},\"title\":\"CombineTierFactory\",\"version\":1},\"userdoc\":{\"events\":{\"Implementation(address,address)\":{\"notice\":\"Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this.\"},\"NewChild(address,address)\":{\"notice\":\"Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Build the reference implementation to clone for each child.\"},\"createChild(bytes)\":{\"notice\":\"Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event.\"},\"createChildTyped((bytes[],uint256[],uint256,uint256))\":{\"notice\":\"Typed wrapper for `createChild` with Source. Use original `Factory` `createChild` function signature if function parameters are already encoded.\"},\"implementation()\":{\"notice\":\"Template contract to clone. Deployed by the constructor.\"},\"isChild(address)\":{\"notice\":\"Implements `IFactory`. Checks if address is registered as a child contract of this factory.\"}},\"notice\":\"Factory for creating and deploying `CombineTier` contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tier/CombineTierFactory.sol\":\"CombineTierFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/factory/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IFactory} from \\\"./IFactory.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Factory\\n/// @notice Base contract for deploying and registering child contracts.\\nabstract contract Factory is IFactory, ReentrancyGuard {\\n    /// @dev state to track each deployed contract address. A `Factory` will\\n    /// never lie about deploying a child, unless `isChild` is overridden to do\\n    /// so.\\n    mapping(address => bool) private contracts;\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// `_createChild` hook must be overridden to actually create child\\n    /// contract.\\n    ///\\n    /// Implementers may want to overload this function with a typed equivalent\\n    /// to expose domain specific structs etc. to the compiled ABI consumed by\\n    /// tooling and other scripts. To minimise gas costs for deployment it is\\n    /// expected that the tooling will consume the typed ABI, then encode the\\n    /// arguments and pass them to this function directly.\\n    ///\\n    /// @param data_ ABI encoded data to pass to child contract constructor.\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        returns (address);\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Calls the `_createChild` hook that inheriting contracts must override.\\n    /// Registers child contract address such that `isChild` is `true`.\\n    /// Emits `NewChild` event.\\n    ///\\n    /// @param data_ Encoded data to pass down to child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        returns (address)\\n    {\\n        // Create child contract using hook.\\n        address child_ = _createChild(data_);\\n        // Ensure the child at this address has not previously been deployed.\\n        require(!contracts[child_], \\\"DUPLICATE_CHILD\\\");\\n        // Register child contract address to `contracts` mapping.\\n        contracts[child_] = true;\\n        // Emit `NewChild` event with child contract address.\\n        emit IFactory.NewChild(msg.sender, child_);\\n        return child_;\\n    }\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// @param maybeChild_ Address of child contract to look up.\\n    /// @return Returns `true` if address is a contract created by this\\n    /// contract factory, otherwise `false`.\\n    function isChild(address maybeChild_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return contracts[maybeChild_];\\n    }\\n}\\n\",\"keccak256\":\"0x1e603d9367137008af1b035b02832d86048fc5156310e9080e5d5f873c0f4846\",\"license\":\"CAL\"},\"contracts/factory/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\ninterface IFactory {\\n    /// Whenever a new child contract is deployed, a `NewChild` event\\n    /// containing the new child contract address MUST be emitted.\\n    /// @param sender `msg.sender` that deployed the contract (factory).\\n    /// @param child address of the newly deployed child.\\n    event NewChild(address sender, address child);\\n\\n    /// Factories that clone a template contract MUST emit an event any time\\n    /// they set the implementation being cloned. Factories that deploy new\\n    /// contracts without cloning do NOT need to emit this.\\n    /// @param sender `msg.sender` that deployed the implementation (factory).\\n    /// @param implementation address of the implementation contract that will\\n    /// be used for future clones if relevant.\\n    event Implementation(address sender, address implementation);\\n\\n    /// Creates a new child contract.\\n    ///\\n    /// @param data_ Domain specific data for the child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_) external returns (address);\\n\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// Addresses that were not deployed by `createChild` MUST NOT return\\n    /// `true` from `isChild`. This is CRITICAL to the security guarantees for\\n    /// any contract implementing `IFactory`.\\n    ///\\n    /// @param maybeChild_ Address to check registration for.\\n    /// @return `true` if address was deployed by this contract factory,\\n    /// otherwise `false`.\\n    function isChild(address maybeChild_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3e9ca6613b0c19d98c4e19a7586d4109e498db2cf7d6e38e34fc2d2c0dbc32e2\",\"license\":\"CAL\"},\"contracts/math/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @dev The scale of all fixed point math. This is adopting the conventions of\\n/// both ETH (wei) and most ERC20 tokens, so is hopefully uncontroversial.\\nuint256 constant FP_DECIMALS = 18;\\n/// @dev The number `1` in the standard fixed point math scaling. Most of the\\n/// differences between fixed point math and regular math is multiplying or\\n/// dividing by `ONE` after the appropriate scaling has been applied.\\nuint256 constant FP_ONE = 1e18;\\n\\n/// @title FixedPointMath\\n/// @notice Sometimes we want to do math with decimal values but all we have\\n/// are integers, typically uint256 integers. Floats are very complex so we\\n/// don't attempt to simulate them. Instead we provide a standard definition of\\n/// \\\"one\\\" as 10 ** 18 and scale everything up/down to this as fixed point math.\\n/// Overflows are errors as per Solidity.\\nlibrary FixedPointMath {\\n    /// Scale a fixed point decimal of some scale factor to match `DECIMALS`.\\n    /// @param a_ Some fixed point decimal value.\\n    /// @param aDecimals_ The number of fixed decimals of `a_`.\\n    /// @return `a_` scaled to match `DECIMALS`.\\n    function scale18(uint256 a_, uint256 aDecimals_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 decimals_;\\n        if (FP_DECIMALS == aDecimals_) {\\n            return a_;\\n        } else if (FP_DECIMALS > aDecimals_) {\\n            unchecked {\\n                decimals_ = FP_DECIMALS - aDecimals_;\\n            }\\n            return a_ * 10**decimals_;\\n        } else {\\n            unchecked {\\n                decimals_ = aDecimals_ - FP_DECIMALS;\\n            }\\n            return a_ / 10**decimals_;\\n        }\\n    }\\n\\n    /// Scale a fixed point decimals of `DECIMALS` to some other scale.\\n    /// @param a_ A `DECIMALS` fixed point decimals.\\n    /// @param targetDecimals_ The new scale of `a_`.\\n    /// @return `a_` rescaled from `DECIMALS` to `targetDecimals_`.\\n    function scaleN(uint256 a_, uint256 targetDecimals_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 decimals_;\\n        if (targetDecimals_ == FP_DECIMALS) {\\n            return a_;\\n        } else if (FP_DECIMALS > targetDecimals_) {\\n            unchecked {\\n                decimals_ = FP_DECIMALS - targetDecimals_;\\n            }\\n            return a_ / 10**decimals_;\\n        } else {\\n            unchecked {\\n                decimals_ = targetDecimals_ - FP_DECIMALS;\\n            }\\n            return a_ * 10**decimals_;\\n        }\\n    }\\n\\n    /// Scale a fixed point up or down by `scaleBy_` orders of magnitude.\\n    /// The caller MUST ensure the end result matches `DECIMALS` if other\\n    /// functions in this library are to work correctly.\\n    /// Notably `scaleBy` is a SIGNED integer so scaling down by negative OOMS\\n    /// is supported.\\n    /// @param a_ Some integer of any scale.\\n    /// @param scaleBy_ OOMs to scale `a_` up or down by.\\n    /// @return `a_` rescaled according to `scaleBy_`.\\n    function scaleBy(uint256 a_, int8 scaleBy_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (scaleBy_ == 0) {\\n            return a_;\\n        } else if (scaleBy_ > 0) {\\n            return a_ * 10**uint8(scaleBy_);\\n        } else {\\n            uint256 posScaleDownBy_;\\n            unchecked {\\n                posScaleDownBy_ = uint8(-scaleBy_);\\n            }\\n            return a_ / 10**posScaleDownBy_;\\n        }\\n    }\\n\\n    /// Fixed point multiplication in native scale decimals.\\n    /// Both `a_` and `b_` MUST be `DECIMALS` fixed point decimals.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return `a_` multiplied by `b_` to `DECIMALS` fixed point decimals.\\n    function fixedPointMul(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (a_ * b_) / FP_ONE;\\n    }\\n\\n    /// Fixed point division in native scale decimals.\\n    /// Both `a_` and `b_` MUST be `DECIMALS` fixed point decimals.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return `a_` divided by `b_` to `DECIMALS` fixed point decimals.\\n    function fixedPointDiv(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (a_ * FP_ONE) / b_;\\n    }\\n}\\n\",\"keccak256\":\"0xe97a9b0075a2836d04071aa3d60172a60176a676c0f370fe61eafbe73ed6c745\",\"license\":\"CAL\"},\"contracts/math/SaturatingMath.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title SaturatingMath\\n/// @notice Sometimes we neither want math operations to error nor wrap around\\n/// on an overflow or underflow. In the case of transferring assets an error\\n/// may cause assets to be locked in an irretrievable state within the erroring\\n/// contract, e.g. due to a tiny rounding/calculation error. We also can't have\\n/// assets underflowing and attempting to approve/transfer \\\"infinity\\\" when we\\n/// wanted \\\"almost or exactly zero\\\" but some calculation bug underflowed zero.\\n/// Ideally there are no calculation mistakes, but in guarding against bugs it\\n/// may be safer pragmatically to saturate arithmatic at the numeric bounds.\\n/// Note that saturating div is not supported because 0/0 is undefined.\\nlibrary SaturatingMath {\\n    /// Saturating addition.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ + b_ and max uint256.\\n    function saturatingAdd(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 c_ = a_ + b_;\\n            return c_ < a_ ? type(uint256).max : c_;\\n        }\\n    }\\n\\n    /// Saturating subtraction.\\n    /// @param a_ Minuend.\\n    /// @param b_ Subtrahend.\\n    /// @return Maximum of a_ - b_ and 0.\\n    function saturatingSub(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return a_ > b_ ? a_ - b_ : 0;\\n        }\\n    }\\n\\n    /// Saturating multiplication.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ * b_ and max uint256.\\n    function saturatingMul(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being\\n            // zero, but the benefit is lost if 'b' is also tested.\\n            // https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a_ == 0) return 0;\\n            uint256 c_ = a_ * b_;\\n            return c_ / a_ != b_ ? type(uint256).max : c_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9078a23bd04812d8a57e26ef51ddc7f2c6b0c65d8c7cfc2f2ebf40e6642fff88\",\"license\":\"CAL\"},\"contracts/sstore2/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of\\n  data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n    error WriteError();\\n\\n    /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n    function write(bytes memory _data) internal returns (address pointer) {\\n        // Append 00 to _data so contract can't be called\\n        // Build init code\\n        bytes memory code = Bytecode.creationCodeFor(\\n            abi.encodePacked(hex\\\"00\\\", _data)\\n        );\\n\\n        // Deploy contract using create\\n        assembly {\\n            pointer := create(0, add(code, 32), mload(code))\\n        }\\n\\n        // Address MUST be non-zero\\n        if (pointer == address(0)) revert WriteError();\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer, uint256 _start)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n    function read(\\n        address _pointer,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x233f8e9ad3717999efbf17923c0f16aaf910f79064aff273485237b4f2a1ef2f\",\"license\":\"MIT\"},\"contracts/sstore2/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nlibrary Bytecode {\\n    error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n    /**\\n    @notice Generate a creation code that results on a contract with `_code` as\\n    bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n    function creationCodeFor(bytes memory _code)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n        return\\n            abi.encodePacked(\\n                hex\\\"63\\\",\\n                uint32(_code.length),\\n                hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n                _code\\n            );\\n    }\\n\\n    /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n    function codeSize(address _addr) internal view returns (uint256 size) {\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n    }\\n\\n    /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n    function codeAt(\\n        address _addr,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal view returns (bytes memory oCode) {\\n        uint256 csize = codeSize(_addr);\\n        if (csize == 0) return bytes(\\\"\\\");\\n\\n        if (_start > csize) return bytes(\\\"\\\");\\n        if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end);\\n\\n        unchecked {\\n            uint256 reqSize = _end - _start;\\n            uint256 maxSize = csize - _start;\\n\\n            uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n            assembly {\\n                // allocate output byte array - this could also be done without\\n                // assembly\\n                // by using o_code = new bytes(size)\\n                oCode := mload(0x40)\\n                // new \\\"memory end\\\" including padding\\n                mstore(\\n                    0x40,\\n                    add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n                )\\n                // store length in memory\\n                mstore(oCode, size)\\n                // actually retrieve the code, this needs assembly\\n                extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb113974373d234e70f518f0f7c3f34162c008031c168ba3b8ed12f438d5e7145\",\"license\":\"MIT\"},\"contracts/tier/CombineTier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport {RainVM, State} from \\\"../vm/RainVM.sol\\\";\\nimport {VMState, StateConfig} from \\\"../vm/libraries/VMState.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {AllStandardOps, ALL_STANDARD_OPS_START, ALL_STANDARD_OPS_LENGTH} from \\\"../vm/ops/AllStandardOps.sol\\\";\\nimport {TierwiseCombine} from \\\"./libraries/TierwiseCombine.sol\\\";\\nimport {ReadOnlyTier, ITier} from \\\"./ReadOnlyTier.sol\\\";\\n\\n/// @title CombineTier\\n/// @notice Implements `ReadOnlyTier` over RainVM. Allows combining the reports\\n/// from any other `ITier` contracts referenced in the `ImmutableSource` set at\\n/// construction.\\n/// The value at the top of the stack after executing the rain script will be\\n/// used as the return of `report`.\\ncontract CombineTier is ReadOnlyTier, RainVM, VMState, Initializable {\\n    /// @dev local opcode to put tier report account on the stack.\\n    uint256 private constant OPCODE_ACCOUNT = 0;\\n    /// @dev local opcodes length.\\n    uint256 internal constant LOCAL_OPS_LENGTH = 1;\\n\\n    /// @dev local offset for combine tier ops.\\n    uint256 private immutable localOpsStart;\\n\\n    address private vmStatePointer;\\n\\n    constructor() {\\n        localOpsStart = ALL_STANDARD_OPS_START + ALL_STANDARD_OPS_LENGTH;\\n    }\\n\\n    /// @param config_ The StateConfig will be deployed as a pointer under\\n    /// `vmStatePointer`.\\n    function initialize(StateConfig memory config_) external initializer {\\n        vmStatePointer = _snapshot(_newState(config_));\\n    }\\n\\n    /// @inheritdoc RainVM\\n    function applyOp(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view override {\\n        unchecked {\\n            if (opcode_ < localOpsStart) {\\n                AllStandardOps.applyOp(\\n                    state_,\\n                    opcode_ - ALL_STANDARD_OPS_START,\\n                    operand_\\n                );\\n            } else {\\n                opcode_ -= localOpsStart;\\n                require(opcode_ < LOCAL_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n                // There's only one opcode, which stacks the address to report.\\n                address account_ = abi.decode(context_, (address));\\n                state_.stack[state_.stackIndex] = uint256(uint160(account_));\\n                state_.stackIndex++;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ITier\\n    function report(address account_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        State memory state_ = _restore(vmStatePointer);\\n        eval(abi.encode(account_), state_, 0);\\n        return state_.stack[state_.stackIndex - 1];\\n    }\\n}\\n\",\"keccak256\":\"0x5a1f84610ee6493d1a9872c540450a748a225557e676d9304dcfd7a73202dcb8\",\"license\":\"CAL\"},\"contracts/tier/CombineTierFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {Factory} from \\\"../factory/Factory.sol\\\";\\nimport {CombineTier} from \\\"./CombineTier.sol\\\";\\nimport {StateConfig} from \\\"../vm/libraries/VMState.sol\\\";\\n\\n/// @title CombineTierFactory\\n/// @notice Factory for creating and deploying `CombineTier` contracts.\\ncontract CombineTierFactory is Factory {\\n    /// Template contract to clone.\\n    /// Deployed by the constructor.\\n    address public immutable implementation;\\n\\n    /// Build the reference implementation to clone for each child.\\n    constructor() {\\n        address implementation_ = address(new CombineTier());\\n        emit Implementation(msg.sender, implementation_);\\n        implementation = implementation_;\\n    }\\n\\n    /// @inheritdoc Factory\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        StateConfig memory config_ = abi.decode(data_, (StateConfig));\\n        address clone_ = Clones.clone(implementation);\\n        CombineTier(clone_).initialize(config_);\\n        return clone_;\\n    }\\n\\n    /// Typed wrapper for `createChild` with Source.\\n    /// Use original `Factory` `createChild` function signature if function\\n    /// parameters are already encoded.\\n    ///\\n    /// @param config_ `ImmutableSourceConfig` of the `CombineTier` logic.\\n    /// @return New `CombineTier` child contract address.\\n    function createChildTyped(StateConfig calldata config_)\\n        external\\n        returns (CombineTier)\\n    {\\n        return CombineTier(this.createChild(abi.encode(config_)));\\n    }\\n}\\n\",\"keccak256\":\"0xfaf58c187bc97f238d10f9da0102690a7a3c7c50690446b79fb8a28090d95ef9\",\"license\":\"CAL\"},\"contracts/tier/ITier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers as a `uint`.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at `1`; Tier `0` is implied if no tier has ever\\n///     been held.\\n///   - Tier `0` is NOT encoded in the report, it is simply the fallback value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If a tier is held but the historical block information is not available\\n///     the report MAY return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if tier 0 is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\n///\\n/// So the four possible states and report values are:\\n/// - Tier is held and block is known: Block is in the report\\n/// - Tier is held but block is NOT known: `0` is in the report\\n/// - Tier is NOT held: `0xFF..` is in the report\\n/// - Tier is unknown: `0xFF..` is in the report\\ninterface ITier {\\n    /// Every time a tier changes we log start and end tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    /// The start tier MAY be lower than the current tier as at the block this\\n    /// event is emitted in.\\n    /// @param sender The `msg.sender` that authorized the tier change.\\n    /// @param account The account changing tier.\\n    /// @param startTier The previous tier the account held.\\n    /// @param endTier The newly acquired tier the account now holds.\\n    /// @param data The associated data for the tier change.\\n    event TierChange(\\n        address sender,\\n        address account,\\n        uint256 startTier,\\n        uint256 endTier,\\n        bytes data\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, uint startTier, uint endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where tier 3 can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// tier 0 to themselves.\\n    ///\\n    /// The tier 0 status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        uint256 endTier,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with tier 0 for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at tier 8\\n    /// from high bits and working down to tier 1.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost and\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae2cc8231b77c7d7d907f88c7a627191bb84c26794b8a3d76ff7841eebff7316\",\"license\":\"CAL\"},\"contracts/tier/ReadOnlyTier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ITier} from \\\"./ITier.sol\\\";\\nimport {TierReport} from \\\"./libraries/TierReport.sol\\\";\\n\\n/// @title ReadOnlyTier\\n/// @notice `ReadOnlyTier` is a base contract that other contracts\\n/// are expected to inherit.\\n///\\n/// It does not allow `setStatus` and expects `report` to derive from\\n/// some existing onchain data.\\n///\\n/// @dev A contract inheriting `ReadOnlyTier` cannot call `setTier`.\\n///\\n/// `ReadOnlyTier` is abstract because it does not implement `report`.\\n/// The expectation is that `report` will derive tiers from some\\n/// external data source.\\nabstract contract ReadOnlyTier is ITier {\\n    /// Always reverts because it is not possible to set a read only tier.\\n    /// @inheritdoc ITier\\n    function setTier(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override {\\n        revert(\\\"SET_TIER\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xfe48e265ccc7b2a0eb5314b727aae3384a3b6b4eda5f309a4e4ce86b3a13cda5\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierConstants.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title TierConstants\\n/// @notice Constants for use with tier logic.\\nlibrary TierConstants {\\n    /// NEVER is 0xFF.. as it is infinitely in the future.\\n    /// NEVER for an entire report.\\n    uint256 internal constant NEVER_REPORT = type(uint256).max;\\n    /// NEVER for a single tier.\\n    uint32 internal constant NEVER_TIER = type(uint32).max;\\n\\n    /// Always is 0 as it is the genesis block.\\n    /// Tiers can't predate the chain but they can predate an `ITier` contract.\\n    uint256 internal constant ALWAYS = 0;\\n\\n    /// Account has never held a tier.\\n    uint256 internal constant TIER_ZERO = 0;\\n\\n    /// Magic number for tier one.\\n    uint256 internal constant TIER_ONE = 1;\\n    /// Magic number for tier two.\\n    uint256 internal constant TIER_TWO = 2;\\n    /// Magic number for tier three.\\n    uint256 internal constant TIER_THREE = 3;\\n    /// Magic number for tier four.\\n    uint256 internal constant TIER_FOUR = 4;\\n    /// Magic number for tier five.\\n    uint256 internal constant TIER_FIVE = 5;\\n    /// Magic number for tier six.\\n    uint256 internal constant TIER_SIX = 6;\\n    /// Magic number for tier seven.\\n    uint256 internal constant TIER_SEVEN = 7;\\n    /// Magic number for tier eight.\\n    uint256 internal constant TIER_EIGHT = 8;\\n    /// Maximum tier is `TIER_EIGHT`.\\n    uint256 internal constant MAX_TIER = TIER_EIGHT;\\n}\\n\",\"keccak256\":\"0x271026773264b9c4e68753778ffeeb00c7bd31ddf350f526ae383b2aef4bd6ff\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierReport.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ITier} from \\\"../ITier.sol\\\";\\nimport \\\"./TierConstants.sol\\\";\\n\\n/// @title TierReport\\n/// @notice `TierReport` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this\\n/// factors that out.\\nlibrary TierReport {\\n    /// Enforce upper limit on tiers so we can do unchecked math.\\n    /// @param tier_ The tier to enforce bounds on.\\n    modifier maxTier(uint256 tier_) {\\n        require(tier_ <= TierConstants.MAX_TIER, \\\"MAX_TIER\\\");\\n        _;\\n    }\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(uint256 report_, uint256 blockNumber_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < 8; i_++) {\\n                if (uint32(uint256(report_ >> (i_ * 32))) > blockNumber_) {\\n                    return i_;\\n                }\\n            }\\n            return TierConstants.MAX_TIER;\\n        }\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // ZERO is a special case. Everyone has always been at least ZERO,\\n            // since block 0.\\n            if (tier_ == 0) {\\n                return 0;\\n            }\\n\\n            uint256 offset_ = (tier_ - 1) * 32;\\n            return uint256(uint32(uint256(report_ >> offset_)));\\n        }\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            uint256 mask_ = (TierConstants.NEVER_REPORT >> offset_) << offset_;\\n            return report_ | mask_;\\n        }\\n    }\\n\\n    /// Updates a report with a block number for a given tier.\\n    /// More gas efficient than `updateBlocksForTierRange` if only a single\\n    /// tier is being modified.\\n    /// The tier at/above the given tier is updated. E.g. tier `0` will update\\n    /// the block for tier `1`.\\n    /// @param report_ Report to use as the baseline for the updated report.\\n    /// @param tier_ The tier level to update.\\n    /// @param blockNumber_ The new block number for `tier_`.\\n    function updateBlockAtTier(\\n        uint256 report_,\\n        uint256 tier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(tier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            return\\n                (report_ &\\n                    ~uint256(uint256(TierConstants.NEVER_TIER) << offset_)) |\\n                uint256(blockNumber_ << offset_);\\n        }\\n    }\\n\\n    /// Updates a report with a block number for every tier in a range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start tier.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier at the start of the range (exclusive).\\n    /// @param endTier_ The tier at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every tier in the\\n    /// range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(endTier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_;\\n            for (uint256 i_ = startTier_; i_ < endTier_; i_++) {\\n                offset_ = i_ * 32;\\n                report_ =\\n                    (report_ &\\n                        ~uint256(\\n                            uint256(TierConstants.NEVER_TIER) << offset_\\n                        )) |\\n                    uint256(blockNumber_ << offset_);\\n            }\\n            return report_;\\n        }\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure returns (uint256) {\\n        return\\n            endTier_ < startTier_\\n                ? truncateTiersAbove(report_, endTier_)\\n                : updateBlocksForTierRange(\\n                    report_,\\n                    startTier_,\\n                    endTier_,\\n                    blockNumber_\\n                );\\n    }\\n}\\n\",\"keccak256\":\"0x214b857ca65e52ee4e7e631f656b650f612e1bf2e3cf7cf74544fa3550a10743\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierwiseCombine.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TierReport.sol\\\";\\nimport \\\"../../math/SaturatingMath.sol\\\";\\n\\nlibrary TierwiseCombine {\\n    using Math for uint256;\\n    using SaturatingMath for uint256;\\n\\n    /// Every lte check in `selectLte` must pass.\\n    uint256 internal constant LOGIC_EVERY = 0;\\n    /// Only one lte check in `selectLte` must pass.\\n    uint256 internal constant LOGIC_ANY = 1;\\n\\n    /// Select the minimum block number from passing blocks in `selectLte`.\\n    uint256 internal constant MODE_MIN = 0;\\n    /// Select the maximum block number from passing blocks in `selectLte`.\\n    uint256 internal constant MODE_MAX = 1;\\n    /// Select the first block number that passes in `selectLte`.\\n    uint256 internal constant MODE_FIRST = 2;\\n\\n    /// Performs a tierwise saturating subtraction of two reports.\\n    /// Intepret as \\\"# of blocks older report was held before newer report\\\".\\n    /// If older report is in fact newer then `0` will be returned.\\n    /// i.e. the diff cannot be negative, older report as simply spent 0 blocks\\n    /// existing before newer report, if it is in truth the newer report.\\n    /// @param newerReport_ Block to subtract from.\\n    /// @param olderReport_ Block to subtract.\\n    function saturatingSub(uint256 newerReport_, uint256 olderReport_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 ret_;\\n            for (uint256 tier_ = 1; tier_ <= 8; tier_++) {\\n                uint256 newerBlock_ = TierReport.tierBlock(newerReport_, tier_);\\n                uint256 olderBlock_ = TierReport.tierBlock(olderReport_, tier_);\\n                uint256 diff_ = newerBlock_.saturatingSub(olderBlock_);\\n                ret_ = TierReport.updateBlockAtTier(ret_, tier_ - 1, diff_);\\n            }\\n            return ret_;\\n        }\\n    }\\n\\n    /// Given a list of reports, selects the best tier in a tierwise fashion.\\n    /// The \\\"best\\\" criteria can be configured by `logic_` and `mode_`.\\n    /// Logic can be \\\"every\\\" or \\\"any\\\", which means that the reports for a given\\n    /// tier must either all or any be less than or equal to the reference\\n    /// `blockNumber_`.\\n    /// Mode can be \\\"min\\\", \\\"max\\\", \\\"first\\\" which selects between all the block\\n    /// numbers for a given tier that meet the lte criteria.\\n    /// IMPORTANT: If the output of `selectLte` is used to write to storage\\n    /// care must be taken to ensure that \\\"upcoming\\\" tiers relative to the\\n    /// `blockNumber_` are not overwritten inappropriately. Typically this\\n    /// function should be used as a filter over reads only from an upstream\\n    /// source of truth.\\n    /// @param reports_ The list of reports to select over.\\n    /// @param blockNumber_ The block number that tier blocks must be lte.\\n    /// @param logic_ `LOGIC_EVERY` or `LOGIC_ANY`.\\n    /// @param mode_ `MODE_MIN`, `MODE_MAX` or `MODE_FIRST`.\\n    function selectLte(\\n        uint256[] memory reports_,\\n        uint256 blockNumber_,\\n        uint256 logic_,\\n        uint256 mode_\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 ret_;\\n            uint256 block_;\\n            bool anyLte_;\\n            uint256 length_ = reports_.length;\\n            for (uint256 tier_ = 1; tier_ <= 8; tier_++) {\\n                uint256 accumulator_;\\n                // Nothing lte the reference block for this tier yet.\\n                anyLte_ = false;\\n\\n                // Initialize the accumulator for this tier.\\n                if (mode_ == MODE_MIN) {\\n                    accumulator_ = TierConstants.NEVER_REPORT;\\n                } else {\\n                    accumulator_ = 0;\\n                }\\n\\n                // Filter all the blocks at the current tier from all the\\n                // reports against the reference tier and each other.\\n                for (uint256 i_ = 0; i_ < length_; i_++) {\\n                    block_ = TierReport.tierBlock(reports_[i_], tier_);\\n\\n                    if (block_ <= blockNumber_) {\\n                        // Min and max need to compare current value against\\n                        // the accumulator.\\n                        if (mode_ == MODE_MIN) {\\n                            accumulator_ = block_.min(accumulator_);\\n                        } else if (mode_ == MODE_MAX) {\\n                            accumulator_ = block_.max(accumulator_);\\n                        } else if (mode_ == MODE_FIRST && !anyLte_) {\\n                            accumulator_ = block_;\\n                        }\\n                        anyLte_ = true;\\n                    } else if (logic_ == LOGIC_EVERY) {\\n                        // Can short circuit for an \\\"every\\\" check.\\n                        accumulator_ = TierConstants.NEVER_REPORT;\\n                        break;\\n                    }\\n                }\\n                if (!anyLte_) {\\n                    accumulator_ = TierConstants.NEVER_REPORT;\\n                }\\n                ret_ = TierReport.updateBlockAtTier(\\n                    ret_,\\n                    tier_ - 1,\\n                    accumulator_\\n                );\\n            }\\n            return ret_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0594a22229d590e8db2b217ea9bd4ce2b20fcb2a85f305e6582a693b42b18ae6\",\"license\":\"CAL\"},\"contracts/vm/RainVM.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// Everything required to evaluate and track the state of a rain script.\\n/// As this is a struct it will be in memory when passed to `RainVM` and so\\n/// will be modified by reference internally. This is important for gas\\n/// efficiency; the stack, arguments and stackIndex will likely be mutated by\\n/// the running script.\\n/// @param stackIndex Opcodes write to the stack at the stack index and can\\n/// consume from the stack by decrementing the index and reading between the\\n/// old and new stack index.\\n/// IMPORANT: The stack is never zeroed out so the index must be used to\\n/// find the \\\"top\\\" of the stack as the result of an `eval`.\\n/// @param stack Stack is the general purpose runtime state that opcodes can\\n/// read from and write to according to their functionality.\\n/// @param sources Sources available to be executed by `eval`.\\n/// Notably `ZIPMAP` can also select a source to execute by index.\\n/// @param constants Constants that can be copied to the stack by index by\\n/// `VAL`.\\n/// @param arguments `ZIPMAP` populates arguments which can be copied to the\\n/// stack by `VAL`.\\nstruct State {\\n    uint256 stackIndex;\\n    uint256[] stack;\\n    bytes[] sources;\\n    uint256[] constants;\\n    uint256[] arguments;\\n}\\n\\n/// @dev Number of provided opcodes for `RainVM`.\\nuint256 constant RAIN_VM_OPS_LENGTH = 5;\\n\\n/// @title RainVM\\n/// @notice micro VM for implementing and executing custom contract DSLs.\\n/// Libraries and contracts map opcodes to `view` functionality then RainVM\\n/// runs rain scripts using these opcodes. Rain scripts dispatch as pairs of\\n/// bytes. The first byte is an opcode to run and the second byte is a value\\n/// the opcode can use contextually to inform how to run. Typically opcodes\\n/// will read/write to the stack to produce some meaningful final state after\\n/// all opcodes have been dispatched.\\n///\\n/// The only thing required to run a rain script is a `State` struct to pass\\n/// to `eval`, and the index of the source to run. Additional context can\\n/// optionally be provided to be used by opcodes. For example, an `ITier`\\n/// contract can take the input of `report`, abi encode it as context, then\\n/// expose a local opcode that copies this account to the stack. The state will\\n/// be mutated by reference rather than returned by `eval`, this is to make it\\n/// very clear to implementers that the inline mutation is occurring.\\n///\\n/// Rain scripts run \\\"top to bottom\\\", i.e. \\\"left to right\\\".\\n/// See the tests for examples on how to construct rain script in JavaScript\\n/// then pass to `ImmutableSource` contracts deployed by a factory that then\\n/// run `eval` to produce a final value.\\n///\\n/// There are only 4 \\\"core\\\" opcodes for `RainVM`:\\n/// - `0`: Skip self and optionally additional opcodes, `0 0` is a noop.\\n///   DEPRECATED! DON'T USE SKIP!\\n///   See https://github.com/beehive-innovation/rain-protocol/issues/262\\n/// - `1`: Copy value from either `constants` or `arguments` at index `operand`\\n///   to the top of the stack. High bit of `operand` is `0` for `constants` and\\n///   `1` for `arguments`.\\n/// - `2`: Duplicates the value at stack index `operand_` to the top of the\\n///   stack.\\n/// - `3`: Zipmap takes N values from the stack, interprets each as an array of\\n///   configurable length, then zips them into `arguments` and maps a source\\n///   from `sources` over these. See `zipmap` for more details.\\n///\\n/// To do anything useful the contract that inherits `RainVM` needs to provide\\n/// opcodes to build up an internal DSL. This may sound complex but it only\\n/// requires mapping opcode integers to functions to call, and reading/writing\\n/// values to the stack as input/output for these functions. Further, opcode\\n/// packs are provided in rain that any inheriting contract can use as a normal\\n/// solidity library. See `MathOps.sol` opcode pack and the\\n/// `CalculatorTest.sol` test contract for an example of how to dispatch\\n/// opcodes and handle the results in a wrapping contract.\\n///\\n/// RainVM natively has no concept of branching logic such as `if` or loops.\\n/// An opcode pack could implement these similar to the core zipmap by lazily\\n/// evaluating a source from `sources` based on some condition, etc. Instead\\n/// some simpler, eagerly evaluated selection tools such as `min` and `max` in\\n/// the `MathOps` opcode pack are provided. Future versions of `RainVM` MAY\\n/// implement lazy `if` and other similar patterns.\\n///\\n/// The `eval` function is `view` because rain scripts are expected to compute\\n/// results only without modifying any state. The contract wrapping the VM is\\n/// free to mutate as usual. This model encourages exposing only read-only\\n/// functionality to end-user deployers who provide scripts to a VM factory.\\n/// Removing all writes removes a lot of potential foot-guns for rain script\\n/// authors and allows VM contract authors to reason more clearly about the\\n/// input/output of the wrapping solidity code.\\n///\\n/// Internally `RainVM` makes heavy use of unchecked math and assembly logic\\n/// as the opcode dispatch logic runs on a tight loop and so gas costs can ramp\\n/// up very quickly. Implementing contracts and opcode packs SHOULD require\\n/// that opcodes they receive do not exceed the codes they are expecting.\\nabstract contract RainVM {\\n    /// DEPRECATED! DONT USE SKIP!\\n    /// `0` is a skip as this is the fallback value for unset solidity bytes.\\n    /// Any additional \\\"whitespace\\\" in rain scripts will be noops as `0 0` is\\n    /// \\\"skip self\\\". The val can be used to skip additional opcodes but take\\n    /// care to not underflow the source itself.\\n    uint256 private constant OP_SKIP = 0;\\n    /// `1` copies a value either off `constants` or `arguments` to the top of\\n    /// the stack. The high bit of the operand specifies which, `0` for\\n    /// `constants` and `1` for `arguments`.\\n    uint256 private constant OP_VAL = 1;\\n    /// `2` Duplicates the value at index `operand_` to the top of the stack.\\n    uint256 private constant OP_DUP = 2;\\n    /// `3` takes N values off the stack, interprets them as an array then zips\\n    /// and maps a source from `sources` over them. The source has access to\\n    /// the original constants using `1 0` and to zipped arguments as `1 1`.\\n    uint256 private constant OP_ZIPMAP = 3;\\n    /// `4` ABI encodes the entire stack and logs it to the hardhat console.\\n    uint256 private constant OP_DEBUG = 4;\\n\\n    /// Zipmap is rain script's native looping construct.\\n    /// N values are taken from the stack as `uint256` then split into `uintX`\\n    /// values where X is configurable by `operand_`. Each 1 increment in the\\n    /// operand size config doubles the number of items in the implied arrays.\\n    /// For example, size 0 is 1 `uint256` value, size 1 is\\n    /// `2x `uint128` values, size 2 is 4x `uint64` values and so on.\\n    ///\\n    /// The implied arrays are zipped and then copied into `arguments` and\\n    /// mapped over with a source from `sources`. Each iteration of the mapping\\n    /// copies values into `arguments` from index `0` but there is no attempt\\n    /// to zero out any values that may already be in the `arguments` array.\\n    /// It is the callers responsibility to ensure that the `arguments` array\\n    /// is correctly sized and populated for the mapped source.\\n    ///\\n    /// The `operand_` for the zipmap opcode is split into 3 components:\\n    /// - 3 low bits: The index of the source to use from `sources`.\\n    /// - 2 middle bits: The size of the loop, where 0 is 1 iteration\\n    /// - 3 high bits: The number of vals to be zipped from the stack where 0\\n    ///   is 1 value to be zipped.\\n    ///\\n    /// This is a separate function to avoid blowing solidity compile stack.\\n    /// In the future it may be moved inline to `eval` for gas efficiency.\\n    ///\\n    /// See https://en.wikipedia.org/wiki/Zipping_(computer_science)\\n    /// See https://en.wikipedia.org/wiki/Map_(higher-order_function)\\n    /// @param context_ Domain specific context the wrapping contract can\\n    /// provide to passthrough back to its own opcodes.\\n    /// @param state_ The execution state of the VM.\\n    /// @param operand_ The operand_ associated with this dispatch to zipmap.\\n    function zipmap(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            uint256 sourceIndex_;\\n            uint256 stepSize_;\\n            uint256 offset_;\\n            uint256 valLength_;\\n            // assembly here to shave some gas.\\n            assembly {\\n                // rightmost 3 bits are the index of the source to use from\\n                // sources in `state_`.\\n                sourceIndex_ := and(operand_, 0x07)\\n                // bits 4 and 5 indicate size of the loop. Each 1 increment of\\n                // the size halves the bits of the arguments to the zipmap.\\n                // e.g. 256 `stepSize_` would copy all 256 bits of the uint256\\n                // into args for the inner `eval`. A loop size of `1` would\\n                // shift `stepSize_` by 1 (halving it) and meaning the uint256\\n                // is `eval` as 2x 128 bit values (runs twice). A loop size of\\n                // `2` would run 4 times as 64 bit values, and so on.\\n                //\\n                // Slither false positive here for the shift of constant `256`.\\n                // slither-disable-next-line incorrect-shift\\n                stepSize_ := shr(and(shr(3, operand_), 0x03), 256)\\n                // `offset_` is used by the actual bit shifting operations and\\n                // is precalculated here to save some gas as this is a hot\\n                // performance path.\\n                offset_ := sub(256, stepSize_)\\n                // bits 5+ determine the number of vals to be zipped. At least\\n                // one value must be provided so a `valLength_` of `0` is one\\n                // value to loop over.\\n                valLength_ := add(shr(5, operand_), 1)\\n            }\\n            state_.stackIndex -= valLength_;\\n\\n            uint256[] memory baseVals_ = new uint256[](valLength_);\\n            for (uint256 a_ = 0; a_ < valLength_; a_++) {\\n                baseVals_[a_] = state_.stack[state_.stackIndex + a_];\\n            }\\n\\n            for (uint256 step_ = 0; step_ < 256; step_ += stepSize_) {\\n                for (uint256 a_ = 0; a_ < valLength_; a_++) {\\n                    state_.arguments[a_] =\\n                        (baseVals_[a_] << (offset_ - step_)) >>\\n                        offset_;\\n                }\\n                eval(context_, state_, sourceIndex_);\\n            }\\n        }\\n    }\\n\\n    /// Evaluates a rain script.\\n    /// The main workhorse of the rain VM, `eval` runs any core opcodes and\\n    /// dispatches anything it is unaware of to the implementing contract.\\n    /// For a script to be useful the implementing contract must override\\n    /// `applyOp` and dispatch non-core opcodes to domain specific logic. This\\n    /// could be mathematical operations for a calculator, tier reports for\\n    /// a membership combinator, entitlements for a minting curve, etc.\\n    ///\\n    /// Everything required to coordinate the execution of a rain script to\\n    /// completion is contained in the `State`. The context and source index\\n    /// are provided so the caller can provide additional data and kickoff the\\n    /// opcode dispatch from the correct source in `sources`.\\n    function eval(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 sourceIndex_\\n    ) internal view {\\n        // State needs to start with the stack index at a valid position which\\n        // may not be the case in general.\\n        require(state_.stackIndex <= state_.stack.length, \\\"STACK_OVERFLOW\\\");\\n\\n        // Everything in eval can be checked statically, there are no dynamic\\n        // runtime values read from the stack that can cause out of bounds\\n        // behaviour. E.g. sourceIndex in zipmap and size of a skip are both\\n        // taken from the operand in the source, not the stack. A program that\\n        // operates out of bounds SHOULD be flagged by static code analysis and\\n        // avoided by end-users.\\n        unchecked {\\n            uint256 i_ = 0;\\n            uint256 opcode_;\\n            uint256 operand_;\\n            uint256 len_;\\n            uint256 sourceLocation_;\\n            uint256 constantsLocation_;\\n            uint256 argumentsLocation_;\\n            uint256 stackLocation_;\\n            assembly {\\n                stackLocation_ := mload(add(state_, 0x20))\\n                sourceLocation_ := mload(\\n                    add(\\n                        mload(add(state_, 0x40)),\\n                        add(0x20, mul(sourceIndex_, 0x20))\\n                    )\\n                )\\n                constantsLocation_ := mload(add(state_, 0x60))\\n                argumentsLocation_ := mload(add(state_, 0x80))\\n                len_ := mload(sourceLocation_)\\n            }\\n\\n            // Loop until complete.\\n            while (i_ < len_) {\\n                assembly {\\n                    i_ := add(i_, 2)\\n                    let op_ := mload(add(sourceLocation_, i_))\\n                    opcode_ := byte(30, op_)\\n                    operand_ := byte(31, op_)\\n                }\\n                if (opcode_ < RAIN_VM_OPS_LENGTH) {\\n                    if (opcode_ == OP_VAL) {\\n                        assembly {\\n                            let location_ := argumentsLocation_\\n                            if iszero(and(operand_, 0x80)) {\\n                                location_ := constantsLocation_\\n                            }\\n\\n                            let valIndex_ := and(operand_, 0x7F)\\n                            // Attempted to read beyond constants/arguments.\\n                            if iszero(lt(valIndex_, mload(location_))) {\\n                                revert(0, 0)\\n                            }\\n\\n                            let stackIndex_ := mload(state_)\\n                            // Copy value to stack.\\n                            mstore(\\n                                add(\\n                                    stackLocation_,\\n                                    add(0x20, mul(stackIndex_, 0x20))\\n                                ),\\n                                mload(\\n                                    add(\\n                                        location_,\\n                                        add(0x20, mul(valIndex_, 0x20))\\n                                    )\\n                                )\\n                            )\\n                            mstore(state_, add(stackIndex_, 1))\\n                        }\\n                    } else if (opcode_ == OP_DUP) {\\n                        assembly {\\n                            let stackIndex_ := mload(state_)\\n                            // DUPing data past the values on the stack.\\n                            if iszero(lt(operand_, stackIndex_)) {\\n                                revert(0, 0)\\n                            }\\n                            mstore(\\n                                add(\\n                                    stackLocation_,\\n                                    add(0x20, mul(stackIndex_, 0x20))\\n                                ),\\n                                mload(\\n                                    add(\\n                                        stackLocation_,\\n                                        add(0x20, mul(operand_, 0x20))\\n                                    )\\n                                )\\n                            )\\n                            mstore(state_, add(stackIndex_, 1))\\n                        }\\n                    } else if (opcode_ == OP_ZIPMAP) {\\n                        zipmap(context_, state_, operand_);\\n                    } else if (opcode_ == OP_DEBUG) {\\n                        console.logBytes(abi.encode(state_));\\n                    } else {\\n                        // SKIP was deprecated and is now removed. This is due\\n                        // to skip making it impossible to statically analyse\\n                        // a script to calculate a valid stack length ahead of\\n                        // time.\\n                        require(opcode_ != OP_SKIP, \\\"SKIP_REMOVED\\\");\\n                    }\\n                } else {\\n                    applyOp(context_, state_, opcode_, operand_);\\n                }\\n                // The stack index may be the same as the length as this means\\n                // the stack is full. But we cannot write past the end of the\\n                // stack. This also catches a stack index that underflows due\\n                // to unchecked or assembly math. This check MAY be redundant\\n                // with standard OOB checks on the stack array due to indexing\\n                // into it, but is a required guard in the case of VM assembly.\\n                // Future versions of the VM will precalculate all stack\\n                // movements at deploy time rather than runtime as this kind of\\n                // accounting adds nontrivial gas across longer scripts that\\n                // include many opcodes.\\n                // Note: This check would NOT be safe in the case that some\\n                // opcode used assembly in a way that can underflow the stack\\n                // as this would allow a malicious rain script to write to the\\n                // stack length and/or the stack index.\\n                require(\\n                    state_.stackIndex <= state_.stack.length,\\n                    \\\"STACK_OVERFLOW\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /// Every contract that implements `RainVM` should override `applyOp` so\\n    /// that useful opcodes are available to script writers.\\n    /// For an example of a simple and efficient `applyOp` implementation that\\n    /// dispatches over several opcode packs see `CalculatorTest.sol`.\\n    /// Implementing contracts are encouraged to handle the dispatch with\\n    /// unchecked math as the dispatch is a critical performance path and\\n    /// default solidity checked math can significantly increase gas cost for\\n    /// each opcode dispatched. Consider that a single zipmap could loop over\\n    /// dozens of opcode dispatches internally.\\n    /// Stack is modified by reference NOT returned.\\n    /// @param context_ Bytes that the implementing contract can passthrough\\n    /// to be ready internally by its own opcodes. RainVM ignores the context.\\n    /// @param state_ The RainVM state that tracks the execution progress.\\n    /// @param opcode_ The current opcode to dispatch.\\n    /// @param operand_ Additional information to inform the opcode dispatch.\\n    function applyOp(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view virtual {} //solhint-disable-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0xa89ed8b28be8125868d40990388613b99f89a4f00f4e1be00c70b0aca7bc02d8\",\"license\":\"CAL\"},\"contracts/vm/libraries/VMState.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../RainVM.sol\\\";\\nimport \\\"../../sstore2/SSTORE2.sol\\\";\\n\\n/// Config required to build a new `State`.\\n/// @param sources Sources verbatim.\\n/// @param constants Constants verbatim.\\n/// @param stackLength Sets the length of the uint256[] of the stack.\\n/// @param argumentsLength Sets the length of the uint256[] of the arguments.\\nstruct StateConfig {\\n    bytes[] sources;\\n    uint256[] constants;\\n    uint256 stackLength;\\n    uint256 argumentsLength;\\n}\\n\\n/// @title StateSnapshot\\n/// @notice Deploys everything required to build a fresh `State` for rainVM\\n/// execution as an evm contract onchain. Uses SSTORE2 to abi encode rain\\n/// script into evm bytecode, then stores an immutable pointer to the resulting\\n/// contract. Allows arbitrary length rain script source, constants and stack.\\n/// Gas scales for reads much better for longer data than attempting to put\\n/// all the source into storage.\\n/// See https://github.com/0xsequence/sstore2\\ncontract VMState {\\n    /// A new shapshot has been deployed onchain.\\n    /// @param sender `msg.sender` of the deployer.\\n    /// @param pointer Pointer to the onchain snapshot contract.\\n    /// @param state `State` of the snapshot that was deployed.\\n    event Snapshot(address sender, address pointer, State state);\\n\\n    /// Builds a new `State` from `StateConfig`.\\n    /// Empty stack and arguments with stack index 0.\\n    /// @param config_ State config to build the new `State`.\\n    function _newState(StateConfig memory config_)\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        require(config_.sources.length > 0, \\\"0_SOURCES\\\");\\n        return\\n            State(\\n                0,\\n                new uint256[](config_.stackLength),\\n                config_.sources,\\n                config_.constants,\\n                new uint256[](config_.argumentsLength)\\n            );\\n    }\\n\\n    /// Snapshot a RainVM state as an immutable onchain contract.\\n    /// Usually `State` will be new as per `newState` but can be a snapshot of\\n    /// an \\\"in flight\\\" execution state also.\\n    /// @param state_ The state to snapshot.\\n    function _snapshot(State memory state_) internal returns (address) {\\n        address pointer_ = SSTORE2.write(abi.encode(state_));\\n        emit Snapshot(msg.sender, pointer_, state_);\\n        return pointer_;\\n    }\\n\\n    /// Builds a fresh state for rainVM execution from all construction data.\\n    /// This can be passed directly to `eval` for a `RainVM` contract.\\n    /// @param pointer_ The pointer (address) of the snapshot to restore.\\n    function _restore(address pointer_) internal view returns (State memory) {\\n        return abi.decode(SSTORE2.read(pointer_), (State));\\n    }\\n}\\n\",\"keccak256\":\"0x1540767aef3d09c8806fda50ccc7b596eba9a0b5b5bbe4f00f7b2bf84ecb9b8c\",\"license\":\"CAL\"},\"contracts/vm/ops/AllStandardOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State, RainVM, RAIN_VM_OPS_LENGTH} from \\\"../RainVM.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {EVMConstantOps, EVM_CONSTANT_OPS_LENGTH} from \\\"./evm/EVMConstantOps.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {FixedPointMathOps, FIXED_POINT_MATH_OPS_LENGTH} from \\\"./math/FixedPointMathOps.sol\\\";\\nimport {IERC20Ops, IERC20_OPS_LENGTH} from \\\"./token/IERC20Ops.sol\\\";\\nimport {IERC721Ops, IERC721_OPS_LENGTH} from \\\"./token/IERC721Ops.sol\\\";\\nimport {IERC1155Ops, IERC1155_OPS_LENGTH} from \\\"./token/IERC1155Ops.sol\\\";\\nimport {LogicOps, LOGIC_OPS_LENGTH} from \\\"./math/LogicOps.sol\\\";\\nimport {MathOps, MATH_OPS_LENGTH} from \\\"./math/MathOps.sol\\\";\\nimport {TierOps, TIER_OPS_LENGTH} from \\\"./tier/TierOps.sol\\\";\\n\\nuint256 constant ALL_STANDARD_OPS_START = RAIN_VM_OPS_LENGTH;\\nuint256 constant FIXED_POINT_MATH_OPS_START = EVM_CONSTANT_OPS_LENGTH;\\nuint256 constant MATH_OPS_START = FIXED_POINT_MATH_OPS_START +\\n    FIXED_POINT_MATH_OPS_LENGTH;\\nuint256 constant LOGIC_OPS_START = MATH_OPS_START + MATH_OPS_LENGTH;\\nuint256 constant TIER_OPS_START = LOGIC_OPS_START + LOGIC_OPS_LENGTH;\\nuint256 constant IERC20_OPS_START = TIER_OPS_START + TIER_OPS_LENGTH;\\nuint256 constant IERC721_OPS_START = IERC20_OPS_START + IERC20_OPS_LENGTH;\\nuint256 constant IERC1155_OPS_START = IERC721_OPS_START + IERC721_OPS_LENGTH;\\nuint256 constant ALL_STANDARD_OPS_LENGTH = IERC1155_OPS_START +\\n    IERC1155_OPS_LENGTH;\\n\\n/// @title AllStandardOps\\n/// @notice RainVM opcode pack to expose all other packs.\\nlibrary AllStandardOps {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            if (opcode_ < FIXED_POINT_MATH_OPS_START) {\\n                EVMConstantOps.applyOp(state_, opcode_, operand_);\\n            } else if (opcode_ < TIER_OPS_START) {\\n                if (opcode_ < MATH_OPS_START) {\\n                    FixedPointMathOps.applyOp(\\n                        state_,\\n                        opcode_ - FIXED_POINT_MATH_OPS_START,\\n                        operand_\\n                    );\\n                } else if (opcode_ < LOGIC_OPS_START) {\\n                    MathOps.applyOp(state_, opcode_ - MATH_OPS_START, operand_);\\n                } else {\\n                    LogicOps.applyOp(\\n                        state_,\\n                        opcode_ - LOGIC_OPS_START,\\n                        operand_\\n                    );\\n                }\\n            } else if (opcode_ < IERC20_OPS_START) {\\n                TierOps.applyOp(state_, opcode_ - TIER_OPS_START, operand_);\\n            } else {\\n                if (opcode_ < IERC721_OPS_START) {\\n                    IERC20Ops.applyOp(\\n                        state_,\\n                        opcode_ - IERC20_OPS_START,\\n                        operand_\\n                    );\\n                } else if (opcode_ < IERC1155_OPS_START) {\\n                    IERC721Ops.applyOp(\\n                        state_,\\n                        opcode_ - IERC721_OPS_START,\\n                        operand_\\n                    );\\n                } else {\\n                    IERC1155Ops.applyOp(\\n                        state_,\\n                        opcode_ - IERC1155_OPS_START,\\n                        operand_\\n                    );\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4893d114d3e41273ae705428529c209dc72e9ff2790bfc1f4843155111affb0\",\"license\":\"CAL\"},\"contracts/vm/ops/evm/EVMConstantOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\n\\n/// @dev Opcode for the block number.\\nuint256 constant OPCODE_BLOCK_NUMBER = 0;\\n/// @dev Opcode for the block timestamp.\\nuint256 constant OPCODE_BLOCK_TIMESTAMP = 1;\\n/// @dev Opcode for the `msg.sender`.\\nuint256 constant OPCODE_SENDER = 2;\\n/// @dev Opcode for `this` address of the current contract.\\nuint256 constant OPCODE_THIS_ADDRESS = 3;\\n/// @dev Number of provided opcodes for `BlockOps`.\\nuint256 constant EVM_CONSTANT_OPS_LENGTH = 4;\\n\\n/// @title EVMConstantOps\\n/// @notice RainVM opcode pack to access constants from the EVM environment.\\nlibrary EVMConstantOps {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < EVM_CONSTANT_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n            // Stack the current `block.number`.\\n            if (opcode_ == OPCODE_BLOCK_NUMBER) {\\n                state_.stack[state_.stackIndex] = block.number;\\n            }\\n            // Stack the current `block.timestamp`.\\n            else if (opcode_ == OPCODE_BLOCK_TIMESTAMP) {\\n                // solhint-disable-next-line not-rely-on-time\\n                state_.stack[state_.stackIndex] = block.timestamp;\\n            } else if (opcode_ == OPCODE_SENDER) {\\n                // Stack the `msg.sender`.\\n                state_.stack[state_.stackIndex] = uint256(uint160(msg.sender));\\n            } else {\\n                state_.stack[state_.stackIndex] = uint256(\\n                    uint160(address(this))\\n                );\\n            }\\n            state_.stackIndex++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7d9c8fc47e7dc10839cc8c3f88b1d6442c0115a4f7cdce4103cfadcd09f2d00\",\"license\":\"CAL\"},\"contracts/vm/ops/math/FixedPointMathOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\nimport \\\"../../../math/FixedPointMath.sol\\\";\\n\\n/// @dev Opcode for multiplication.\\nuint256 constant OPCODE_SCALE18_MUL = 0;\\n/// @dev Opcode for division.\\nuint256 constant OPCODE_SCALE18_DIV = 1;\\n/// @dev Opcode to rescale some fixed point number to 18 OOMs in situ.\\nuint256 constant OPCODE_SCALE18 = 2;\\n/// @dev Opcode to rescale an 18 OOMs fixed point number to scale N.\\nuint256 constant OPCODE_SCALEN = 3;\\n/// @dev Opcode to rescale an arbitrary fixed point number by some OOMs.\\nuint256 constant OPCODE_SCALE_BY = 4;\\n/// @dev Opcode for stacking the definition of one.\\nuint256 constant OPCODE_ONE = 5;\\n/// @dev Opcode for stacking number of fixed point decimals used.\\nuint256 constant OPCODE_DECIMALS = 6;\\n/// @dev Number of provided opcodes for `FixedPointMathOps`.\\nuint256 constant FIXED_POINT_MATH_OPS_LENGTH = 7;\\n\\n/// @title FixedPointMathOps\\n/// @notice RainVM opcode pack to perform basic checked math operations.\\n/// Underflow and overflow will error as per default solidity behaviour.\\nlibrary FixedPointMathOps {\\n    using FixedPointMath for uint256;\\n\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal pure {\\n        unchecked {\\n            require(opcode_ < FIXED_POINT_MATH_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n\\n            if (opcode_ < OPCODE_SCALE18) {\\n                uint256 baseIndex_ = state_.stackIndex - 2;\\n                if (opcode_ == OPCODE_SCALE18_MUL) {\\n                    state_.stack[baseIndex_] =\\n                        state_.stack[baseIndex_].scale18(operand_) *\\n                        state_.stack[baseIndex_ + 1];\\n                } else if (opcode_ == OPCODE_SCALE18_DIV) {\\n                    state_.stack[baseIndex_] =\\n                        state_.stack[baseIndex_].scale18(operand_) /\\n                        state_.stack[baseIndex_ + 1];\\n                }\\n                state_.stackIndex--;\\n            } else if (opcode_ < OPCODE_ONE) {\\n                uint256 baseIndex_ = state_.stackIndex - 1;\\n                if (opcode_ == OPCODE_SCALE18) {\\n                    state_.stack[baseIndex_] = state_.stack[baseIndex_].scale18(\\n                        operand_\\n                    );\\n                } else if (opcode_ == OPCODE_SCALEN) {\\n                    state_.stack[baseIndex_] = state_.stack[baseIndex_].scaleN(\\n                        operand_\\n                    );\\n                } else if (opcode_ == OPCODE_SCALE_BY) {\\n                    state_.stack[baseIndex_] = state_.stack[baseIndex_].scaleBy(\\n                        int8(uint8(operand_))\\n                    );\\n                }\\n            } else {\\n                if (opcode_ == OPCODE_ONE) {\\n                    state_.stack[state_.stackIndex] = FP_ONE;\\n                    state_.stackIndex++;\\n                } else if (opcode_ == OPCODE_DECIMALS) {\\n                    state_.stack[state_.stackIndex] = FP_DECIMALS;\\n                    state_.stackIndex++;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xee40001a9c12bf4c78da5b8b555edb14ebb5c578386049e156b6e94f6cde4e01\",\"license\":\"CAL\"},\"contracts/vm/ops/math/LogicOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\n\\n/// @dev Number of provided opcodes for `LogicOps`.\\n/// The opcodes are NOT listed on the library as they are all internal to\\n/// the assembly and yul doesn't seem to support using solidity constants\\n/// as switch case values.\\nuint256 constant LOGIC_OPS_LENGTH = 7;\\n\\n/// @title LogicOps\\n/// @notice RainVM opcode pack to perform some basic logic operations.\\nlibrary LogicOps {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal pure {\\n        require(opcode_ < LOGIC_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n        assembly {\\n            let stackIndex_ := mload(state_)\\n            // This is the start of the stack, adjusted for the leading length\\n            // 32 bytes.\\n            // i.e. reading from stackLocation_ gives the first value of the\\n            // stack and NOT its length.\\n            let stackTopLocation_ := add(\\n                // pointer to the stack.\\n                mload(add(state_, 0x20)),\\n                add(\\n                    // length of the stack\\n                    0x20,\\n                    // index of the stack\\n                    mul(stackIndex_, 0x20)\\n                )\\n            )\\n\\n            switch opcode_\\n            // ISZERO\\n            case 0 {\\n                // The stackIndex_ doesn't change for iszero as there is\\n                // one input and output. ISZERO reads one value so the stack\\n                // index needs to be nonzero.\\n                if iszero(stackIndex_) {\\n                    revert(0, 0)\\n                }\\n                let location_ := sub(stackTopLocation_, 0x20)\\n                mstore(location_, iszero(mload(location_)))\\n            }\\n            // EAGER_IF\\n            // Eager because BOTH x_ and y_ must be eagerly evaluated\\n            // before EAGER_IF will select one of them. If both x_ and y_\\n            // are cheap (e.g. constant values) then this may also be the\\n            // simplest and cheapest way to select one of them.\\n            case 1 {\\n                // EAGER_IF reads 3 values.\\n                if lt(stackIndex_, 3) {\\n                    revert(0, 0)\\n                }\\n                // decrease stack index by 2 (3 inputs, 1 output)\\n                mstore(state_, sub(stackIndex_, 2))\\n                let location_ := sub(stackTopLocation_, 0x60)\\n                switch mload(location_)\\n                // false => use second value\\n                case 0 {\\n                    mstore(location_, mload(add(location_, 0x40)))\\n                }\\n                // true => use first value\\n                default {\\n                    mstore(location_, mload(add(location_, 0x20)))\\n                }\\n            }\\n            // EQUAL_TO\\n            case 2 {\\n                // EQUAL_TO reads 2 values.\\n                if lt(stackIndex_, 2) {\\n                    revert(0, 0)\\n                }\\n                // decrease stack index by 1 (2 inputs, 1 output)\\n                mstore(state_, sub(stackIndex_, 1))\\n                let location_ := sub(stackTopLocation_, 0x40)\\n                mstore(\\n                    location_,\\n                    eq(mload(location_), mload(add(location_, 0x20)))\\n                )\\n            }\\n            // LESS_THAN\\n            case 3 {\\n                // LESS_THAN reads 2 values.\\n                if lt(stackIndex_, 2) {\\n                    revert(0, 0)\\n                }\\n                // decrease stack index by 1 (2 inputs, 1 output)\\n                mstore(state_, sub(stackIndex_, 1))\\n                let location_ := sub(stackTopLocation_, 0x40)\\n                mstore(\\n                    location_,\\n                    lt(mload(location_), mload(add(location_, 0x20)))\\n                )\\n            }\\n            // GREATER_THAN\\n            case 4 {\\n                // GREATER_THAN reads 2 values.\\n                if lt(stackIndex_, 2) {\\n                    revert(0, 0)\\n                }\\n                // decrease stack index by 1 (2 inputs, 1 output)\\n                mstore(state_, sub(stackIndex_, 1))\\n                let location_ := sub(stackTopLocation_, 0x40)\\n                mstore(\\n                    location_,\\n                    gt(mload(location_), mload(add(location_, 0x20)))\\n                )\\n            }\\n            // EVERY\\n            // EVERY is either the first item if every item is nonzero, else 0.\\n            // operand_ is the length of items to check.\\n            // EVERY of length `0` is a noop.\\n            case 5 {\\n                // EVERY reads operand_ values.\\n                if lt(stackIndex_, operand_) {\\n                    revert(0, 0)\\n                }\\n                if iszero(iszero(operand_)) {\\n                    // decrease stack index by 1 less than operand_\\n                    mstore(state_, sub(stackIndex_, sub(operand_, 1)))\\n                    let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n                    for {\\n                        let cursor_ := location_\\n                    } lt(cursor_, stackTopLocation_) {\\n                        cursor_ := add(cursor_, 0x20)\\n                    } {\\n                        // If anything is zero then EVERY is a failed check.\\n                        if iszero(mload(cursor_)) {\\n                            mstore(location_, 0)\\n                            break\\n                        }\\n                    }\\n                }\\n            }\\n            // ANY\\n            // ANY is the first nonzero item, else 0.\\n            // operand_ id the length of items to check.\\n            // ANY of length `0` is a noop.\\n            case 6 {\\n                // ANY reads operand_ values.\\n                if lt(stackIndex_, operand_) {\\n                    revert(0, 0)\\n                }\\n                if iszero(iszero(operand_)) {\\n                    // decrease stack index by 1 less than the operand_\\n                    mstore(state_, sub(stackIndex_, sub(operand_, 1)))\\n                    let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n                    for {\\n                        let cursor_ := location_\\n                    } lt(cursor_, stackTopLocation_) {\\n                        cursor_ := add(cursor_, 0x20)\\n                    } {\\n                        // If anything is NOT zero then ANY is a successful\\n                        // check and can short-circuit.\\n                        let item_ := mload(cursor_)\\n                        if iszero(iszero(item_)) {\\n                            // Write the usable value to the top of the stack.\\n                            mstore(location_, item_)\\n                            break\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf4c3187c76e8e7e98c02452933000177894dd3285508894fc131de85c80aa9ae\",\"license\":\"CAL\"},\"contracts/vm/ops/math/MathOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\nimport \\\"../../../math/SaturatingMath.sol\\\";\\n\\n/// @dev Opcode for addition.\\nuint256 constant OPCODE_ADD = 0;\\n/// @dev Opcode for saturating addition.\\nuint256 constant OPCODE_SATURATING_ADD = 1;\\n/// @dev Opcode for subtraction.\\nuint256 constant OPCODE_SUB = 2;\\n/// @dev Opcode for saturating subtraction.\\nuint256 constant OPCODE_SATURATING_SUB = 3;\\n/// @dev Opcode for multiplication.\\nuint256 constant OPCODE_MUL = 4;\\n/// @dev Opcode for saturating multiplication.\\nuint256 constant OPCODE_SATURATING_MUL = 5;\\n/// @dev Opcode for division.\\nuint256 constant OPCODE_DIV = 6;\\n/// @dev Opcode for modulo.\\nuint256 constant OPCODE_MOD = 7;\\n/// @dev Opcode for exponentiation.\\nuint256 constant OPCODE_EXP = 8;\\n/// @dev Opcode for minimum.\\nuint256 constant OPCODE_MIN = 9;\\n/// @dev Opcode for maximum.\\nuint256 constant OPCODE_MAX = 10;\\n/// @dev Number of provided opcodes for `MathOps`.\\nuint256 constant MATH_OPS_LENGTH = 11;\\n\\n/// @title MathOps\\n/// @notice RainVM opcode pack to perform basic checked math operations.\\n/// Underflow and overflow will error as per default solidity behaviour.\\n/// SaturatingMath opcodes are provided as \\\"core\\\" math because the VM has no\\n/// ability to lazily execute code, which means that overflows cannot be\\n/// guarded with conditional logic. Saturation is a quick and dirty solution to\\n/// overflow that is valid in many situations.\\nlibrary MathOps {\\n    using SaturatingMath for uint256;\\n\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal pure {\\n        require(opcode_ < MATH_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n        uint256 baseIndex_;\\n        uint256 top_;\\n        unchecked {\\n            baseIndex_ = state_.stackIndex - operand_;\\n            top_ = state_.stackIndex - 1;\\n        }\\n        uint256 cursor_ = baseIndex_;\\n        uint256 accumulator_ = state_.stack[cursor_];\\n\\n        // Addition.\\n        if (opcode_ == OPCODE_ADD) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ += state_.stack[cursor_];\\n            }\\n        }\\n        // Saturating addition.\\n        else if (opcode_ == OPCODE_SATURATING_ADD) {\\n            unchecked {\\n                while (cursor_ < top_ && accumulator_ < type(uint256).max) {\\n                    cursor_++;\\n                    accumulator_ = accumulator_.saturatingAdd(\\n                        state_.stack[cursor_]\\n                    );\\n                }\\n            }\\n        }\\n        // Subtraction.\\n        else if (opcode_ == OPCODE_SUB) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ -= state_.stack[cursor_];\\n            }\\n        }\\n        // Saturating subtraction.\\n        else if (opcode_ == OPCODE_SATURATING_SUB) {\\n            unchecked {\\n                while (cursor_ < top_ && 0 < accumulator_) {\\n                    cursor_++;\\n                    accumulator_ = accumulator_.saturatingSub(\\n                        state_.stack[cursor_]\\n                    );\\n                }\\n            }\\n        }\\n        // Multiplication.\\n        // Slither false positive here complaining about dividing before\\n        // multiplying but both are mututally exclusive according to `opcode_`.\\n        else if (opcode_ == OPCODE_MUL) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ *= state_.stack[cursor_];\\n            }\\n        }\\n        // Saturating multiplication.\\n        else if (opcode_ == OPCODE_SATURATING_MUL) {\\n            unchecked {\\n                while (cursor_ < top_ && accumulator_ < type(uint256).max) {\\n                    cursor_++;\\n                    accumulator_ = accumulator_.saturatingMul(\\n                        state_.stack[cursor_]\\n                    );\\n                }\\n            }\\n        }\\n        // Division.\\n        else if (opcode_ == OPCODE_DIV) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ /= state_.stack[cursor_];\\n            }\\n        }\\n        // Modulo.\\n        else if (opcode_ == OPCODE_MOD) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ %= state_.stack[cursor_];\\n            }\\n        }\\n        // Exponentiation.\\n        else if (opcode_ == OPCODE_EXP) {\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                accumulator_ = accumulator_**state_.stack[cursor_];\\n            }\\n        }\\n        // Minimum.\\n        else if (opcode_ == OPCODE_MIN) {\\n            uint256 item_;\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                item_ = state_.stack[cursor_];\\n                if (item_ < accumulator_) {\\n                    accumulator_ = item_;\\n                }\\n            }\\n        }\\n        // Maximum.\\n        else if (opcode_ == OPCODE_MAX) {\\n            uint256 item_;\\n            while (cursor_ < top_) {\\n                unchecked {\\n                    cursor_++;\\n                }\\n                item_ = state_.stack[cursor_];\\n                if (item_ > accumulator_) {\\n                    accumulator_ = item_;\\n                }\\n            }\\n        }\\n\\n        unchecked {\\n            state_.stack[baseIndex_] = accumulator_;\\n            state_.stackIndex = baseIndex_ + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fad86e0435b18cc5b8986702571779ff1ba54c0fa7fc947e91272dec595eeb8\",\"license\":\"CAL\"},\"contracts/vm/ops/tier/TierOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\nimport \\\"../../../tier/libraries/TierReport.sol\\\";\\nimport \\\"../../../tier/libraries/TierwiseCombine.sol\\\";\\n\\n/// @dev Opcode to call `report` on an `ITier` contract.\\nuint256 constant OPCODE_REPORT = 0;\\n/// @dev Opcode to stack a report that has never been held for all tiers.\\nuint256 constant OPCODE_NEVER = 1;\\n/// @dev Opcode to stack a report that has always been held for all tiers.\\nuint256 constant OPCODE_ALWAYS = 2;\\n/// @dev Opcode to calculate the tierwise diff of two reports.\\nuint256 constant OPCODE_SATURATING_DIFF = 3;\\n/// @dev Opcode to update the blocks over a range of tiers for a report.\\nuint256 constant OPCODE_UPDATE_BLOCKS_FOR_TIER_RANGE = 4;\\n/// @dev Opcode to tierwise select the best block lte a reference block.\\nuint256 constant OPCODE_SELECT_LTE = 5;\\n/// @dev Number of provided opcodes for `TierOps`.\\nuint256 constant TIER_OPS_LENGTH = 6;\\n\\n/// @title TierOps\\n/// @notice RainVM opcode pack to operate on tier reports.\\n/// The opcodes all map to functions from `ITier` and associated libraries such\\n/// as `TierConstants`, `TierwiseCombine`, and `TierReport`. For each, the\\n/// order of consumed values on the stack corresponds to the order of arguments\\n/// to interface/library functions.\\nlibrary TierOps {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < TIER_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n            uint256 baseIndex_;\\n            // Stack the report returned by an `ITier` contract.\\n            // Top two stack vals are used as `ITier` contract and address\\n            // to check the report for.\\n            if (opcode_ == OPCODE_REPORT) {\\n                state_.stackIndex -= 1;\\n                baseIndex_ = state_.stackIndex - 1;\\n                state_.stack[baseIndex_] = ITier(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).report(address(uint160(state_.stack[baseIndex_ + 1])));\\n            }\\n            // Stack a report that has never been held at any tier.\\n            else if (opcode_ == OPCODE_NEVER) {\\n                state_.stack[state_.stackIndex] = TierConstants.NEVER_REPORT;\\n                state_.stackIndex++;\\n            }\\n            // Stack a report that has always been held at every tier.\\n            else if (opcode_ == OPCODE_ALWAYS) {\\n                state_.stack[state_.stackIndex] = TierConstants.ALWAYS;\\n                state_.stackIndex++;\\n            }\\n            // Stack the tierwise saturating subtraction of two reports.\\n            // If the older report is newer than newer report the result will\\n            // be `0`, else a tierwise diff in blocks will be obtained.\\n            // The older and newer report are taken from the stack.\\n            else if (opcode_ == OPCODE_SATURATING_DIFF) {\\n                state_.stackIndex -= 2;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 newerReport_ = state_.stack[baseIndex_];\\n                uint256 olderReport_ = state_.stack[baseIndex_ + 1];\\n                state_.stack[baseIndex_] = TierwiseCombine.saturatingSub(\\n                    newerReport_,\\n                    olderReport_\\n                );\\n                state_.stackIndex++;\\n            }\\n            // Stacks a report with updated blocks over tier range.\\n            // The start and end tier are taken from the low and high bits of\\n            // the `operand_` respectively.\\n            // The report to update and block number to update to are both\\n            // taken from the stack.\\n            else if (opcode_ == OPCODE_UPDATE_BLOCKS_FOR_TIER_RANGE) {\\n                uint256 startTier_ = operand_ & 0x0f; // & 00001111\\n                uint256 endTier_ = (operand_ >> 4) & 0x0f; // & 00001111\\n                state_.stackIndex -= 2;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 report_ = state_.stack[baseIndex_];\\n                uint256 blockNumber_ = state_.stack[baseIndex_ + 1];\\n                state_.stack[baseIndex_] = TierReport.updateBlocksForTierRange(\\n                    report_,\\n                    startTier_,\\n                    endTier_,\\n                    blockNumber_\\n                );\\n                state_.stackIndex++;\\n            }\\n            // Stacks the result of a `selectLte` combinator.\\n            // All `selectLte` share the same stack and argument handling.\\n            // Takes the `logic_` and `mode_` from the `operand_` high bits.\\n            // `logic_` is the highest bit.\\n            // `mode_` is the 2 highest bits after `logic_`.\\n            // The other bits specify how many values to take from the stack\\n            // as reports to compare against each other and the block number.\\n            else if (opcode_ == OPCODE_SELECT_LTE) {\\n                uint256 logic_ = operand_ >> 7;\\n                uint256 mode_ = (operand_ >> 5) & 0x3; // & 00000011\\n                uint256 reportsLength_ = operand_ & 0x1F; // & 00011111\\n\\n                // Need one more than reports length to include block number.\\n                state_.stackIndex -= reportsLength_ + 1;\\n                baseIndex_ = state_.stackIndex;\\n                uint256 cursor_ = baseIndex_;\\n\\n                uint256[] memory reports_ = new uint256[](reportsLength_);\\n                for (uint256 a_ = 0; a_ < reportsLength_; a_++) {\\n                    reports_[a_] = state_.stack[cursor_];\\n                    cursor_++;\\n                }\\n                uint256 blockNumber_ = state_.stack[cursor_];\\n\\n                state_.stack[baseIndex_] = TierwiseCombine.selectLte(\\n                    reports_,\\n                    blockNumber_,\\n                    logic_,\\n                    mode_\\n                );\\n                state_.stackIndex++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb48a76a41c3cd04c041402e55d9e67e1fa3bc9bff7e64ed79df9bfcc9bb6279\",\"license\":\"CAL\"},\"contracts/vm/ops/token/IERC1155Ops.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/// @dev Opcode for `IERC1155` `balanceOf`.\\nuint256 constant OPCODE_BALANCE_OF = 0;\\n/// @dev Opcode for `IERC1155` `balanceOfBatch`.\\nuint256 constant OPCODE_BALANCE_OF_BATCH = 1;\\n/// @dev Number of provided opcodes for `IERC1155Ops`.\\nuint256 constant IERC1155_OPS_LENGTH = 2;\\n\\n/// @title IERC1155Ops\\n/// @notice RainVM opcode pack to read the IERC1155 interface.\\nlibrary IERC1155Ops {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256 operand_\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < IERC1155_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n\\n            // Stack the return of `balanceOf`.\\n            if (opcode_ == OPCODE_BALANCE_OF) {\\n                state_.stackIndex -= 2;\\n                uint256 baseIndex_ = state_.stackIndex - 1;\\n                state_.stack[baseIndex_] = IERC1155(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).balanceOf(\\n                        address(uint160(state_.stack[baseIndex_ + 1])),\\n                        state_.stack[baseIndex_ + 2]\\n                    );\\n            }\\n            // Stack the return of `balanceOfBatch`.\\n            // Operand will be the length\\n            else if (opcode_ == OPCODE_BALANCE_OF_BATCH) {\\n                uint256 len_ = operand_ + 1;\\n                address[] memory addresses_ = new address[](len_);\\n                uint256[] memory ids_ = new uint256[](len_);\\n\\n                // Consumes (2 * len_ + 1) inputs and produces len_ outputs.\\n                state_.stackIndex = state_.stackIndex - (len_ + 1);\\n                uint256 baseIndex_ = state_.stackIndex - len_;\\n\\n                IERC1155 token_ = IERC1155(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                );\\n                for (uint256 i_ = 0; i_ < len_; i_++) {\\n                    addresses_[i_] = address(\\n                        uint160(state_.stack[baseIndex_ + i_ + 1])\\n                    );\\n                    ids_[i_] = state_.stack[baseIndex_ + len_ + i_ + 1];\\n                }\\n\\n                uint256[] memory balances_ = token_.balanceOfBatch(\\n                    addresses_,\\n                    ids_\\n                );\\n\\n                for (uint256 i_ = 0; i_ < len_; i_++) {\\n                    state_.stack[baseIndex_ + i_] = balances_[i_];\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94ca907fbf0d3b2704b5b26bebda18dfdb63f57129fdc809406d3a1a201f4270\",\"license\":\"CAL\"},\"contracts/vm/ops/token/IERC20Ops.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev Opcode for `IERC20` `balanceOf`.\\nuint256 constant OPCODE_BALANCE_OF = 0;\\n/// @dev Opcode for `IERC20` `totalSupply`.\\nuint256 constant OPCODE_TOTAL_SUPPLY = 1;\\n/// @dev Number of provided opcodes for `IERC20Ops`.\\nuint256 constant IERC20_OPS_LENGTH = 2;\\n\\n/// @title IERC20Ops\\n/// @notice RainVM opcode pack to read the IERC20 interface.\\nlibrary IERC20Ops {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < IERC20_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n\\n            // Stack the return of `balanceOf`.\\n            if (opcode_ == OPCODE_BALANCE_OF) {\\n                state_.stackIndex--;\\n                uint256 baseIndex_ = state_.stackIndex - 1;\\n                state_.stack[baseIndex_] = IERC20(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).balanceOf(address(uint160(state_.stack[state_.stackIndex])));\\n            }\\n            // Stack the return of `totalSupply`.\\n            else if (opcode_ == OPCODE_TOTAL_SUPPLY) {\\n                uint256 baseIndex_ = state_.stackIndex - 1;\\n                state_.stack[baseIndex_] = IERC20(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).totalSupply();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92b910de932cb5d0dfa4f6ed706b72e515487ce1fcb673b53df3d0036329c7c7\",\"license\":\"CAL\"},\"contracts/vm/ops/token/IERC721Ops.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {State} from \\\"../../RainVM.sol\\\";\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @dev Opcode for `IERC721` `balanceOf`.\\nuint256 constant OPCODE_BALANCE_OF = 0;\\n/// @dev Opcode for `IERC721` `ownerOf`.\\nuint256 constant OPCODE_OWNER_OF = 1;\\n/// @dev Number of provided opcodes for `IERC721Ops`.\\nuint256 constant IERC721_OPS_LENGTH = 2;\\n\\n/// @title IERC721Ops\\n/// @notice RainVM opcode pack to read the IERC721 interface.\\nlibrary IERC721Ops {\\n    function applyOp(\\n        State memory state_,\\n        uint256 opcode_,\\n        uint256\\n    ) internal view {\\n        unchecked {\\n            require(opcode_ < IERC721_OPS_LENGTH, \\\"MAX_OPCODE\\\");\\n\\n            state_.stackIndex--;\\n            uint256 baseIndex_ = state_.stackIndex - 1;\\n            // Stack the return of `balanceOf`.\\n            if (opcode_ == OPCODE_BALANCE_OF) {\\n                state_.stack[baseIndex_] = IERC721(\\n                    address(uint160(state_.stack[baseIndex_]))\\n                ).balanceOf(address(uint160(state_.stack[state_.stackIndex])));\\n            }\\n            // Stack the return of `ownerOf`.\\n            else if (opcode_ == OPCODE_OWNER_OF) {\\n                state_.stack[baseIndex_] = uint256(\\n                    uint160(\\n                        IERC721(address(uint160(state_.stack[baseIndex_])))\\n                            .ownerOf(state_.stack[state_.stackIndex])\\n                    )\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x83fd624d44e6ba3a34303d90757a6d15d8679d0233928eec1add8e1442673da2\",\"license\":\"CAL\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506001600090815560405161002490610096565b604051809103906000f080158015610040573d6000803e3d6000fd5b50604080513381526001600160a01b03831660208201529192507f7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70910160405180910390a16001600160a01b03166080526100a3565b61388680610dbe83390190565b608051610cfa6100c4600039600081816093015261037a0152610cfa6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632ea72a49146100515780635c60da1b1461008e57806384e0ecdb146100b5578063fc91a897146100c8575b600080fd5b61006461005f366004610510565b610111565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100647f000000000000000000000000000000000000000000000000000000000000000081565b6100646100c3366004610582565b6102bf565b6101016100d63660046105e9565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b6040519015158152602001610085565b600060026000541415610185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260009081556101968484610362565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205490915060ff1615610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4455504c49434154455f4348494c440000000000000000000000000000000000604482015260640161017c565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092527f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16632ea72a49836040516020016102ee919061070c565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161031991906108bf565b6020604051808303816000875af1158015610338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035c91906108d2565b92915050565b60008061037183850185610a25565b9050600061039e7f000000000000000000000000000000000000000000000000000000000000000061042e565b6040517fe684b6d600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063e684b6d6906103f3908590600401610be8565b600060405180830381600087803b15801561040d57600080fd5b505af1158015610421573d6000803e3d6000fd5b5092979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff811661050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161017c565b919050565b6000806020838503121561052357600080fd5b823567ffffffffffffffff8082111561053b57600080fd5b818501915085601f83011261054f57600080fd5b81358181111561055e57600080fd5b86602082850101111561057057600080fd5b60209290920196919550909350505050565b60006020828403121561059457600080fd5b813567ffffffffffffffff8111156105ab57600080fd5b8201608081850312156105bd57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146105e657600080fd5b50565b6000602082840312156105fb57600080fd5b81356105bd816105c4565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261063b57600080fd5b830160208101925035905067ffffffffffffffff81111561065b57600080fd5b8060051b360383131561066d57600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156106ef57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6000602080835260a083016107218586610606565b6080848701528281845260c08701905060c08260051b88010193508260005b838110156107ea577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4089870301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18636030181126107a157600080fd5b8501803567ffffffffffffffff8111156107ba57600080fd5b8036038713156107c957600080fd5b6107d688828b8501610674565b975050509186019190860190600101610740565b50505050506107fb82860186610606565b92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08583030160408601526108328284836106bd565b9250505060408401356060840152606084013560808401528091505092915050565b6000815180845260005b8181101561087a5760208185018101518683018201520161085e565b8181111561088c576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006105bd6020830184610854565b6000602082840312156108e457600080fd5b81516105bd816105c4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610941576109416108ef565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561098e5761098e6108ef565b604052919050565b600067ffffffffffffffff8211156109b0576109b06108ef565b5060051b60200190565b600082601f8301126109cb57600080fd5b813560206109e06109db83610996565b610947565b82815260059290921b840181019181810190868411156109ff57600080fd5b8286015b84811015610a1a5780358352918301918301610a03565b509695505050505050565b60006020808385031215610a3857600080fd5b823567ffffffffffffffff80821115610a5057600080fd5b9084019060808287031215610a6457600080fd5b610a6c61091e565b823582811115610a7b57600080fd5b8301601f81018813610a8c57600080fd5b8035610a9a6109db82610996565b81815260059190911b8201860190868101908a831115610ab957600080fd5b8784015b83811015610b6457803587811115610ad55760008081fd5b8501603f81018d13610ae75760008081fd5b89810135604089821115610afd57610afd6108ef565b610b2d8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601610947565b8281528f82848601011115610b425760008081fd5b828285018e83013760009281018d019290925250845250918801918801610abd565b5084525050508284013582811115610b7b57600080fd5b610b87888286016109ba565b858301525060408301356040820152606083013560608201528094505050505092915050565b600081518084526020808501945080840160005b83811015610bdd57815187529582019590820190600101610bc1565b509495945050505050565b6000602080835260a08301845160808386015281815180845260c08701915060c08160051b8801019350848301925060005b81811015610c66577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40888603018352610c54858551610854565b94509285019291850191600101610c1a565b50505050908401518382037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001604085015290610ca38183610bad565b9150506040840151606084015260608401516080840152809150509291505056fea26469706673582212209f1edcfebafeb5d3d1638b31964f54d0ff073806f5075b2f4d53f884da2453de64736f6c634300080a003360a06040523480156200001157600080fd5b506002808060066007600b6200002982600462000087565b62000035919062000087565b62000041919062000087565b6200004d919062000087565b62000059919062000087565b62000065919062000087565b62000071919062000087565b6200007e90600562000087565b608052620000ae565b60008219821115620000a957634e487b7160e01b600052601160045260246000fd5b500190565b6080516137b5620000d1600039600081816109cf0152610a0a01526137b56000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638a200fff14610046578063e053ea311461005b578063e684b6d614610080575b600080fd5b610059610054366004612c15565b610093565b005b61006e610069366004612c9e565b6100fa565b60405190815260200160405180910390f35b61005961008e366004612e5a565b610197565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5345545f5449455200000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000805481906101259062010000900473ffffffffffffffffffffffffffffffffffffffff16610305565b6040805173ffffffffffffffffffffffffffffffffffffffff861660208201529192506101649101604051602081830303815290604052826000610359565b6020810151815161017790600190612fdd565b8151811061018757610187612ff4565b6020026020010151915050919050565b600054610100900460ff166101b25760005460ff16156101b6565b303b155b610242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016100f1565b600054610100900460ff1615801561028157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b61029261028d836105dd565b610739565b600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561030157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6103376040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b610340826107a7565b8060200190518101906103539190613166565b92915050565b602082015151825111156103c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f535441434b5f4f564552464c4f5700000000000000000000000000000000000060448201526064016100f1565b602082810151604084015183830201909101516060840151608085015182516000948594859492939092915b848810156105d0576002880197508784015180601e1a975080601f1a965050600587101561054f5760018714156104675781608087166104325750825b607f87168151811061044357600080fd5b8b516020820260200183015160208202602001850152600181018d5250505061055b565b600287141561049e57895180871061047e57600080fd5b6020870260200182015160208202602001830152600181018b525061055b565b60038714156104b7576104b28b8b886107d5565b61055b565b60048714156104e8576104b28a6040516020016104d491906133a4565b60405160208183030381529060405261093b565b866104b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f534b49505f52454d4f564544000000000000000000000000000000000000000060448201526064016100f1565b61055b8b8b89896109cd565b60208a0151518a5111156105cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f535441434b5f4f564552464c4f5700000000000000000000000000000000000060448201526064016100f1565b6103f5565b5050505050505050505050565b61060f6040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b815151610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f305f534f5552434553000000000000000000000000000000000000000000000060448201526064016100f1565b6040518060a0016040528060008152602001836040015167ffffffffffffffff8111156106a7576106a7612cbb565b6040519080825280602002602001820160405280156106d0578160200160208202803683370190505b5081526020018360000151815260200183602001518152602001836060015167ffffffffffffffff81111561070757610707612cbb565b604051908082528060200260200182016040528015610730578160200160208202803683370190505b50905292915050565b6000806107648360405160200161075091906133a4565b604051602081830303815290604052610afa565b90507ff95eed63f55d96a35306669cc3b5f652f8d44552e3e4b17b2f78f13571114abd338285604051610799939291906133b7565b60405180910390a192915050565b60606103538260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610b85565b81517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600583901c918290030183526007821690610100600384811c1681901c91908290039060010160008167ffffffffffffffff81111561083957610839612cbb565b604051908082528060200260200182016040528015610862578160200160208202803683370190505b50905060005b828110156108b9578760200151818960000151018151811061088c5761088c612ff4565b60200260200101518282815181106108a6576108a6612ff4565b6020908102919091010152600101610868565b5060005b6101008110156109305760005b8381101561091d57848286038483815181106108e8576108e8612ff4565b6020026020010151901b901c8960800151828151811061090a5761090a612ff4565b60209081029190910101526001016108ca565b50610929898988610359565b84016108bd565b505050505050505050565b6109ca8160405160240161094f91906133f0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0be77f5600000000000000000000000000000000000000000000000000000000179052610c6e565b50565b7f0000000000000000000000000000000000000000000000000000000000000000821015610a0857610a03836005840383610c8f565b610af4565b7f00000000000000000000000000000000000000000000000000000000000000008203915060018210610a97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b600084806020019051810190610aad9190613403565b90508073ffffffffffffffffffffffffffffffffffffffff168460200151856000015181518110610ae057610ae0612ff4565b602090810291909101015250825160010183525b50505050565b600080610b2583604051602001610b119190613420565b604051602081830303815290604052610dfa565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff8216610b7f576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b6060833b80610ba4575050604080516020810190915260008152610c67565b80841115610bc2575050604080516020810190915260008152610c67565b83831015610c0d576040517f2c4a89fa0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604481018490526064016100f1565b8383038482036000828210610c225782610c24565b815b60408051603f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101909152818152955090508087602087018a3c505050505b9392505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6004821015610ca857610ca3838383610e26565b505050565b601d821015610d2b57600b821015610cc857610ca3836004840383610f3c565b6016821015610cfe57610ca3837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff584018361126a565b610ca3837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea840183611703565b6023821015610d6157610ca3837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe3840183611973565b6025821015610d9757610ca3837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd840183611e47565b6027821015610dcd57610ca3837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdb840183612070565b610ca3837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd984018361226a565b6060815182604051602001610e10929190613446565b6040516020818303038152906040529050919050565b60048210610e90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b81610ec157438360200151846000015181518110610eb057610eb0612ff4565b602002602001018181525050610f31565b6001821415610ee557428360200151846000015181518110610eb057610eb0612ff4565b6002821415610f0957602083015183518151339291908110610eb057610eb0612ff4565b602083015183518151309291908110610f2457610f24612ff4565b6020026020010181815250505b505080516001019052565b60078210610fa6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b60028210156110f25782517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01826110515783602001518160010181518110610ff157610ff1612ff4565b6020026020010151611029838660200151848151811061101357611013612ff4565b602002602001015161269690919063ffffffff16565b028460200151828151811061104057611040612ff4565b6020026020010181815250506110c6565b60018314156110c6578360200151816001018151811061107357611073612ff4565b6020026020010151611095838660200151848151811061101357611013612ff4565b816110a2576110a26134dd565b04846020015182815181106110b9576110b9612ff4565b6020026020010181815250505b5082517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018352505050565b60058210156112035782517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01600283141561116957611142828560200151838151811061101357611013612ff4565b8460200151828151811061115857611158612ff4565b602002602001018181525050610af4565b60038314156111a257611142828560200151838151811061118c5761118c612ff4565b602002602001015161271790919063ffffffff16565b6004831415610af4576111db82856020015183815181106111c5576111c5612ff4565b602002602001015161277590919063ffffffff16565b846020015182815181106111f1576111f1612ff4565b60200260200101818152505050505050565b600582141561124557670de0b6b3a7640000836020015184600001518151811061122f5761122f612ff4565b6020908102919091010152505080516001019052565b6006821415610ca35760128360200151846000015181518110610f2457610f24612ff4565b600b82106112d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b825160208401518051838303927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01918391600091908390811061131a5761131a612ff4565b602002602001015190506000861415611372575b8282101561136d57602087015180516001909301928390811061135357611353612ff4565b602002602001015181611366919061350c565b905061132e565b6116d4565b60018614156113ee575b82821080156113aa57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81105b1561136d5781806001019250506113e7876020015183815181106113d0576113d0612ff4565b6020026020010151826127c090919063ffffffff16565b905061137c565b6002861415611437575b8282101561136d57602087015180516001909301928390811061141d5761141d612ff4565b6020026020010151816114309190612fdd565b90506113f8565b6003861415611494575b82821080156114505750806000105b1561136d57818060010192505061148d8760200151838151811061147657611476612ff4565b6020026020010151826127fc90919063ffffffff16565b9050611441565b60048614156114dd575b8282101561136d5760208701518051600190930192839081106114c3576114c3612ff4565b6020026020010151816114d69190613524565b905061149e565b6005861415611559575b828210801561151557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81105b1561136d5781806001019250506115528760200151838151811061153b5761153b612ff4565b60200260200101518261281290919063ffffffff16565b90506114e7565b60068614156115a2575b8282101561136d57602087015180516001909301928390811061158857611588612ff4565b60200260200101518161159b9190613561565b9050611563565b60078614156115eb575b8282101561136d5760208701518051600190930192839081106115d1576115d1612ff4565b6020026020010151816115e49190613575565b90506115ac565b6008861415611634575b8282101561136d57602087015180516001909301928390811061161a5761161a612ff4565b60200260200101518161162d91906136a9565b90506115f5565b60098614156116865760005b8383101561168057602088015180516001909401938490811061166557611665612ff4565b602002602001015190508181101561167b578091505b611640565b506116d4565b600a8614156116d45760005b838310156116d25760208801518051600190940193849081106116b7576116b7612ff4565b60200260200101519050818111156116cd578091505b611692565b505b80876020015185815181106116eb576116eb612ff4565b60209081029190910101525050506001019092525050565b6007821061176d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b825160208085015181830201018380156117b657600181146117ed5760028114611866576003811461188e57600481146118b657600581146118de57600681146119255761196b565b826117c057600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201805115905261196b565b60038310156117fb57600080fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe830186527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0820180518015611857576020820151825261185f565b604082015182525b505061196b565b600283101561187457600080fd5b60018303865260408203602081015181511481525061196b565b600283101561189c57600080fd5b60018303865260408203602081015181511081525061196b565b60028310156118c457600080fd5b60018303865260408203602081015181511181525061196b565b838310156118eb57600080fd5b8315611920576001840383038652602084028203805b8381101561185f578051611918576000825261185f565b602001611901565b61196b565b8383101561193257600080fd5b831561196b576001840383038652602084028203805b83811015611968578051801561195f578252611968565b50602001611948565b50505b505050505050565b600682106119dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b600082611b05575082517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018452602084015180517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9092019182908110611a4857611a48612ff4565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663e053ea3185602001518360010181518110611a8457611a84612ff4565b60200260200101516040518263ffffffff1660e01b8152600401611ac4919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b602060405180830381865afa158015611ae1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114291906136b5565b6001831415611b60577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8460200151856000015181518110611b4957611b49612ff4565b602090810291909101015283516001018452610af4565b6002831415611b855760008460200151856000015181518110611b4957611b49612ff4565b6003831415611c39575082517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01808452602084015180516000919083908110611bd157611bd1612ff4565b60200260200101519050600085602001518360010181518110611bf657611bf6612ff4565b60200260200101519050611c0a8282612841565b86602001518481518110611c2057611c20612ff4565b6020908102919091010152505083516001018452610af4565b6004831415611d01575082517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0180845260208401518051600f80851692600486901c909116916000919085908110611c9457611c94612ff4565b60200260200101519050600087602001518560010181518110611cb957611cb9612ff4565b60200260200101519050611ccf828585846128a0565b88602001518681518110611ce557611ce5612ff4565b602090810291909101015250508551600101865250610af49050565b6005831415610af4575082517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff601f8316918290030180855290600783901c906003600585901c16908360008267ffffffffffffffff811115611d6657611d66612cbb565b604051908082528060200260200182016040528015611d8f578160200160208202803683370190505b50905060005b83811015611de45789602001518381518110611db357611db3612ff4565b6020026020010151828281518110611dcd57611dcd612ff4565b602090810291909101015260019283019201611d95565b50600089602001518381518110611dfd57611dfd612ff4565b60200260200101519050611e1382828888612946565b8a602001518881518110611e2957611e29612ff4565b60209081029190910101525050875160010188525050505050505050565b60028210611eb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b81611fd75782517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018452602084015180517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9092019182908110611f1957611f19612ff4565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a082318560200151866000015181518110611f5657611f56612ff4565b60200260200101516040518263ffffffff1660e01b8152600401611f96919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b602060405180830381865afa158015611fb3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111db91906136b5565b6001821415610ca3578251602084015180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201918290811061201e5761201e612ff4565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fb3573d6000803e3d6000fd5b600282106120da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b82517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810184527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe018261217b578360200151818151811061213e5761213e612ff4565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a082318560200151866000015181518110611a8457611a84612ff4565b6001831415610af4578360200151818151811061219a5761219a612ff4565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16636352211e85602001518660000151815181106121d7576121d7612ff4565b60200260200101516040518263ffffffff1660e01b81526004016121fd91815260200190565b602060405180830381865afa15801561221a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223e9190613403565b73ffffffffffffffffffffffffffffffffffffffff16846020015182815181106111f1576111f1612ff4565b600282106122d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f44450000000000000000000000000000000000000000000060448201526064016100f1565b816123de5782517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe81018452602084015180517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd909201918290811061233c5761233c612ff4565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1662fdd58e8560200151836001018151811061237757612377612ff4565b60200260200101518660200151846002018151811061239857612398612ff4565b60200260200101516040518363ffffffff1660e01b8152600401611f9692919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6001821415610ca3576001810160008167ffffffffffffffff81111561240657612406612cbb565b60405190808252806020026020018201604052801561242f578160200160208202803683370190505b50905060008267ffffffffffffffff81111561244d5761244d612cbb565b604051908082528060200260200182016040528015612476578160200160208202803683370190505b5086518490037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81810189526020890151805193945091869003019160009190839081106124c6576124c6612ff4565b6020026020010151905060005b8581101561257d578860200151818401600101815181106124f6576124f6612ff4565b602002602001015185828151811061251057612510612ff4565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091018201528901518051600185890184010190811061255057612550612ff4565b602002602001015184828151811061256a5761256a612ff4565b60209081029190910101526001016124d3565b506040517f4e1273f400000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff831690634e1273f4906125d590889088906004016136ce565b600060405180830381865afa1580156125f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612638919081019061373b565b905060005b8681101561268a5781818151811061265757612657612ff4565b60200260200101518a602001518286018151811061267757612677612ff4565b602090810291909101015260010161263d565b50505050505050505050565b60008082601214156126ab5783915050610353565b82601211156126d7575060128290036126c581600a6136a9565b6126cf9085613524565b915050610353565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee820161270681600a6136a9565b6126cf9085613561565b5092915050565b600080601283141561272c5783915050610353565b82601211156127465750601282900361270681600a6136a9565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee82016126c581600a6136a9565b600081810b612785575081610353565b60008260000b13156127ad5761279c82600a613770565b6127a69084613524565b9050610353565b60ff60008390031661270681600a6136a9565b60008282018381106127d257806127f4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b949350505050565b600081831161280c576000610c67565b50900390565b60008261282157506000610353565b82820282848281612834576128346134dd565b0414156127d257806127f4565b60008060015b6008811161289857600061285b8683612a96565b905060006128698684612a96565b9050600061287783836127fc565b9050612887856001860383612b43565b945050600190920191506128479050565b509392505050565b600082600881111561290e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016100f1565b6000855b8581101561293a5763ffffffff6020820290811b199890981685891b17979150600101612912565b50959695505050505050565b835160009081908190819060015b60088111612a885760009250828761298d57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612991565b5060005b60005b83811015612a46576129bf8c82815181106129b1576129b1612ff4565b602002602001015184612a96565b95508a8611612a1157886129de576129d78683612bcd565b9150612a08565b60018914156129f1576129d78683612be3565b6002891480156129ff575084155b15612a08578591505b60019450612a3e565b89612a3e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150612a46565b600101612994565b5083612a6f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b612a7d866001840383612b43565b955050600101612954565b509298975050505050505050565b6000816008811115612b04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016100f1565b82612b125760009150612710565b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016020021c63ffffffff1690565b6000826008811115612bb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016100f1565b505060209190910290811b63ffffffff90911b19919091161790565b6000818310612bdc5781610c67565b5090919050565b600081831015612bdc5781610c67565b73ffffffffffffffffffffffffffffffffffffffff811681146109ca57600080fd5b60008060008060608587031215612c2b57600080fd5b8435612c3681612bf3565b935060208501359250604085013567ffffffffffffffff80821115612c5a57600080fd5b818701915087601f830112612c6e57600080fd5b813581811115612c7d57600080fd5b886020828501011115612c8f57600080fd5b95989497505060200194505050565b600060208284031215612cb057600080fd5b8135610c6781612bf3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715612d0d57612d0d612cbb565b60405290565b60405160a0810167ffffffffffffffff81118282101715612d0d57612d0d612cbb565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612d7d57612d7d612cbb565b604052919050565b600067ffffffffffffffff821115612d9f57612d9f612cbb565b5060051b60200190565b600067ffffffffffffffff821115612dc357612dc3612cbb565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112612e0057600080fd5b81356020612e15612e1083612d85565b612d36565b82815260059290921b84018101918181019086841115612e3457600080fd5b8286015b84811015612e4f5780358352918301918301612e38565b509695505050505050565b60006020808385031215612e6d57600080fd5b823567ffffffffffffffff80821115612e8557600080fd5b9084019060808287031215612e9957600080fd5b612ea1612cea565b823582811115612eb057600080fd5b8301601f81018813612ec157600080fd5b8035612ecf612e1082612d85565b81815260059190911b8201860190868101908a831115612eee57600080fd5b8784015b83811015612f6557803587811115612f0a5760008081fd5b8501603f81018d13612f1c5760008081fd5b898101356040612f2e612e1083612da9565b8281528f82848601011115612f435760008081fd5b828285018e83013760009281018d019290925250845250918801918801612ef2565b5084525050508284013582811115612f7c57600080fd5b612f8888828601612def565b858301525060408301356040820152606083013560608201528094505050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015612fef57612fef612fae565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082601f83011261303457600080fd5b81516020613044612e1083612d85565b82815260059290921b8401810191818101908684111561306357600080fd5b8286015b84811015612e4f5780518352918301918301613067565b60005b83811015613099578181015183820152602001613081565b83811115610af45750506000910152565b600082601f8301126130bb57600080fd5b815160206130cb612e1083612d85565b82815260059290921b840181019181810190868411156130ea57600080fd5b8286015b84811015612e4f57805167ffffffffffffffff81111561310e5760008081fd5b8701603f810189136131205760008081fd5b848101516040613132612e1083612da9565b8281528b828486010111156131475760008081fd5b6131568389830184870161307e565b86525050509183019183016130ee565b60006020828403121561317857600080fd5b815167ffffffffffffffff8082111561319057600080fd5b9083019060a082860312156131a457600080fd5b6131ac612d13565b825181526020830151828111156131c257600080fd5b6131ce87828601613023565b6020830152506040830151828111156131e657600080fd5b6131f2878286016130aa565b60408301525060608301518281111561320a57600080fd5b61321687828601613023565b60608301525060808301518281111561322e57600080fd5b61323a87828601613023565b60808301525095945050505050565b600081518084526020808501945080840160005b838110156132795781518752958201959082019060010161325d565b509495945050505050565b6000815180845261329c81602086016020860161307e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b80518252600060208083015160a0828601526132ed60a0860182613249565b9050604084015185820360408701528181518084528484019150848160051b850101858401935060005b82811015613363577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868303018452613351828651613284565b94870194938701939150600101613317565b506060880151955088810360608a015261337d8187613249565b955050505050506080830151848203608086015261339b8282613249565b95945050505050565b602081526000610c6760208301846132ce565b600073ffffffffffffffffffffffffffffffffffffffff80861683528085166020840152506060604083015261339b60608301846132ce565b602081526000610c676020830184613284565b60006020828403121561341557600080fd5b8151610c6781612bf3565b600081526000825161343981600185016020870161307e565b9190910160010192915050565b7f630000000000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008360e01b1660018201527f80600e6000396000f300000000000000000000000000000000000000000000006005820152600082516134cf81600e85016020870161307e565b91909101600e019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000821982111561351f5761351f612fae565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561355c5761355c612fae565b500290565b600082613570576135706134dd565b500490565b600082613584576135846134dd565b500690565b600181815b808511156135e257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156135c8576135c8612fae565b808516156135d557918102915b93841c939080029061358e565b509250929050565b6000826135f957506001610353565b8161360657506000610353565b816001811461361c576002811461362657613642565b6001915050610353565b60ff84111561363757613637612fae565b50506001821b610353565b5060208310610133831016604e8410600b8410161715613665575081810a610353565b61366f8383613589565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156136a1576136a1612fae565b029392505050565b6000610c6783836135ea565b6000602082840312156136c757600080fd5b5051919050565b604080825283519082018190526000906020906060840190828701845b8281101561371d57815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016136eb565b505050838103828501526137318186613249565b9695505050505050565b60006020828403121561374d57600080fd5b815167ffffffffffffffff81111561376457600080fd5b6127f484828501613023565b6000610c6760ff8416836135ea56fea2646970667358221220b093111fbd37db4e752472d7a9ecb54289ae2466b71641674440c1ecc8ae93fe64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632ea72a49146100515780635c60da1b1461008e57806384e0ecdb146100b5578063fc91a897146100c8575b600080fd5b61006461005f366004610510565b610111565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100647f000000000000000000000000000000000000000000000000000000000000000081565b6100646100c3366004610582565b6102bf565b6101016100d63660046105e9565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b6040519015158152602001610085565b600060026000541415610185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260009081556101968484610362565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205490915060ff1615610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4455504c49434154455f4348494c440000000000000000000000000000000000604482015260640161017c565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092527f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16632ea72a49836040516020016102ee919061070c565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161031991906108bf565b6020604051808303816000875af1158015610338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035c91906108d2565b92915050565b60008061037183850185610a25565b9050600061039e7f000000000000000000000000000000000000000000000000000000000000000061042e565b6040517fe684b6d600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063e684b6d6906103f3908590600401610be8565b600060405180830381600087803b15801561040d57600080fd5b505af1158015610421573d6000803e3d6000fd5b5092979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff811661050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161017c565b919050565b6000806020838503121561052357600080fd5b823567ffffffffffffffff8082111561053b57600080fd5b818501915085601f83011261054f57600080fd5b81358181111561055e57600080fd5b86602082850101111561057057600080fd5b60209290920196919550909350505050565b60006020828403121561059457600080fd5b813567ffffffffffffffff8111156105ab57600080fd5b8201608081850312156105bd57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146105e657600080fd5b50565b6000602082840312156105fb57600080fd5b81356105bd816105c4565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261063b57600080fd5b830160208101925035905067ffffffffffffffff81111561065b57600080fd5b8060051b360383131561066d57600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156106ef57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6000602080835260a083016107218586610606565b6080848701528281845260c08701905060c08260051b88010193508260005b838110156107ea577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4089870301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18636030181126107a157600080fd5b8501803567ffffffffffffffff8111156107ba57600080fd5b8036038713156107c957600080fd5b6107d688828b8501610674565b975050509186019190860190600101610740565b50505050506107fb82860186610606565b92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08583030160408601526108328284836106bd565b9250505060408401356060840152606084013560808401528091505092915050565b6000815180845260005b8181101561087a5760208185018101518683018201520161085e565b8181111561088c576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006105bd6020830184610854565b6000602082840312156108e457600080fd5b81516105bd816105c4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610941576109416108ef565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561098e5761098e6108ef565b604052919050565b600067ffffffffffffffff8211156109b0576109b06108ef565b5060051b60200190565b600082601f8301126109cb57600080fd5b813560206109e06109db83610996565b610947565b82815260059290921b840181019181810190868411156109ff57600080fd5b8286015b84811015610a1a5780358352918301918301610a03565b509695505050505050565b60006020808385031215610a3857600080fd5b823567ffffffffffffffff80821115610a5057600080fd5b9084019060808287031215610a6457600080fd5b610a6c61091e565b823582811115610a7b57600080fd5b8301601f81018813610a8c57600080fd5b8035610a9a6109db82610996565b81815260059190911b8201860190868101908a831115610ab957600080fd5b8784015b83811015610b6457803587811115610ad55760008081fd5b8501603f81018d13610ae75760008081fd5b89810135604089821115610afd57610afd6108ef565b610b2d8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601610947565b8281528f82848601011115610b425760008081fd5b828285018e83013760009281018d019290925250845250918801918801610abd565b5084525050508284013582811115610b7b57600080fd5b610b87888286016109ba565b858301525060408301356040820152606083013560608201528094505050505092915050565b600081518084526020808501945080840160005b83811015610bdd57815187529582019590820190600101610bc1565b509495945050505050565b6000602080835260a08301845160808386015281815180845260c08701915060c08160051b8801019350848301925060005b81811015610c66577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40888603018352610c54858551610854565b94509285019291850191600101610c1a565b50505050908401518382037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001604085015290610ca38183610bad565b9150506040840151606084015260608401516080840152809150509291505056fea26469706673582212209f1edcfebafeb5d3d1638b31964f54d0ff073806f5075b2f4d53f884da2453de64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createChild(bytes)": {
        "params": {
          "data_": "Encoded data to pass down to child contract constructor."
        },
        "returns": {
          "_0": "New child contract address."
        }
      },
      "createChildTyped((bytes[],uint256[],uint256,uint256))": {
        "params": {
          "config_": "`ImmutableSourceConfig` of the `CombineTier` logic."
        },
        "returns": {
          "_0": "New `CombineTier` child contract address."
        }
      },
      "isChild(address)": {
        "params": {
          "maybeChild_": "Address of child contract to look up."
        },
        "returns": {
          "_0": "Returns `true` if address is a contract created by this contract factory, otherwise `false`."
        }
      }
    },
    "title": "CombineTierFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Implementation(address,address)": {
        "notice": "Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this."
      },
      "NewChild(address,address)": {
        "notice": "Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Build the reference implementation to clone for each child."
      },
      "createChild(bytes)": {
        "notice": "Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event."
      },
      "createChildTyped((bytes[],uint256[],uint256,uint256))": {
        "notice": "Typed wrapper for `createChild` with Source. Use original `Factory` `createChild` function signature if function parameters are already encoded."
      },
      "implementation()": {
        "notice": "Template contract to clone. Deployed by the constructor."
      },
      "isChild(address)": {
        "notice": "Implements `IFactory`. Checks if address is registered as a child contract of this factory."
      }
    },
    "notice": "Factory for creating and deploying `CombineTier` contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3818,
        "contract": "contracts/tier/CombineTierFactory.sol:CombineTierFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10061,
        "contract": "contracts/tier/CombineTierFactory.sol:CombineTierFactory",
        "label": "contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}