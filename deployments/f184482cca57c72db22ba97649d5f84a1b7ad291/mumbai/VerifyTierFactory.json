{
  "address": "0x9626d5cafabB4236e00F3BaE6130840fB9Ad1598",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Implementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "child",
          "type": "address"
        }
      ],
      "name": "NewChild",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "createChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verify_",
          "type": "address"
        }
      ],
      "name": "createChildTyped",
      "outputs": [
        {
          "internalType": "contract VerifyTier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maybeChild_",
          "type": "address"
        }
      ],
      "name": "isChild",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa30603acced614065397b5f908733446e5f4707dcda1851f2fa3df36855cfd6a",
  "receipt": {
    "to": null,
    "from": "0xbF334f8BD1420a1CbFE15407f73919424934B1B3",
    "contractAddress": "0x9626d5cafabB4236e00F3BaE6130840fB9Ad1598",
    "transactionIndex": 10,
    "gasUsed": "1116145",
    "logsBloom": "0x
    "blockHash": "0xee1387c82ea78383eae0af906428e99ee6f34ab4d882e960b10519faadf7478b",
    "transactionHash": "0xa30603acced614065397b5f908733446e5f4707dcda1851f2fa3df36855cfd6a",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 27020743,
        "transactionHash": "0xa30603acced614065397b5f908733446e5f4707dcda1851f2fa3df36855cfd6a",
        "address": "0x9626d5cafabB4236e00F3BaE6130840fB9Ad1598",
        "topics": [
          "0x7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70"
        ],
        "data": "0x000000000000000000000000bf334f8bd1420a1cbfe15407f73919424934b1b3000000000000000000000000f77eff4610ab86eaf3e4b289cd76572f30999dbc",
        "logIndex": 18,
        "blockHash": "0xee1387c82ea78383eae0af906428e99ee6f34ab4d882e960b10519faadf7478b"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 27020743,
        "transactionHash": "0xa30603acced614065397b5f908733446e5f4707dcda1851f2fa3df36855cfd6a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bf334f8bd1420a1cbfe15407f73919424934b1b3",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000320f2e3b8bc0ea000000000000000000000000000000000000000000000000bb4f54cd29ba3f6b00000000000000000000000000000000000000000000100d4056622e49d485c0000000000000000000000000000000000000000000000000bb1d459eee2e7e8100000000000000000000000000000000000000000000100d4088715c856046aa",
        "logIndex": 19,
        "blockHash": "0xee1387c82ea78383eae0af906428e99ee6f34ab4d882e960b10519faadf7478b"
      }
    ],
    "blockNumber": 27020743,
    "cumulativeGasUsed": "2082091",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "055c200f462499c3452e24a9d9708423",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Implementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"}],\"name\":\"NewChild\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"createChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verify_\",\"type\":\"address\"}],\"name\":\"createChildTyped\",\"outputs\":[{\"internalType\":\"contract VerifyTier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeChild_\",\"type\":\"address\"}],\"name\":\"isChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createChild(bytes)\":{\"params\":{\"data_\":\"Encoded data to pass down to child contract constructor.\"},\"returns\":{\"_0\":\"New child contract address.\"}},\"createChildTyped(address)\":{\"params\":{\"verify_\":\"`Verify` of the `VerifyTier` logic.\"},\"returns\":{\"_0\":\"New `VerifyTier` child contract address.\"}},\"isChild(address)\":{\"params\":{\"maybeChild_\":\"Address of child contract to look up.\"},\"returns\":{\"_0\":\"Returns `true` if address is a contract created by this contract factory, otherwise `false`.\"}}},\"title\":\"VerifyTierFactory\",\"version\":1},\"userdoc\":{\"events\":{\"Implementation(address,address)\":{\"notice\":\"Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this.\"},\"NewChild(address,address)\":{\"notice\":\"Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Build the reference implementation to clone for each child.\"},\"createChild(bytes)\":{\"notice\":\"Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event.\"},\"createChildTyped(address)\":{\"notice\":\"Typed wrapper for `createChild` with `Verify`. Use original `Factory` `createChild` function signature if function parameters are already encoded.\"},\"implementation()\":{\"notice\":\"Template contract to clone. Deployed by the constructor.\"},\"isChild(address)\":{\"notice\":\"Implements `IFactory`. Checks if address is registered as a child contract of this factory.\"}},\"notice\":\"Factory for creating and deploying `VerifyTier` contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tier/VerifyTierFactory.sol\":\"VerifyTierFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/factory/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IFactory} from \\\"./IFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Factory\\n/// @notice Base contract for deploying and registering child contracts.\\nabstract contract Factory is IFactory, ReentrancyGuard {\\n    /// @dev state to track each deployed contract address. A `Factory` will\\n    /// never lie about deploying a child, unless `isChild` is overridden to do\\n    /// so.\\n    mapping(address => bool) private contracts;\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// `_createChild` hook must be overridden to actually create child\\n    /// contract.\\n    ///\\n    /// Implementers may want to overload this function with a typed equivalent\\n    /// to expose domain specific structs etc. to the compiled ABI consumed by\\n    /// tooling and other scripts. To minimise gas costs for deployment it is\\n    /// expected that the tooling will consume the typed ABI, then encode the\\n    /// arguments and pass them to this function directly.\\n    ///\\n    /// @param data_ ABI encoded data to pass to child contract constructor.\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        returns (address);\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Calls the `_createChild` hook that inheriting contracts must override.\\n    /// Registers child contract address such that `isChild` is `true`.\\n    /// Emits `NewChild` event.\\n    ///\\n    /// @param data_ Encoded data to pass down to child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        returns (address)\\n    {\\n        // Create child contract using hook.\\n        address child_ = _createChild(data_);\\n        // Ensure the child at this address has not previously been deployed.\\n        require(!contracts[child_], \\\"DUPLICATE_CHILD\\\");\\n        // Register child contract address to `contracts` mapping.\\n        contracts[child_] = true;\\n        // Emit `NewChild` event with child contract address.\\n        emit IFactory.NewChild(msg.sender, child_);\\n        return child_;\\n    }\\n\\n    /// Implements `IFactory`.\\n    ///\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// @param maybeChild_ Address of child contract to look up.\\n    /// @return Returns `true` if address is a contract created by this\\n    /// contract factory, otherwise `false`.\\n    function isChild(address maybeChild_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return contracts[maybeChild_];\\n    }\\n}\\n\",\"keccak256\":\"0xbf45bbfb39b88c9adcfc25ad278928a495c16a75b3dd179baa33ca3298a85fd5\",\"license\":\"CAL\"},\"contracts/factory/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\ninterface IFactory {\\n    /// Whenever a new child contract is deployed, a `NewChild` event\\n    /// containing the new child contract address MUST be emitted.\\n    /// @param sender `msg.sender` that deployed the contract (factory).\\n    /// @param child address of the newly deployed child.\\n    event NewChild(address sender, address child);\\n\\n    /// Factories that clone a template contract MUST emit an event any time\\n    /// they set the implementation being cloned. Factories that deploy new\\n    /// contracts without cloning do NOT need to emit this.\\n    /// @param sender `msg.sender` that deployed the implementation (factory).\\n    /// @param implementation address of the implementation contract that will\\n    /// be used for future clones if relevant.\\n    event Implementation(address sender, address implementation);\\n\\n    /// Creates a new child contract.\\n    ///\\n    /// @param data_ Domain specific data for the child contract constructor.\\n    /// @return New child contract address.\\n    function createChild(bytes calldata data_) external returns (address);\\n\\n    /// Checks if address is registered as a child contract of this factory.\\n    ///\\n    /// Addresses that were not deployed by `createChild` MUST NOT return\\n    /// `true` from `isChild`. This is CRITICAL to the security guarantees for\\n    /// any contract implementing `IFactory`.\\n    ///\\n    /// @param maybeChild_ Address to check registration for.\\n    /// @return `true` if address was deployed by this contract factory,\\n    /// otherwise `false`.\\n    function isChild(address maybeChild_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3e9ca6613b0c19d98c4e19a7586d4109e498db2cf7d6e38e34fc2d2c0dbc32e2\",\"license\":\"CAL\"},\"contracts/tier/ITierV2.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// @title ITierV2\\n/// @notice `ITierV2` is a simple interface that contracts can implement to\\n/// provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITierV2`:\\n/// - MUST represent held tiers as a `uint`.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the time each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at `1`; Tier `0` is implied if no tier has ever\\n///     been held.\\n///   - Tier `0` is NOT encoded in the report, it is simply the fallback value.\\n///   - If a tier is lost the time data is erased for that tier and will be\\n///     set if/when the tier is regained to the new time.\\n///   - If a tier is held but the historical time information is not available\\n///     the report MAY return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n///   - Context can be a list of numbers that MAY pairwise define tiers such as\\n///     minimum thresholds, or MAY simply provide global context such as a\\n///     relevant NFT ID for example.\\n/// - MUST implement `reportTimeForTier`\\n///   - Functions exactly as `report` but only returns a single time for a\\n///     single tier\\n///   - MUST return the same time value `report` would for any given tier and\\n///     context combination.\\n///\\n/// So the four possible states and report values are:\\n/// - Tier is held and time is known: Timestamp is in the report\\n/// - Tier is held but time is NOT known: `0` is in the report\\n/// - Tier is NOT held: `0xFF..` is in the report\\n/// - Tier is unknown: `0xFF..` is in the report\\n///\\n/// The reason `context` is specified as a list of values rather than arbitrary\\n/// bytes is to allow clear and efficient compatibility with VM stacks. Some N\\n/// values can be taken from a VM stack and used directly as a context, which\\n/// would be difficult or impossible to ensure is safe for arbitrary bytes.\\ninterface ITierV2 {\\n    /// Same as report but only returns the time for a single tier.\\n    /// Often the implementing contract can calculate a single tier more\\n    /// efficiently than all 8 tiers. If the consumer only needs one or a few\\n    /// tiers it MAY be much cheaper to request only those tiers individually.\\n    /// This DOES NOT apply to all contracts, an obvious example is token\\n    /// balance based tiers which always return `ALWAYS` or `NEVER` for all\\n    /// tiers so no efficiency is gained.\\n    /// The return value is a `uint256` for gas efficiency but the values will\\n    /// be bounded by `type(uint32).max` as no single tier can report a value\\n    /// higher than this.\\n    function reportTimeForTier(\\n        address account,\\n        uint256 tier,\\n        uint256[] calldata context\\n    ) external view returns (uint256 time);\\n\\n    /// Same as `ITier` but with a list of values for `context` which allows a\\n    /// single underlying state to present many different reports dynamically.\\n    ///\\n    /// For example:\\n    /// - Staking ledgers can calculate different tier thresholds\\n    /// - NFTs can give different tiers based on different IDs\\n    /// - Snapshot ERC20s can give different reports based on snapshot ID\\n    ///\\n    /// `context` supercedes `setTier` function and `TierChange` event from\\n    /// `ITier` at the interface level. Implementing contracts are free to\\n    /// inherit both `ITier` and `ITierV2` if the old behaviour is desired.\\n    function report(address account, uint256[] calldata context)\\n        external\\n        view\\n        returns (uint256 report);\\n}\\n\",\"keccak256\":\"0xdc851fc7cd82f9752a2bc96dfe3914257af6a970f514a0a7ed50a7b327c4d035\",\"license\":\"CAL\"},\"contracts/tier/TierV2.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./ITierV2.sol\\\";\\n\\nabstract contract TierV2 is ITierV2, ERC165 {\\n    function supportsInterface(bytes4 interfaceId_)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId_ == type(ITierV2).interfaceId ||\\n            super.supportsInterface(interfaceId_);\\n    }\\n}\\n\",\"keccak256\":\"0x0dbc43be311bc27af8c8489a197cf2ec055266105e9c364ae4bddd02845a4f0d\",\"license\":\"CAL\"},\"contracts/tier/VerifyTier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./TierV2.sol\\\";\\nimport \\\"../verify/libraries/VerifyConstants.sol\\\";\\nimport {State, Verify} from \\\"../verify/Verify.sol\\\";\\nimport \\\"./libraries/TierReport.sol\\\";\\n\\n/// @title VerifyTier\\n///\\n/// @dev A contract that is `VerifyTier` expects to derive tiers from the time\\n/// the account was approved by the underlying `Verify` contract. The approval\\n/// timestamps defer to `State.since` returned from `Verify.state`.\\ncontract VerifyTier is TierV2, Initializable {\\n    /// Result of initializing.\\n    /// @param sender `msg.sender` that initialized the contract.\\n    /// @param verify The `Verify` contract checked for reports.\\n    event Initialize(address sender, address verify);\\n    /// The contract to check to produce reports.\\n    Verify private verify;\\n\\n    /// Sets the `verify` contract.\\n    /// @param verify_ The contract to check to produce reports.\\n    function initialize(address verify_) external initializer {\\n        require(verify_ != address(0), \\\"0_ADDRESS\\\");\\n        verify = Verify(verify_);\\n        emit Initialize(msg.sender, verify_);\\n    }\\n\\n    /// Every tier will be the `State.since` timestamp if `account_` is\\n    /// approved otherwise every tier will be uninitialized.\\n    /// @inheritdoc ITierV2\\n    function report(address account_, uint256[] memory)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        State memory state_ = verify.state(account_);\\n        if (\\n            // This is comparing an enum variant so it must be equal.\\n            // slither-disable-next-line incorrect-equality\\n            verify.statusAtTime(state_, block.timestamp) ==\\n            VerifyConstants.STATUS_APPROVED\\n        ) {\\n            return\\n                TierReport.updateTimesForTierRange(\\n                    TierConstants.NEVER_REPORT,\\n                    TierConstants.TIER_ZERO,\\n                    TierConstants.TIER_EIGHT,\\n                    state_.approvedSince\\n                );\\n        } else {\\n            return TierConstants.NEVER_REPORT;\\n        }\\n    }\\n\\n    /// @inheritdoc ITierV2\\n    function reportTimeForTier(\\n        address account_,\\n        uint256,\\n        uint256[] calldata\\n    ) external view returns (uint256) {\\n        State memory state_ = verify.state(account_);\\n        if (\\n            // This is comparing an enum variant so it must be equal.\\n            // slither-disable-next-line incorrect-equality\\n            verify.statusAtTime(state_, block.timestamp) ==\\n            VerifyConstants.STATUS_APPROVED\\n        ) {\\n            return state_.approvedSince;\\n        } else {\\n            return TierConstants.NEVER_REPORT;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x080ce30817a4a8a809de9cb45f279e3be8c978ff6446caea5b47f72bc21a2551\",\"license\":\"CAL\"},\"contracts/tier/VerifyTierFactory.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {Factory} from \\\"../factory/Factory.sol\\\";\\nimport {VerifyTier} from \\\"./VerifyTier.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\n/// @title VerifyTierFactory\\n/// @notice Factory for creating and deploying `VerifyTier` contracts.\\ncontract VerifyTierFactory is Factory {\\n    /// Template contract to clone.\\n    /// Deployed by the constructor.\\n    address public immutable implementation;\\n\\n    /// Build the reference implementation to clone for each child.\\n    constructor() {\\n        address implementation_ = address(new VerifyTier());\\n        emit Implementation(msg.sender, implementation_);\\n        implementation = implementation_;\\n    }\\n\\n    /// @inheritdoc Factory\\n    function _createChild(bytes calldata data_)\\n        internal\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address verify_ = abi.decode(data_, (address));\\n        address clone_ = Clones.clone(implementation);\\n        VerifyTier(clone_).initialize(verify_);\\n        return clone_;\\n    }\\n\\n    /// Typed wrapper for `createChild` with `Verify`.\\n    /// Use original `Factory` `createChild` function signature if function\\n    /// parameters are already encoded.\\n    ///\\n    /// @param verify_ `Verify` of the `VerifyTier` logic.\\n    /// @return New `VerifyTier` child contract address.\\n    function createChildTyped(address verify_) external returns (VerifyTier) {\\n        return VerifyTier(this.createChild(abi.encode(verify_)));\\n    }\\n}\\n\",\"keccak256\":\"0x221479487c348e78643eb6ea1c23a750779ea8c70d1fce8775ece57653657b9a\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierConstants.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title TierConstants\\n/// @notice Constants for use with tier logic.\\nlibrary TierConstants {\\n    /// NEVER is 0xFF.. as it is infinitely in the future.\\n    /// NEVER for an entire report.\\n    uint256 internal constant NEVER_REPORT = type(uint256).max;\\n    /// NEVER for a single tier time.\\n    uint32 internal constant NEVER_TIME = type(uint32).max;\\n\\n    /// Always is 0 as it is the genesis block.\\n    /// Tiers can't predate the chain but they can predate an `ITierV2`\\n    /// contract.\\n    uint256 internal constant ALWAYS = 0;\\n\\n    /// Account has never held a tier.\\n    uint256 internal constant TIER_ZERO = 0;\\n\\n    /// Magic number for tier one.\\n    uint256 internal constant TIER_ONE = 1;\\n    /// Magic number for tier two.\\n    uint256 internal constant TIER_TWO = 2;\\n    /// Magic number for tier three.\\n    uint256 internal constant TIER_THREE = 3;\\n    /// Magic number for tier four.\\n    uint256 internal constant TIER_FOUR = 4;\\n    /// Magic number for tier five.\\n    uint256 internal constant TIER_FIVE = 5;\\n    /// Magic number for tier six.\\n    uint256 internal constant TIER_SIX = 6;\\n    /// Magic number for tier seven.\\n    uint256 internal constant TIER_SEVEN = 7;\\n    /// Magic number for tier eight.\\n    uint256 internal constant TIER_EIGHT = 8;\\n    /// Maximum tier is `TIER_EIGHT`.\\n    uint256 internal constant MAX_TIER = TIER_EIGHT;\\n}\\n\",\"keccak256\":\"0x4d73c7a5d50d7dddfd0a6cacaf5a366f99b80199dc9f9e8aa9ba77e2736a19e5\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierReport.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ITierV2} from \\\"../ITierV2.sol\\\";\\nimport \\\"./TierConstants.sol\\\";\\n\\n/// @title TierReport\\n/// @notice `TierReport` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtTimeFromReport`: Returns the highest status achieved relative to\\n/// a block timestamp and report. Statuses gained after that block are ignored.\\n/// - `tierTime`: Returns the timestamp that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateTimesForTierRange`: Updates a report with a timestamp for every\\n///    tier in a range.\\n/// - `updateReportWithTierAtTime`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this\\n/// factors that out.\\nlibrary TierReport {\\n    /// Enforce upper limit on tiers so we can do unchecked math.\\n    /// @param tier_ The tier to enforce bounds on.\\n    modifier maxTier(uint256 tier_) {\\n        require(tier_ <= TierConstants.MAX_TIER, \\\"MAX_TIER\\\");\\n        _;\\n    }\\n\\n    /// Returns the highest tier achieved relative to a block timestamp\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.timestamp` but not always. Tiers gained after the\\n    /// reference time are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `timestamp_` this\\n    /// means the user must have held the tier continuously from `timestamp_`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITierV2`.\\n    /// @param timestamp_ The timestamp to check the tiers against.\\n    /// @return tier_ The highest tier held since `timestamp_` as per `report`.\\n    function tierAtTimeFromReport(uint256 report_, uint256 timestamp_)\\n        internal\\n        pure\\n        returns (uint256 tier_)\\n    {\\n        unchecked {\\n            for (tier_ = 0; tier_ < 8; tier_++) {\\n                if (uint32(uint256(report_ >> (tier_ * 32))) > timestamp_) {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Returns the timestamp that a given tier has been held since from a\\n    /// report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtTimeFromReport`.\\n    ///\\n    /// @param report_ The report to read a timestamp from.\\n    /// @param tier_ The Tier to read the timestamp for.\\n    /// @return timestamp_ The timestamp the tier has been held since.\\n    function reportTimeForTier(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256 timestamp_)\\n    {\\n        unchecked {\\n            // ZERO is a special case. Everyone has always been at least ZERO,\\n            // since block 0.\\n            if (tier_ == 0) {\\n                return 0;\\n            }\\n\\n            uint256 offset_ = (tier_ - 1) * 32;\\n            timestamp_ = uint256(uint32(uint256(report_ >> offset_)));\\n        }\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            uint256 mask_ = (TierConstants.NEVER_REPORT >> offset_) << offset_;\\n            return report_ | mask_;\\n        }\\n    }\\n\\n    /// Updates a report with a timestamp for a given tier.\\n    /// More gas efficient than `updateTimesForTierRange` if only a single\\n    /// tier is being modified.\\n    /// The tier at/above the given tier is updated. E.g. tier `0` will update\\n    /// the time for tier `1`.\\n    /// @param report_ Report to use as the baseline for the updated report.\\n    /// @param tier_ The tier level to update.\\n    /// @param timestamp_ The new block number for `tier_`.\\n    /// @return updatedReport_ The newly updated `report_`.\\n    function updateTimeAtTier(\\n        uint256 report_,\\n        uint256 tier_,\\n        uint256 timestamp_\\n    ) internal pure maxTier(tier_) returns (uint256 updatedReport_) {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            updatedReport_ =\\n                (report_ &\\n                    ~uint256(uint256(TierConstants.NEVER_TIME) << offset_)) |\\n                uint256(timestamp_ << offset_);\\n        }\\n    }\\n\\n    /// Updates a report with a block number for every tier in a range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start tier.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier at the start of the range (exclusive).\\n    /// @param endTier_ The tier at the end of the range (inclusive).\\n    /// @param timestamp_ The timestamp to set for every tier in the range.\\n    /// @return updatedReport_ The updated report.\\n    function updateTimesForTierRange(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 timestamp_\\n    ) internal pure maxTier(endTier_) returns (uint256 updatedReport_) {\\n        unchecked {\\n            uint256 offset_;\\n            for (uint256 i_ = startTier_; i_ < endTier_; i_++) {\\n                offset_ = i_ * 32;\\n                report_ =\\n                    (report_ &\\n                        ~uint256(\\n                            uint256(TierConstants.NEVER_TIME) << offset_\\n                        )) |\\n                    uint256(timestamp_ << offset_);\\n            }\\n            updatedReport_ = report_;\\n        }\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param timestamp_ The timestamp_ to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return updatedReport_ The updated report.\\n    function updateReportWithTierAtTime(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 timestamp_\\n    ) internal pure returns (uint256 updatedReport_) {\\n        updatedReport_ = endTier_ < startTier_\\n            ? truncateTiersAbove(report_, endTier_)\\n            : updateTimesForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                timestamp_\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x814ae8971bdddb4a0c8b3e460d1c338bc03a43c0e27452f5338816408519115e\",\"license\":\"CAL\"},\"contracts/verify/IVerifyCallback.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\nimport {Evidence} from \\\"./Verify.sol\\\";\\n\\n/// Deployers of `Verify` contracts (e.g. via `VerifyFactory`) may want to\\n/// apply additional processing and/or restrictions to each of the basic\\n/// verification actions. Examples may be reading from onchain state or\\n/// requiring token transfers to complete before allowing an add/approve to\\n/// complete successfully. The reason this is an interface rather than\\n/// implementors extending `Verify` directly is that it allows for more\\n/// implementations to sit under a single `VerifyFactory` which in turn allows\\n/// a more readily composed ecosystem of verified accounts.\\n///\\n/// There's no reentrancy concerns for external calls from the `Verify`\\n/// contract to the `IVerifyCallback` contract because:\\n/// - All the callbacks happen after state changes in `Verify`\\n/// - All `Verify` actions are bound to the authority of the `msg.sender`\\n/// The `IVerifyCallback` contract can and should rollback transactions if\\n/// their restrictions/processing requirements are not met, but otherwise have\\n/// no more authority over the `Verify` state than anon users.\\n///\\n/// The security model for platforms consuming `Verify` contracts is that they\\n/// should index or otherwise filter children from the `VerifyFactory` down to\\n/// those that also set a supported `IVerifyCallback` contract. The factory is\\n/// completely agnostic to callback concerns and doesn't even require that a\\n/// callback contract be set at all.\\ninterface IVerifyCallback {\\n    /// Additional processing after a batch of additions.\\n    /// SHOULD revert/rollback transactions if processing fails.\\n    /// @param adder_ The `msg.sender` that authorized the additions.\\n    /// MAY be the addee without any specific role.\\n    /// @param evidences_ All evidences associated with the additions.\\n    function afterAdd(address adder_, Evidence[] calldata evidences_) external;\\n\\n    /// Additional processing after a batch of approvals.\\n    /// SHOULD revert/rollback transactions if processing fails.\\n    /// @param approver_ The `msg.sender` that authorized the approvals.\\n    /// @param evidences_ All evidences associated with the approvals.\\n    function afterApprove(address approver_, Evidence[] calldata evidences_)\\n        external;\\n\\n    /// Additional processing after a batch of bannings.\\n    /// SHOULD revert/rollback transactions if processing fails.\\n    /// @param banner_ The `msg.sender` that authorized the bannings.\\n    /// @param evidences_ All evidences associated with the bannings.\\n    function afterBan(address banner_, Evidence[] calldata evidences_) external;\\n\\n    /// Additional processing after a batch of removals.\\n    /// SHOULD revert/rollback transactions if processing fails.\\n    /// @param remover_ The `msg.sender` that authorized the removals.\\n    /// @param evidences_ All evidences associated with the removals.\\n    function afterRemove(address remover_, Evidence[] calldata evidences_)\\n        external;\\n}\\n\",\"keccak256\":\"0xadd8240b1799f76072c2f3da754aa69a7bcd30ae215bff5a3bbc82dd53423d01\",\"license\":\"CAL\"},\"contracts/verify/Verify.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"./IVerifyCallback.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./libraries/VerifyConstants.sol\\\";\\n\\n/// Records the time a verify session reaches each status.\\n/// If a status is not reached it is left as UNINITIALIZED, i.e. 0xFFFFFFFF.\\n/// Most accounts will never be banned so most accounts will never reach every\\n/// status, which is a good thing.\\n/// @param addedSince Time the address was added else 0xFFFFFFFF.\\n/// @param approvedSince Time the address was approved else 0xFFFFFFFF.\\n/// @param bannedSince Time the address was banned else 0xFFFFFFFF.\\nstruct State {\\n    uint32 addedSince;\\n    uint32 approvedSince;\\n    uint32 bannedSince;\\n}\\n\\n/// Structure of arbitrary evidence to support any action taken.\\n/// Priviledged roles are expected to provide evidence just as applicants as an\\n/// audit trail will be preserved permanently in the logs.\\n/// @param account The account this evidence is relevant to.\\n/// @param data Arbitrary bytes representing evidence. MAY be e.g. a reference\\n/// to a sufficiently decentralised external system such as an IPFS hash.\\nstruct Evidence {\\n    address account;\\n    bytes data;\\n}\\n\\n/// Config to initialize a Verify contract with.\\n/// @param admin The address to ASSIGN ALL ADMIN ROLES to initially. This\\n/// address is free and encouraged to delegate fine grained permissions to\\n/// many other sub-admin addresses, then revoke it's own \\\"root\\\" access.\\n/// @param callback The address of the `IVerifyCallback` contract if it exists.\\n/// MAY be `address(0)` to signify that callbacks should NOT run.\\nstruct VerifyConfig {\\n    address admin;\\n    address callback;\\n}\\n\\n/// @title Verify\\n/// Trust-minimised contract to record the state of some verification process.\\n/// When some off-chain identity is to be reified on chain there is inherently\\n/// some multi-party, multi-faceted trust relationship. For example, the DID\\n/// (Decentralized Identifiers) specification from W3C outlines that the\\n/// controller and the subject of an identity are two different entities.\\n///\\n/// This is because self-identification is always problematic to the point of\\n/// being uselessly unbelievable.\\n///\\n/// For example, I can simply say \\\"I am the queen of England\\\" and what\\n/// onchain mechanism could possibly check, let alone stop me?\\n/// The same problem exists in any situation where some priviledge or right is\\n/// associated with identity. Consider passports, driver's licenses,\\n/// celebrity status, age, health, accredited investor, social media account,\\n/// etc. etc.\\n///\\n/// Typically crypto can't and doesn't want to deal with this issue. The usual\\n/// scenario is that some system demands personal information, which leads to:\\n///\\n/// - Data breaches that put individual's safety at risk. Consider the December\\n///   2020 leak from Ledger that dumped 270 000 home addresses and phone\\n///   numbers, and another million emails, of hardware wallet owners on a\\n///   public forum.\\n/// - Discriminatory access, undermining an individual's self-sovereign right\\n///   to run a full node, self-host a GUI and broadcast transactions onchain.\\n///   Consider the dydx airdrop of 2021 where metadata about a user's access\\n///   patterns logged on a server were used to deny access to presumed\\n///   Americans over regulatory fears.\\n/// - An entrenched supply chain of centralized actors from regulators, to\\n///   government databases, through KYC corporations, platforms, etc. each of\\n///   which holds an effective monopoly over, and ability to manipulate user's\\n///   \\\"own\\\" identity.\\n///\\n/// These examples and others are completely antithetical to and undermine the\\n/// safety of an opt-in, permissionless system based on pseudonomous actors\\n/// self-signing actions into a shared space.\\n///\\n/// That said, one can hardly expect a permissionless pseudonomous system\\n/// founded on asynchronous value transfers to succeed without at least some\\n/// concept of curation and reputation.\\n///\\n/// Anon, will you invest YOUR money in anon's project?\\n///\\n/// Clearly for every defi blue chip there are 10 000 scams and nothing onchain\\n/// can stop a scam, this MUST happen at the social layer.\\n///\\n/// Rain protocol is agnostic to how this verification happens. A government\\n/// regulator is going to want a government issued ID cross-referenced against\\n/// international sanctions. A fan of some social media influencer wants to\\n/// see a verified account on that platform. An open source software project\\n/// should show a github profile. A security token may need evidence from an\\n/// accountant showing accredited investor status. There are so many ways in\\n/// which BOTH sides of a fundraise may need to verify something about\\n/// themselves to each other via a THIRD PARTY that Rain cannot assume much.\\n///\\n/// The trust model and process for Rain verification is:\\n///\\n/// - There are many `Verify` contracts, each represents a specific\\n///   verification method with a (hopefully large) set of possible reviewers.\\n/// - The verifyee compiles some evidence that can be referenced in some\\n///   relevant system. It could be a session ID in a KYC provider's database or\\n///   a tweet from a verified account, etc. The evidence is passed to the\\n///   `Verify` contract as raw bytes so it is opaque onchain, but visible as an\\n///   event to verifiers.\\n/// - The verifyee calls `add` _for themselves_ to initialize their state and\\n///   emit the evidence for their account, after which they _cannot change_\\n///   their submission without appealing to someone who can remove. This costs\\n///   gas, so why don't we simply ask the user to sign something and have an\\n///   approver verify the signed data? Because we want to leverage both the\\n///   censorship resistance and asynchronous nature of the underlying\\n///   blockchain. Assuming there are N possible approvers, we want ANY 1 of\\n///   those N approvers to be able to review and approve an application. If the\\n///   user is forced to submit their application directly to one SPECIFIC\\n///   approver we lose this property. In the gasless model the user must then\\n///   rely on their specific approver both being online and not to censor the\\n///   request. It's also possible that many accounts add the same evidence,\\n///   after all it will be public in the event logs, so it is important for\\n///   approvers to verify the PAIRING between account and evidence.\\n/// - ANY account with the `APPROVER` role can review the evidence by\\n///   inspecting the event logs. IF the evidence is valid then the `approve`\\n///   function should be called by the approver. Approvers MAY also approve and\\n///   implicitly add any account atomically if the account did not previously\\n///   add itself.\\n/// - ANY account with the `BANNER` role can veto either an add OR a prior\\n///   approval. In the case of a false positive, i.e. where an account was\\n///   mistakenly approved, an appeal can be made to a banner to update the\\n///   status. Bad accounts SHOULD BE BANNED NOT REMOVED. When an account is\\n///   removed, its onchain state is once again open for the attacker to\\n///   resubmit new fraudulent evidence and potentially be reapproved.\\n///   Once an account is banned, any attempt by the account holder to change\\n///   their status, or an approver to approve will be rejected. Downstream\\n///   consumers of a `State` MUST check for an existing ban. Banners MAY ban\\n///   and implicity add any account atomically if the account did not\\n///   previously add itself.\\n///   - ANY account with the `REMOVER` role can scrub the `State` from an\\n///   account. Of course, this is a blockchain so the state changes are all\\n///   still visible to full nodes and indexers in historical data, in both the\\n///   onchain history and the event logs for each state change. This allows an\\n///   account to appeal to a remover in the case of a MISTAKEN BAN or also in\\n///   the case of a MISTAKEN ADD (e.g. mistake in evidence), effecting a\\n///   \\\"hard reset\\\" at the contract storage level.\\n///\\n/// Banning some account with an invalid session is NOT required. It is\\n/// harmless for an added session to remain as `Status.Added` indefinitely.\\n/// For as long as no approver decides to approve some invalid added session it\\n/// MUST be treated as equivalent to a ban by downstream contracts. This is\\n/// important so that admins are only required to spend gas on useful actions.\\n///\\n/// In addition to `Approve`, `Ban`, `Remove` there are corresponding events\\n/// `RequestApprove`, `RequestBan`, `RequestRemove` that allow for admins to be\\n/// notified that some new evidence must be considered that may lead to each\\n/// action. `RequestApprove` is automatically submitted as part of the `add`\\n/// call, but `RequestBan` and `RequestRemove` must be manually called\\n///\\n/// Rain uses standard Open Zeppelin `AccessControl` and is agnostic to how the\\n/// approver/remover/banner roles and associated admin roles are managed.\\n/// Ideally the more credibly neutral qualified parties assigend to each role\\n/// for each `Verify` contract the better. This improves the censorship\\n/// resistance of the verification process and the responsiveness of the\\n/// end-user experience.\\n///\\n/// Ideally the admin account assigned at deployment would renounce their admin\\n/// rights after establishing a more granular and appropriate set of accounts\\n/// with each specific role.\\n///\\n/// There is no requirement that any of the priviledged accounts with roles are\\n/// a single-key EOA, they may be multisig accounts or even a DAO with formal\\n/// governance processes mediated by a smart contract.\\n///\\n/// Every action emits an associated event and optionally calls an onchain\\n/// callback on a `IVerifyCallback` contract set during initialize. As each\\n/// action my be performed in bulk dupes are not rolled back, instead the\\n/// events are emitted for every time the action is called and the callbacks\\n/// and onchain state changes are deduped. For example, an approve may be\\n/// called twice for a single account, but by different approvers, potentially\\n/// submitting different evidence for each approval. In this case the time of\\n/// the first approve will be used and the onchain callback will be called for\\n/// the first transaction only, but BOTH approvals will emit an event. This\\n/// logic is applied per-account, per-action across a batch of evidences.\\ncontract Verify is AccessControl, Initializable {\\n    /// Any state never held is UNINITIALIZED.\\n    /// Note that as per default evm an unset state is 0 so always check the\\n    /// `addedSince` time on a `State` before trusting an equality check on\\n    /// any other time.\\n    /// (i.e. removed or never added)\\n    uint32 private constant UNINITIALIZED = type(uint32).max;\\n\\n    /// Emitted when the `Verify` contract is initialized.\\n    event Initialize(address sender, VerifyConfig config);\\n\\n    /// Emitted when evidence is first submitted to approve an account.\\n    /// The requestor is always the `msg.sender` of the user calling `add`.\\n    /// @param sender The `msg.sender` that submitted its own evidence.\\n    /// @param evidence The evidence to support an approval.\\n    /// NOT written to contract storage.\\n    event RequestApprove(address sender, Evidence evidence);\\n    /// Emitted when a previously added account is approved.\\n    /// @param sender The `msg.sender` that approved `account`.\\n    /// @param evidence The approval data.\\n    event Approve(address sender, Evidence evidence);\\n\\n    /// Currently approved accounts can request that any account be banned.\\n    /// The requestor is expected to provide supporting data for the ban.\\n    /// The requestor MAY themselves be banned if vexatious.\\n    /// @param sender The `msg.sender` requesting a ban of `account`.\\n    /// @param evidence Account + data the `requestor` feels will strengthen\\n    /// its case for the ban. NOT written to contract storage.\\n    event RequestBan(address sender, Evidence evidence);\\n    /// Emitted when an added or approved account is banned.\\n    /// @param sender The `msg.sender` that banned `account`.\\n    /// @param evidence Account + the evidence to support a ban.\\n    /// NOT written to contract storage.\\n    event Ban(address sender, Evidence evidence);\\n\\n    /// Currently approved accounts can request that any account be removed.\\n    /// The requestor is expected to provide supporting data for the removal.\\n    /// The requestor MAY themselves be banned if vexatious.\\n    /// @param sender The `msg.sender` requesting a removal of `account`.\\n    /// @param evidence `Evidence` to justify a removal.\\n    event RequestRemove(address sender, Evidence evidence);\\n    /// Emitted when an account is scrubbed from blockchain state.\\n    /// Historical logs still visible offchain of course.\\n    /// @param sender The `msg.sender` that removed `account`.\\n    /// @param evidence `Evidence` to justify the removal.\\n    event Remove(address sender, Evidence evidence);\\n\\n    /// Admin role for `APPROVER`.\\n    bytes32 public constant APPROVER_ADMIN = keccak256(\\\"APPROVER_ADMIN\\\");\\n    /// Role for `APPROVER`.\\n    bytes32 public constant APPROVER = keccak256(\\\"APPROVER\\\");\\n\\n    /// Admin role for `REMOVER`.\\n    bytes32 public constant REMOVER_ADMIN = keccak256(\\\"REMOVER_ADMIN\\\");\\n    /// Role for `REMOVER`.\\n    bytes32 public constant REMOVER = keccak256(\\\"REMOVER\\\");\\n\\n    /// Admin role for `BANNER`.\\n    bytes32 public constant BANNER_ADMIN = keccak256(\\\"BANNER_ADMIN\\\");\\n    /// Role for `BANNER`.\\n    bytes32 public constant BANNER = keccak256(\\\"BANNER\\\");\\n\\n    /// Account => State\\n    mapping(address => State) private states;\\n\\n    /// Optional IVerifyCallback contract.\\n    /// MAY be address 0.\\n    IVerifyCallback public callback;\\n\\n    /// Initializes the `Verify` contract e.g. as cloned by a factory.\\n    /// @param config_ The config required to initialize the contract.\\n    function initialize(VerifyConfig calldata config_) external initializer {\\n        require(config_.admin != address(0), \\\"0_ACCOUNT\\\");\\n\\n        // `APPROVER_ADMIN` can admin each other in addition to\\n        // `APPROVER` addresses underneath.\\n        _setRoleAdmin(APPROVER_ADMIN, APPROVER_ADMIN);\\n        _setRoleAdmin(APPROVER, APPROVER_ADMIN);\\n\\n        // `REMOVER_ADMIN` can admin each other in addition to\\n        // `REMOVER` addresses underneath.\\n        _setRoleAdmin(REMOVER_ADMIN, REMOVER_ADMIN);\\n        _setRoleAdmin(REMOVER, REMOVER_ADMIN);\\n\\n        // `BANNER_ADMIN` can admin each other in addition to\\n        // `BANNER` addresses underneath.\\n        _setRoleAdmin(BANNER_ADMIN, BANNER_ADMIN);\\n        _setRoleAdmin(BANNER, BANNER_ADMIN);\\n\\n        // It is STRONGLY RECOMMENDED that the `admin_` delegates specific\\n        // admin roles then revokes the `X_ADMIN` roles. From themselves.\\n        // It is ALSO RECOMMENDED that each of the sub-`X_ADMIN` roles revokes\\n        // their admin rights once sufficient approvers/removers/banners have\\n        // been assigned, if possible. Admins can instantly/atomically assign\\n        // and revoke admin priviledges from each other, so a compromised key\\n        // can irreperably damage a `Verify` contract instance.\\n        _grantRole(APPROVER_ADMIN, config_.admin);\\n        _grantRole(REMOVER_ADMIN, config_.admin);\\n        _grantRole(BANNER_ADMIN, config_.admin);\\n\\n        callback = IVerifyCallback(config_.callback);\\n\\n        emit Initialize(msg.sender, config_);\\n    }\\n\\n    function _updateEvidenceRef(\\n        uint256[] memory refs_,\\n        Evidence memory evidence_,\\n        uint256 refsIndex_\\n    ) private pure {\\n        uint256 ptr_;\\n        assembly {\\n            ptr_ := evidence_\\n        }\\n        refs_[refsIndex_] = ptr_;\\n    }\\n\\n    function _resizeRefs(uint256[] memory refs_, uint256 newLength_)\\n        private\\n        pure\\n    {\\n        require(newLength_ <= refs_.length, \\\"BAD_RESIZE\\\");\\n        assembly {\\n            mstore(refs_, newLength_)\\n        }\\n    }\\n\\n    function _refsAsEvidences(uint256[] memory refs_)\\n        private\\n        pure\\n        returns (Evidence[] memory)\\n    {\\n        Evidence[] memory evidences_;\\n        assembly {\\n            evidences_ := refs_\\n        }\\n        return evidences_;\\n    }\\n\\n    /// Typed accessor into states.\\n    /// @param account_ The account to return the current `State` for.\\n    function state(address account_) external view returns (State memory) {\\n        return states[account_];\\n    }\\n\\n    /// Derives a single `Status` from a `State` and a reference timestamp.\\n    /// @param state_ The raw `State` to reduce into a `Status`.\\n    /// @param timestamp_ The timestamp to compare `State` against.\\n    /// @return status_ The status in `State` given `timestamp_`.\\n    function statusAtTime(State memory state_, uint256 timestamp_)\\n        public\\n        pure\\n        returns (uint256 status_)\\n    {\\n        // The state hasn't even been added so is picking up time zero as the\\n        // evm fallback value. In this case if we checked other times using\\n        // a `<=` equality they would incorrectly return `true` always due to\\n        // also having a `0` fallback value.\\n        // Using `< 1` here to silence slither.\\n        if (state_.addedSince < 1) {\\n            status_ = VerifyConstants.STATUS_NIL;\\n        }\\n        // Banned takes priority over everything.\\n        else if (state_.bannedSince <= timestamp_) {\\n            status_ = VerifyConstants.STATUS_BANNED;\\n        }\\n        // Approved takes priority over added.\\n        else if (state_.approvedSince <= timestamp_) {\\n            status_ = VerifyConstants.STATUS_APPROVED;\\n        }\\n        // Added is lowest priority.\\n        else if (state_.addedSince <= timestamp_) {\\n            status_ = VerifyConstants.STATUS_ADDED;\\n        }\\n        // The `addedSince` time is after `timestamp_` so `Status` is nil\\n        // relative to `timestamp_`.\\n        else {\\n            status_ = VerifyConstants.STATUS_NIL;\\n        }\\n    }\\n\\n    /// Requires that `msg.sender` is approved as at the current timestamp.\\n    modifier onlyApproved() {\\n        require(\\n            statusAtTime(states[msg.sender], block.timestamp) ==\\n                VerifyConstants.STATUS_APPROVED,\\n            \\\"ONLY_APPROVED\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Builds a new `State` for use by `add` and `approve`.\\n    function newState() private view returns (State memory state_) {\\n        state_ = State(uint32(block.timestamp), UNINITIALIZED, UNINITIALIZED);\\n    }\\n\\n    /// An account adds their own verification evidence.\\n    /// Internally `msg.sender` is used; delegated `add` is not supported.\\n    /// @param data_ The evidence to support approving the `msg.sender`.\\n    function add(bytes calldata data_) external {\\n        State memory state_ = states[msg.sender];\\n        uint256 currentStatus_ = statusAtTime(state_, block.timestamp);\\n        require(\\n            currentStatus_ != VerifyConstants.STATUS_APPROVED &&\\n                currentStatus_ != VerifyConstants.STATUS_BANNED,\\n            \\\"ALREADY_EXISTS\\\"\\n        );\\n        // An account that hasn't already been added need a new state.\\n        // If an account has already been added but not approved or banned\\n        // they can emit many `RequestApprove` events without changing\\n        // their state. This facilitates multi-step workflows for the KYC\\n        // provider, e.g. to implement a commit+reveal scheme or simply\\n        // request additional evidence from the applicant before final\\n        // verdict.\\n        if (currentStatus_ == VerifyConstants.STATUS_NIL) {\\n            states[msg.sender] = newState();\\n        }\\n        Evidence memory evidence_ = Evidence(msg.sender, data_);\\n        emit RequestApprove(msg.sender, evidence_);\\n\\n        // Call the `afterAdd_` hook to allow inheriting contracts to enforce\\n        // requirements.\\n        // The inheriting contract MUST `require` or otherwise enforce its\\n        // needs to rollback a bad add.\\n        IVerifyCallback callback_ = callback;\\n        if (address(callback_) != address(0)) {\\n            Evidence[] memory evidences_ = new Evidence[](1);\\n            evidences_[0] = evidence_;\\n            callback_.afterAdd(msg.sender, evidences_);\\n        }\\n    }\\n\\n    /// An `APPROVER` can review added evidence and approve accounts.\\n    /// Typically many approvals would be submitted in a single call which is\\n    /// more convenient and gas efficient than sending individual transactions\\n    /// for every approval. However, as there are many individual agents\\n    /// acting concurrently and independently this requires that the approval\\n    /// process be infallible so that no individual approval can rollback the\\n    /// entire batch due to the actions of some other approver/banner. It is\\n    /// possible to approve an already approved or banned account. The\\n    /// `Approve` event will always emit but the approved time will only be\\n    /// set if it was previously uninitialized. A banned account will always\\n    /// be seen as banned when calling `statusAtTime` regardless of the\\n    /// approval time, even if the approval is more recent than the ban. The\\n    /// only way to reset a ban is to remove and reapprove the account.\\n    /// @param evidences_ All evidence for all approvals.\\n    function approve(Evidence[] memory evidences_) external onlyRole(APPROVER) {\\n        unchecked {\\n            State memory state_;\\n            uint256[] memory addedRefs_ = new uint256[](evidences_.length);\\n            uint256[] memory approvedRefs_ = new uint256[](evidences_.length);\\n            uint256 additions_ = 0;\\n            uint256 approvals_ = 0;\\n\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                Evidence memory evidence_ = evidences_[i_];\\n                state_ = states[evidence_.account];\\n                // If the account hasn't been added an approver can still add\\n                // and approve it on their behalf.\\n                if (state_.addedSince < 1) {\\n                    state_ = newState();\\n\\n                    _updateEvidenceRef(addedRefs_, evidence_, additions_);\\n                    additions_++;\\n                }\\n                // If the account hasn't been approved we approve it. As there\\n                // are many approvers operating independently and concurrently\\n                // we do NOT `require` the approval be unique, but we also do\\n                // NOT change the time as the oldest approval is most\\n                // important. However we emit an event for every approval even\\n                // if the state does not change.\\n                // It is possible to approve a banned account but\\n                // `statusAtTime` will ignore the approval time for any banned\\n                // account and use the banned time only.\\n                if (state_.approvedSince == UNINITIALIZED) {\\n                    state_.approvedSince = uint32(block.timestamp);\\n                    states[evidence_.account] = state_;\\n\\n                    _updateEvidenceRef(approvedRefs_, evidence_, approvals_);\\n                    approvals_++;\\n                }\\n\\n                // Always emit an `Approve` event even if we didn't write to\\n                // storage. This ensures that supporting evidence hits the logs\\n                // for offchain review.\\n                emit Approve(msg.sender, evidence_);\\n            }\\n            IVerifyCallback callback_ = callback;\\n            if (address(callback_) != address(0)) {\\n                if (additions_ > 0) {\\n                    _resizeRefs(addedRefs_, additions_);\\n                    callback_.afterAdd(\\n                        msg.sender,\\n                        _refsAsEvidences(addedRefs_)\\n                    );\\n                }\\n                if (approvals_ > 0) {\\n                    _resizeRefs(approvedRefs_, approvals_);\\n                    callback_.afterApprove(\\n                        msg.sender,\\n                        _refsAsEvidences(approvedRefs_)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Any approved address can request some address be approved.\\n    /// Frivolous requestors SHOULD expect to find themselves banned.\\n    /// @param evidences_ Array of evidences to request approvals for.\\n    function requestApprove(Evidence[] calldata evidences_)\\n        external\\n        onlyApproved\\n    {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                emit RequestApprove(msg.sender, evidences_[i_]);\\n            }\\n        }\\n    }\\n\\n    /// A `BANNER` can ban an added OR approved account.\\n    /// @param evidences_ All evidence appropriate for all bans.\\n    function ban(Evidence[] calldata evidences_) external onlyRole(BANNER) {\\n        unchecked {\\n            State memory state_;\\n            uint256[] memory addedRefs_ = new uint256[](evidences_.length);\\n            uint256[] memory bannedRefs_ = new uint256[](evidences_.length);\\n            uint256 additions_ = 0;\\n            uint256 bans_ = 0;\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                Evidence memory evidence_ = evidences_[i_];\\n                state_ = states[evidence_.account];\\n\\n                // There is no requirement that an account be formerly added\\n                // before it is banned. For example some fraud may be detected\\n                // in an affiliated `Verify` contract and the evidence can be\\n                // used to ban the same address in the current contract. In\\n                // this case the account will be added and banned in this call.\\n                if (state_.addedSince < 1) {\\n                    state_ = newState();\\n\\n                    _updateEvidenceRef(addedRefs_, evidence_, additions_);\\n                    additions_++;\\n                }\\n                // Respect prior bans by leaving onchain storage as-is.\\n                if (state_.bannedSince == UNINITIALIZED) {\\n                    state_.bannedSince = uint32(block.timestamp);\\n                    states[evidence_.account] = state_;\\n\\n                    _updateEvidenceRef(bannedRefs_, evidence_, bans_);\\n                    bans_++;\\n                }\\n\\n                // Always emit a `Ban` event even if we didn't write state. This\\n                // ensures that supporting evidence hits the logs for offchain\\n                // review.\\n                emit Ban(msg.sender, evidence_);\\n            }\\n            IVerifyCallback callback_ = callback;\\n            if (address(callback_) != address(0)) {\\n                if (additions_ > 0) {\\n                    _resizeRefs(addedRefs_, additions_);\\n                    callback_.afterAdd(\\n                        msg.sender,\\n                        _refsAsEvidences(addedRefs_)\\n                    );\\n                }\\n                if (bans_ > 0) {\\n                    _resizeRefs(bannedRefs_, bans_);\\n                    callback_.afterBan(\\n                        msg.sender,\\n                        _refsAsEvidences(bannedRefs_)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Any approved address can request some address be banned.\\n    /// Frivolous requestors SHOULD expect to find themselves banned.\\n    /// @param evidences_ Array of evidences to request banning for.\\n    function requestBan(Evidence[] calldata evidences_) external onlyApproved {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                emit RequestBan(msg.sender, evidences_[i_]);\\n            }\\n        }\\n    }\\n\\n    /// A `REMOVER` can scrub state mapping from an account.\\n    /// A malicious account MUST be banned rather than removed.\\n    /// Removal is useful to reset the whole process in case of some mistake.\\n    /// @param evidences_ All evidence to suppor the removal.\\n    function remove(Evidence[] memory evidences_) external onlyRole(REMOVER) {\\n        unchecked {\\n            State memory state_;\\n            uint256[] memory removedRefs_ = new uint256[](evidences_.length);\\n            uint256 removals_ = 0;\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                Evidence memory evidence_ = evidences_[i_];\\n                state_ = states[evidences_[i_].account];\\n                if (state_.addedSince > 0) {\\n                    delete (states[evidence_.account]);\\n                    _updateEvidenceRef(removedRefs_, evidence_, removals_);\\n                    removals_++;\\n                }\\n                emit Remove(msg.sender, evidence_);\\n            }\\n            IVerifyCallback callback_ = callback;\\n            if (address(callback_) != address(0)) {\\n                if (removals_ > 0) {\\n                    _resizeRefs(removedRefs_, removals_);\\n                    callback_.afterRemove(\\n                        msg.sender,\\n                        _refsAsEvidences(removedRefs_)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Any approved address can request some address be removed.\\n    /// Frivolous requestors SHOULD expect to find themselves banned.\\n    /// @param evidences_ Array of evidences to request removal of.\\n    function requestRemove(Evidence[] calldata evidences_)\\n        external\\n        onlyApproved\\n    {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                emit RequestRemove(msg.sender, evidences_[i_]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa537195d178ed1e912fd3a428d0991fce0d0a15fe6abeb686a4eeb6190cd8b52\",\"license\":\"CAL\"},\"contracts/verify/libraries/VerifyConstants.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// Summary statuses derived from a `State` by comparing the `Since` times\\n/// against a specific block number.\\nlibrary VerifyConstants {\\n    /// Account has not interacted with the system yet or was removed.\\n    uint256 internal constant STATUS_NIL = 0;\\n    /// Account has added evidence for themselves.\\n    uint256 internal constant STATUS_ADDED = 1;\\n    /// Approver has reviewed added/approve evidence and approved the account.\\n    uint256 internal constant STATUS_APPROVED = 2;\\n    /// Banner has reviewed a request to ban an account and banned it.\\n    uint256 internal constant STATUS_BANNED = 3;\\n}\\n\",\"keccak256\":\"0x4de94c902f4ebbcd269908e58264e0174395f0f0bda8dd4d96f738995245aa7a\",\"license\":\"CAL\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506001600090815560405161002490610096565b604051809103906000f080158015610040573d6000803e3d6000fd5b50604080513381526001600160a01b03831660208201529192507f7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70910160405180910390a16001600160a01b03166080526100a3565b610be68061075083390190565b60805161068c6100c46000396000818160930152610377015261068c6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632ea72a49146100515780635c60da1b1461008e578063b5367451146100b5578063fc91a897146100c8575b600080fd5b61006461005f36600461050b565b610111565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100647f000000000000000000000000000000000000000000000000000000000000000081565b6100646100c33660046105a2565b6102bf565b6101016100d63660046105a2565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b6040519015158152602001610085565b600060026000541415610185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000908155610196848461035f565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205490915060ff1615610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4455504c49434154455f4348494c440000000000000000000000000000000000604482015260640161017c565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092527f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff831660208201526000913091632ea72a4991016040516020818303038152906040526040518263ffffffff1660e01b815260040161031691906105c6565b6020604051808303816000875af1158015610335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103599190610639565b92915050565b60008061036e838501856105a2565b9050600061039b7f0000000000000000000000000000000000000000000000000000000000000000610429565b6040517fc4d66de800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529192509082169063c4d66de890602401600060405180830381600087803b15801561040857600080fd5b505af115801561041c573d6000803e3d6000fd5b5092979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff8116610506576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161017c565b919050565b6000806020838503121561051e57600080fd5b823567ffffffffffffffff8082111561053657600080fd5b818501915085601f83011261054a57600080fd5b81358181111561055957600080fd5b86602082850101111561056b57600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461059f57600080fd5b50565b6000602082840312156105b457600080fd5b81356105bf8161057d565b9392505050565b600060208083528351808285015260005b818110156105f3578581018301518582016040015282016105d7565b81811115610605576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561064b57600080fd5b81516105bf8161057d56fea2646970667358221220f80eb5070d292b319fba74739ae6152f9945076b230413f5fe463a844d915cfe64736f6c634300080a0033608060405234801561001057600080fd5b50610bc6806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a71461005157806388d6860414610079578063c4d66de81461009a578063caa0eb3b146100af575b600080fd5b61006461005f3660046108ae565b6100c2565b60405190151581526020015b60405180910390f35b61008c610087366004610999565b61015b565b604051908152602001610070565b6100ad6100a8366004610a52565b61032a565b005b61008c6100bd366004610a6d565b6104d9565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f42766d3f00000000000000000000000000000000000000000000000000000000148061015557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600080546040517f31e658a500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152839262010000900416906331e658a590602401606060405180830381865afa1580156101d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f69190610b0b565b600054604080517fb9bd0135000000000000000000000000000000000000000000000000000000008152835163ffffffff90811660048301526020850151811660248301529184015190911660448201524260648201529192506002916201000090910473ffffffffffffffffffffffffffffffffffffffff169063b9bd013590608401602060405180830381865afa158015610297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bb9190610b77565b1415610301576102f97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60006008846020015163ffffffff1661067d565b915050610155565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9392505050565b60006103366001610723565b9050801561036b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b73ffffffffffffffffffffffffffffffffffffffff82166103ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f305f41444452455353000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff8516908102919091179091556040805133815260208101929092527fdc90fed0326ba91706deeac7eb34ac9f8b680734f9d782864dc29704d23bed6a910160405180910390a180156104d557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600080546040517f31e658a500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152839262010000900416906331e658a590602401606060405180830381865afa158015610550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105749190610b0b565b600054604080517fb9bd0135000000000000000000000000000000000000000000000000000000008152835163ffffffff90811660048301526020850151811660248301529184015190911660448201524260648201529192506002916201000090910473ffffffffffffffffffffffffffffffffffffffff169063b9bd013590608401602060405180830381865afa158015610615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106399190610b77565b1415610650576020015163ffffffff169050610675565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b949350505050565b60008260088111156106eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016103e4565b6000855b858110156107175763ffffffff6020820290811b199890981685891b179791506001016106ef565b50959695505050505050565b60008054610100900460ff16156107da578160ff1660011480156107465750303b155b6107d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103e4565b506000919050565b60005460ff808416911610610871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103e4565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b919050565b6000602082840312156108c057600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146108f057600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146108a957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156109915761099161091b565b604052919050565b600080604083850312156109ac57600080fd5b6109b5836108f7565b915060208084013567ffffffffffffffff808211156109d357600080fd5b818601915086601f8301126109e757600080fd5b8135818111156109f9576109f961091b565b8060051b9150610a0a84830161094a565b8181529183018401918481019089841115610a2457600080fd5b938501935b83851015610a4257843582529385019390850190610a29565b8096505050505050509250929050565b600060208284031215610a6457600080fd5b6108f0826108f7565b60008060008060608587031215610a8357600080fd5b610a8c856108f7565b935060208501359250604085013567ffffffffffffffff80821115610ab057600080fd5b818701915087601f830112610ac457600080fd5b813581811115610ad357600080fd5b8860208260051b8501011115610ae857600080fd5b95989497505060200194505050565b805163ffffffff811681146108a957600080fd5b600060608284031215610b1d57600080fd5b6040516060810181811067ffffffffffffffff82111715610b4057610b4061091b565b604052610b4c83610af7565b8152610b5a60208401610af7565b6020820152610b6b60408401610af7565b60408201529392505050565b600060208284031215610b8957600080fd5b505191905056fea2646970667358221220ad7f0bcb7feccc12173b890f13d9da97457a76b7935102054fe9808b8d0d520c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632ea72a49146100515780635c60da1b1461008e578063b5367451146100b5578063fc91a897146100c8575b600080fd5b61006461005f36600461050b565b610111565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100647f000000000000000000000000000000000000000000000000000000000000000081565b6100646100c33660046105a2565b6102bf565b6101016100d63660046105a2565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b6040519015158152602001610085565b600060026000541415610185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000908155610196848461035f565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205490915060ff1615610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4455504c49434154455f4348494c440000000000000000000000000000000000604482015260640161017c565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092527f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff831660208201526000913091632ea72a4991016040516020818303038152906040526040518263ffffffff1660e01b815260040161031691906105c6565b6020604051808303816000875af1158015610335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103599190610639565b92915050565b60008061036e838501856105a2565b9050600061039b7f0000000000000000000000000000000000000000000000000000000000000000610429565b6040517fc4d66de800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529192509082169063c4d66de890602401600060405180830381600087803b15801561040857600080fd5b505af115801561041c573d6000803e3d6000fd5b5092979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff8116610506576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161017c565b919050565b6000806020838503121561051e57600080fd5b823567ffffffffffffffff8082111561053657600080fd5b818501915085601f83011261054a57600080fd5b81358181111561055957600080fd5b86602082850101111561056b57600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461059f57600080fd5b50565b6000602082840312156105b457600080fd5b81356105bf8161057d565b9392505050565b600060208083528351808285015260005b818110156105f3578581018301518582016040015282016105d7565b81811115610605576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561064b57600080fd5b81516105bf8161057d56fea2646970667358221220f80eb5070d292b319fba74739ae6152f9945076b230413f5fe463a844d915cfe64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createChild(bytes)": {
        "params": {
          "data_": "Encoded data to pass down to child contract constructor."
        },
        "returns": {
          "_0": "New child contract address."
        }
      },
      "createChildTyped(address)": {
        "params": {
          "verify_": "`Verify` of the `VerifyTier` logic."
        },
        "returns": {
          "_0": "New `VerifyTier` child contract address."
        }
      },
      "isChild(address)": {
        "params": {
          "maybeChild_": "Address of child contract to look up."
        },
        "returns": {
          "_0": "Returns `true` if address is a contract created by this contract factory, otherwise `false`."
        }
      }
    },
    "title": "VerifyTierFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Implementation(address,address)": {
        "notice": "Factories that clone a template contract MUST emit an event any time they set the implementation being cloned. Factories that deploy new contracts without cloning do NOT need to emit this."
      },
      "NewChild(address,address)": {
        "notice": "Whenever a new child contract is deployed, a `NewChild` event containing the new child contract address MUST be emitted."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Build the reference implementation to clone for each child."
      },
      "createChild(bytes)": {
        "notice": "Implements `IFactory`. Calls the `_createChild` hook that inheriting contracts must override. Registers child contract address such that `isChild` is `true`. Emits `NewChild` event."
      },
      "createChildTyped(address)": {
        "notice": "Typed wrapper for `createChild` with `Verify`. Use original `Factory` `createChild` function signature if function parameters are already encoded."
      },
      "implementation()": {
        "notice": "Template contract to clone. Deployed by the constructor."
      },
      "isChild(address)": {
        "notice": "Implements `IFactory`. Checks if address is registered as a child contract of this factory."
      }
    },
    "notice": "Factory for creating and deploying `VerifyTier` contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1830,
        "contract": "contracts/tier/VerifyTierFactory.sol:VerifyTierFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9000,
        "contract": "contracts/tier/VerifyTierFactory.sol:VerifyTierFactory",
        "label": "contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}