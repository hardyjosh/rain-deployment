{
  "address": "0xb8BADe9783a815512A67B86e5fE967e9B861E102",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vmStateBuilder_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "aOutput",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bOutput",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "aInput",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bInput",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ClearStateChange",
          "name": "stateChange",
          "type": "tuple"
        }
      ],
      "name": "AfterClear",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "inputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "outputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tracking",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "vmState",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "a_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "inputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "outputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tracking",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "vmState",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "b_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "VaultId",
              "name": "aVaultId",
              "type": "uint256"
            },
            {
              "internalType": "VaultId",
              "name": "bVaultId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct BountyConfig",
          "name": "bountyConfig",
          "type": "tuple"
        }
      ],
      "name": "Clear",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct DepositConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "inputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "outputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tracking",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "vmState",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "OrderDead",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "inputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "outputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tracking",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "vmState",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "OrderLive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct WithdrawConfig",
          "name": "config",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "inputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "outputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tracking",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "sources",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "constants",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct StateConfig",
              "name": "vmStateConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct OrderConfig",
          "name": "orderConfig_",
          "type": "tuple"
        }
      ],
      "name": "addOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "inputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "outputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tracking",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "vmState",
              "type": "bytes"
            }
          ],
          "internalType": "struct Order",
          "name": "a_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "inputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "outputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tracking",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "vmState",
              "type": "bytes"
            }
          ],
          "internalType": "struct Order",
          "name": "b_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "VaultId",
              "name": "aVaultId",
              "type": "uint256"
            },
            {
              "internalType": "VaultId",
              "name": "bVaultId",
              "type": "uint256"
            }
          ],
          "internalType": "struct BountyConfig",
          "name": "bountyConfig_",
          "type": "tuple"
        }
      ],
      "name": "clear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct DepositConfig",
          "name": "config_",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fnPtrs",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "inputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "outputVaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tracking",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "vmState",
              "type": "bytes"
            }
          ],
          "internalType": "struct Order",
          "name": "order_",
          "type": "tuple"
        }
      ],
      "name": "removeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageOpcodesRange",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pointer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "length",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageOpcodesRange",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "VaultId",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct WithdrawConfig",
          "name": "config_",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f32cf9e9b453af72038c9991da0ce5e50bb6985c89e8aad7e8e5058f95a576d",
  "receipt": {
    "to": null,
    "from": "0xbF334f8BD1420a1CbFE15407f73919424934B1B3",
    "contractAddress": "0xb8BADe9783a815512A67B86e5fE967e9B861E102",
    "transactionIndex": 0,
    "gasUsed": "4065540",
    "logsBloom": "0x
    "blockHash": "0xbe5b3871761e184dc4c42a20385951e207ba1843e3b5837647e7f9ad46325cb6",
    "transactionHash": "0x3f32cf9e9b453af72038c9991da0ce5e50bb6985c89e8aad7e8e5058f95a576d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26823123,
        "transactionHash": "0x3f32cf9e9b453af72038c9991da0ce5e50bb6985c89e8aad7e8e5058f95a576d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bf334f8bd1420a1cbfe15407f73919424934b1b3",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001e4fcf48c3b63fc000000000000000000000000000000000000000000000000c1196e1228698983000000000000000000000000000000000000000000001b44b9dfc4cedbe0ea0e000000000000000000000000000000000000000000000000bf34711d9c2e2587000000000000000000000000000000000000000000001b44bbc4c1c3681c4e0a",
        "logIndex": 0,
        "blockHash": "0xbe5b3871761e184dc4c42a20385951e207ba1843e3b5837647e7f9ad46325cb6"
      }
    ],
    "blockNumber": 26823123,
    "cumulativeGasUsed": "4065540",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1AC58c61c8D82FC7aaa798a6A5931C9b328841A1"
  ],
  "numDeployments": 1,
  "solcInputHash": "546b903093f71bcf827666e8259a807f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vmStateBuilder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"aOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bInput\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ClearStateChange\",\"name\":\"stateChange\",\"type\":\"tuple\"}],\"name\":\"AfterClear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"inputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"outputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tracking\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"vmState\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"a_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"inputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"outputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tracking\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"vmState\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"b_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"VaultId\",\"name\":\"aVaultId\",\"type\":\"uint256\"},{\"internalType\":\"VaultId\",\"name\":\"bVaultId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct BountyConfig\",\"name\":\"bountyConfig\",\"type\":\"tuple\"}],\"name\":\"Clear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DepositConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"inputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"outputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tracking\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"vmState\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"OrderDead\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"inputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"outputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tracking\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"vmState\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"OrderLive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct WithdrawConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"inputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"outputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tracking\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"sources\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"}],\"internalType\":\"struct StateConfig\",\"name\":\"vmStateConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderConfig\",\"name\":\"orderConfig_\",\"type\":\"tuple\"}],\"name\":\"addOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"inputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"outputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tracking\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"vmState\",\"type\":\"bytes\"}],\"internalType\":\"struct Order\",\"name\":\"a_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"inputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"outputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tracking\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"vmState\",\"type\":\"bytes\"}],\"internalType\":\"struct Order\",\"name\":\"b_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"VaultId\",\"name\":\"aVaultId\",\"type\":\"uint256\"},{\"internalType\":\"VaultId\",\"name\":\"bVaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct BountyConfig\",\"name\":\"bountyConfig_\",\"type\":\"tuple\"}],\"name\":\"clear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct DepositConfig\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fnPtrs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"inputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"outputVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tracking\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"vmState\",\"type\":\"bytes\"}],\"internalType\":\"struct Order\",\"name\":\"order_\",\"type\":\"tuple\"}],\"name\":\"removeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageOpcodesRange\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pointer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageOpcodesRange\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"VaultId\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WithdrawConfig\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Withdraw(address,(address,uint256,uint256),uint256)\":{\"params\":{\"amount\":\"The amount of tokens withdrawn, can be less than the config amount if the vault does not have the funds available to cover the config amount.\",\"config\":\"All config sent to the `withdraw` call.\",\"sender\":\"`msg.sender` withdrawing tokens.\"}}},\"kind\":\"dev\",\"methods\":{\"withdraw((address,uint256,uint256))\":{\"params\":{\"config_\":\"All config required to withdraw. Notably if the amount is less than the current vault balance then the vault will be cleared to 0 rather than the withdraw transaction reverting.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"storageOpcodesRange()\":{\"notice\":\"Default is to disallow all storage access to opcodes.\"},\"withdraw((address,uint256,uint256))\":{\"notice\":\"Allows the sender to withdraw any tokens from their own vaults.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/orderbook/OrderBook.sol\":\"OrderBook\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/ERC20Snapshot.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Arrays.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\\n * total supply at the time are recorded for later access.\\n *\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\n * In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\n * used to create an efficient ERC20 forking mechanism.\\n *\\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\\n * and the account address.\\n *\\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\\n * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\\n *\\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\\n * alternative consider {ERC20Votes}.\\n *\\n * ==== Gas Costs\\n *\\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\\n *\\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\\n * transfers will have normal cost until the next snapshot, and so on.\\n */\\n\\nabstract contract ERC20Snapshot is ERC20 {\\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\n\\n    using Arrays for uint256[];\\n    using Counters for Counters.Counter;\\n\\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\\n    // Snapshot struct, but that would impede usage of functions that work on an array.\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n\\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\\n    Counters.Counter private _currentSnapshotId;\\n\\n    /**\\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\\n     */\\n    event Snapshot(uint256 id);\\n\\n    /**\\n     * @dev Creates a new snapshot and returns its snapshot id.\\n     *\\n     * Emits a {Snapshot} event that contains the same id.\\n     *\\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\\n     *\\n     * [WARNING]\\n     * ====\\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\\n     * you must consider that it can potentially be used by attackers in two ways.\\n     *\\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\\n     * section above.\\n     *\\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\\n     * ====\\n     */\\n    function _snapshot() internal virtual returns (uint256) {\\n        _currentSnapshotId.increment();\\n\\n        uint256 currentId = _getCurrentSnapshotId();\\n        emit Snapshot(currentId);\\n        return currentId;\\n    }\\n\\n    /**\\n     * @dev Get the current snapshotId\\n     */\\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\\n        return _currentSnapshotId.current();\\n    }\\n\\n    /**\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\n     */\\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\\n\\n        return snapshotted ? value : balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\n     */\\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\\n\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // mint\\n            _updateAccountSnapshot(to);\\n            _updateTotalSupplySnapshot();\\n        } else if (to == address(0)) {\\n            // burn\\n            _updateAccountSnapshot(from);\\n            _updateTotalSupplySnapshot();\\n        } else {\\n            // transfer\\n            _updateAccountSnapshot(from);\\n            _updateAccountSnapshot(to);\\n        }\\n    }\\n\\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\\n        require(snapshotId > 0, \\\"ERC20Snapshot: id is 0\\\");\\n        require(snapshotId <= _getCurrentSnapshotId(), \\\"ERC20Snapshot: nonexistent id\\\");\\n\\n        // When a valid snapshot is queried, there are three possibilities:\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\n        //  to this id is the current one.\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\n        //  requested id, and its value is the one to return.\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\n        //  larger than the requested one.\\n        //\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\\n        // exactly this.\\n\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\n\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\n        uint256 currentId = _getCurrentSnapshotId();\\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\\n            snapshots.ids.push(currentId);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\n        if (ids.length == 0) {\\n            return 0;\\n        } else {\\n            return ids[ids.length - 1];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29f7bc7f4d461a2a2698052f71b29344baf0cb7bdb31ca66e4b534a5fc5e844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7bc891be2bc5948340a8fb14ad36c8846230c9086269e37f3febf0dc239c9f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/math/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @dev The scale of all fixed point math. This is adopting the conventions of\\n/// both ETH (wei) and most ERC20 tokens, so is hopefully uncontroversial.\\nuint256 constant FP_DECIMALS = 18;\\n/// @dev The number `1` in the standard fixed point math scaling. Most of the\\n/// differences between fixed point math and regular math is multiplying or\\n/// dividing by `ONE` after the appropriate scaling has been applied.\\nuint256 constant FP_ONE = 1e18;\\n\\n/// @title FixedPointMath\\n/// @notice Sometimes we want to do math with decimal values but all we have\\n/// are integers, typically uint256 integers. Floats are very complex so we\\n/// don't attempt to simulate them. Instead we provide a standard definition of\\n/// \\\"one\\\" as 10 ** 18 and scale everything up/down to this as fixed point math.\\n/// Overflows are errors as per Solidity.\\nlibrary FixedPointMath {\\n    /// Scale a fixed point decimal of some scale factor to match `DECIMALS`.\\n    /// @param a_ Some fixed point decimal value.\\n    /// @param aDecimals_ The number of fixed decimals of `a_`.\\n    /// @return `a_` scaled to match `DECIMALS`.\\n    function scale18(uint256 a_, uint256 aDecimals_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 decimals_;\\n        if (FP_DECIMALS == aDecimals_) {\\n            return a_;\\n        } else if (FP_DECIMALS > aDecimals_) {\\n            unchecked {\\n                decimals_ = FP_DECIMALS - aDecimals_;\\n            }\\n            return a_ * 10**decimals_;\\n        } else {\\n            unchecked {\\n                decimals_ = aDecimals_ - FP_DECIMALS;\\n            }\\n            return a_ / 10**decimals_;\\n        }\\n    }\\n\\n    /// Scale a fixed point decimals of `DECIMALS` to some other scale.\\n    /// @param a_ A `DECIMALS` fixed point decimals.\\n    /// @param targetDecimals_ The new scale of `a_`.\\n    /// @return `a_` rescaled from `DECIMALS` to `targetDecimals_`.\\n    function scaleN(uint256 a_, uint256 targetDecimals_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 decimals_;\\n        if (targetDecimals_ == FP_DECIMALS) {\\n            return a_;\\n        } else if (FP_DECIMALS > targetDecimals_) {\\n            unchecked {\\n                decimals_ = FP_DECIMALS - targetDecimals_;\\n            }\\n            return a_ / 10**decimals_;\\n        } else {\\n            unchecked {\\n                decimals_ = targetDecimals_ - FP_DECIMALS;\\n            }\\n            return a_ * 10**decimals_;\\n        }\\n    }\\n\\n    /// Scale a fixed point up or down by `scaleBy_` orders of magnitude.\\n    /// The caller MUST ensure the end result matches `DECIMALS` if other\\n    /// functions in this library are to work correctly.\\n    /// Notably `scaleBy` is a SIGNED integer so scaling down by negative OOMS\\n    /// is supported.\\n    /// @param a_ Some integer of any scale.\\n    /// @param scaleBy_ OOMs to scale `a_` up or down by.\\n    /// @return `a_` rescaled according to `scaleBy_`.\\n    function scaleBy(uint256 a_, int8 scaleBy_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (scaleBy_ == 0) {\\n            return a_;\\n        } else if (scaleBy_ > 0) {\\n            return a_ * 10**uint8(scaleBy_);\\n        } else {\\n            uint256 posScaleDownBy_;\\n            unchecked {\\n                posScaleDownBy_ = uint8(-1 * scaleBy_);\\n            }\\n            return a_ / 10**posScaleDownBy_;\\n        }\\n    }\\n\\n    /// Fixed point multiplication in native scale decimals.\\n    /// Both `a_` and `b_` MUST be `DECIMALS` fixed point decimals.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return `a_` multiplied by `b_` to `DECIMALS` fixed point decimals.\\n    function fixedPointMul(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (a_ * b_) / FP_ONE;\\n    }\\n\\n    /// Fixed point division in native scale decimals.\\n    /// Both `a_` and `b_` MUST be `DECIMALS` fixed point decimals.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return `a_` divided by `b_` to `DECIMALS` fixed point decimals.\\n    function fixedPointDiv(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (a_ * FP_ONE) / b_;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ac4d2307fb5b32d6c9a428b9704d14c93aa71f171f04215176a611d61aef9c\",\"license\":\"CAL\"},\"contracts/math/SaturatingMath.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title SaturatingMath\\n/// @notice Sometimes we neither want math operations to error nor wrap around\\n/// on an overflow or underflow. In the case of transferring assets an error\\n/// may cause assets to be locked in an irretrievable state within the erroring\\n/// contract, e.g. due to a tiny rounding/calculation error. We also can't have\\n/// assets underflowing and attempting to approve/transfer \\\"infinity\\\" when we\\n/// wanted \\\"almost or exactly zero\\\" but some calculation bug underflowed zero.\\n/// Ideally there are no calculation mistakes, but in guarding against bugs it\\n/// may be safer pragmatically to saturate arithmatic at the numeric bounds.\\n/// Note that saturating div is not supported because 0/0 is undefined.\\nlibrary SaturatingMath {\\n    /// Saturating addition.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ + b_ and max uint256.\\n    function saturatingAdd(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 c_ = a_ + b_;\\n            return c_ < a_ ? type(uint256).max : c_;\\n        }\\n    }\\n\\n    /// Saturating subtraction.\\n    /// @param a_ Minuend.\\n    /// @param b_ Subtrahend.\\n    /// @return Maximum of a_ - b_ and 0.\\n    function saturatingSub(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return a_ > b_ ? a_ - b_ : 0;\\n        }\\n    }\\n\\n    /// Saturating multiplication.\\n    /// @param a_ First term.\\n    /// @param b_ Second term.\\n    /// @return Minimum of a_ * b_ and max uint256.\\n    function saturatingMul(uint256 a_, uint256 b_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being\\n            // zero, but the benefit is lost if 'b' is also tested.\\n            // https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a_ == 0) return 0;\\n            uint256 c_ = a_ * b_;\\n            return c_ / a_ != b_ ? type(uint256).max : c_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9078a23bd04812d8a57e26ef51ddc7f2c6b0c65d8c7cfc2f2ebf40e6642fff88\",\"license\":\"CAL\"},\"contracts/orderbook/OrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../vm/RainVM.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../math/FixedPointMath.sol\\\";\\nimport \\\"../vm/ops/AllStandardOps.sol\\\";\\nimport \\\"./libraries/Vault.sol\\\";\\nimport \\\"./libraries/Order.sol\\\";\\n\\nstruct DepositConfig {\\n    address token;\\n    VaultId vaultId;\\n    uint256 amount;\\n}\\n\\nstruct WithdrawConfig {\\n    address token;\\n    VaultId vaultId;\\n    uint256 amount;\\n}\\n\\nstruct BountyConfig {\\n    VaultId aVaultId;\\n    VaultId bVaultId;\\n}\\n\\nstruct EvalContext {\\n    OrderHash orderHash;\\n    address counterparty;\\n}\\n\\nstruct ClearStateChange {\\n    uint256 aOutput;\\n    uint256 bOutput;\\n    uint256 aInput;\\n    uint256 bInput;\\n}\\n\\n// - order funds cleared\\n// - order counterparty funds cleared\\nuint256 constant LOCAL_OPS_LENGTH = 2;\\n\\nuint256 constant TRACKING_MASK_CLEARED_ORDER = 0x1;\\nuint256 constant TRACKING_MASK_CLEARED_COUNTERPARTY = 0x2;\\n\\nlibrary LibEvalContext {\\n    function toContextBytes(EvalContext memory evalContext_)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        uint256[2] memory vals_;\\n        vals_[0] = OrderHash.unwrap(evalContext_.orderHash);\\n        vals_[1] = uint256(uint160(evalContext_.counterparty));\\n        return abi.encodePacked(vals_);\\n    }\\n}\\n\\ncontract OrderBook is RainVM {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n    using FixedPointMath for uint256;\\n    using LibOrder for OrderLiveness;\\n    using LibOrder for Order;\\n    using LibEvalContext for EvalContext;\\n\\n    event Deposit(address sender, DepositConfig config);\\n    /// @param sender `msg.sender` withdrawing tokens.\\n    /// @param config All config sent to the `withdraw` call.\\n    /// @param amount The amount of tokens withdrawn, can be less than the\\n    /// config amount if the vault does not have the funds available to cover\\n    /// the config amount.\\n    event Withdraw(address sender, WithdrawConfig config, uint256 amount);\\n    event OrderLive(address sender, Order config);\\n    event OrderDead(address sender, Order config);\\n    event Clear(address sender, Order a_, Order b_, BountyConfig bountyConfig);\\n    event AfterClear(ClearStateChange stateChange);\\n\\n    address private immutable self;\\n    address private immutable vmStateBuilder;\\n\\n    // order hash => order liveness\\n    mapping(OrderHash => OrderLiveness) private orders;\\n    // depositor => token => vault => token amount.\\n    mapping(address => mapping(address => mapping(VaultId => uint256)))\\n        private vaults;\\n\\n    // funds were cleared from the hashed order to anyone.\\n    mapping(OrderHash => uint256) private clearedOrder;\\n    // funds were cleared from the owner of the hashed order.\\n    // order owner is the counterparty funds were cleared to.\\n    // order hash => order owner => token amount\\n    mapping(OrderHash => mapping(address => uint256))\\n        private clearedCounterparty;\\n\\n    constructor(address vmStateBuilder_) {\\n        self = address(this);\\n        vmStateBuilder = vmStateBuilder_;\\n    }\\n\\n    function _isTracked(uint256 tracking_, uint256 mask_)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (tracking_ & mask_) > 0;\\n    }\\n\\n    function deposit(DepositConfig calldata config_) external {\\n        vaults[msg.sender][config_.token][config_.vaultId] += config_.amount;\\n        emit Deposit(msg.sender, config_);\\n        IERC20(config_.token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            config_.amount\\n        );\\n    }\\n\\n    /// Allows the sender to withdraw any tokens from their own vaults.\\n    /// @param config_ All config required to withdraw. Notably if the amount\\n    /// is less than the current vault balance then the vault will be cleared\\n    /// to 0 rather than the withdraw transaction reverting.\\n    function withdraw(WithdrawConfig calldata config_) external {\\n        uint256 vaultBalance_ = vaults[msg.sender][config_.token][\\n            config_.vaultId\\n        ];\\n        uint256 withdrawAmount_ = config_.amount.min(vaultBalance_);\\n        vaults[msg.sender][config_.token][config_.vaultId] =\\n            vaultBalance_ -\\n            withdrawAmount_;\\n        emit Withdraw(msg.sender, config_, withdrawAmount_);\\n        IERC20(config_.token).safeTransfer(msg.sender, withdrawAmount_);\\n    }\\n\\n    function addOrder(OrderConfig calldata orderConfig_) external {\\n        Order memory order_ = LibOrder.fromOrderConfig(\\n            vmStateBuilder,\\n            self,\\n            orderConfig_\\n        );\\n        OrderHash orderHash_ = order_.hash();\\n        if (orders[orderHash_].isDead()) {\\n            orders[orderHash_] = ORDER_LIVE;\\n            emit OrderLive(msg.sender, order_);\\n        }\\n    }\\n\\n    function removeOrder(Order calldata order_) external {\\n        require(msg.sender == order_.owner, \\\"OWNER\\\");\\n        OrderHash orderHash_ = order_.hash();\\n        if (orders[orderHash_].isLive()) {\\n            orders[orderHash_] = ORDER_DEAD;\\n            emit OrderDead(msg.sender, order_);\\n        }\\n    }\\n\\n    function clear(\\n        Order memory a_,\\n        Order memory b_,\\n        BountyConfig calldata bountyConfig_\\n    ) external {\\n        OrderHash aHash_ = a_.hash();\\n        OrderHash bHash_ = b_.hash();\\n        {\\n            require(a_.outputToken == b_.inputToken, \\\"TOKEN_MISMATCH\\\");\\n            require(b_.outputToken == a_.inputToken, \\\"TOKEN_MISMATCH\\\");\\n            require(orders[aHash_].isLive(), \\\"A_NOT_LIVE\\\");\\n            require(orders[bHash_].isLive(), \\\"B_NOT_LIVE\\\");\\n        }\\n\\n        ClearStateChange memory stateChange_;\\n\\n        {\\n            // Price is input per output for both a_ and b_.\\n            uint256 aPrice_;\\n            uint256 bPrice_;\\n            // a_ and b_ can both set a maximum output from the VM.\\n            uint256 aOutputMax_;\\n            uint256 bOutputMax_;\\n\\n            // emit the Clear event before a_ and b_ are mutated due to the\\n            // VM execution in eval.\\n            emit Clear(msg.sender, a_, b_, bountyConfig_);\\n\\n            unchecked {\\n                State memory vmState_;\\n                {\\n                    vmState_ = LibState.fromBytesPacked(a_.vmState);\\n                    eval(\\n                        EvalContext(aHash_, b_.owner).toContextBytes(),\\n                        vmState_,\\n                        ENTRYPOINT\\n                    );\\n                    aPrice_ = vmState_.stack[vmState_.stackIndex - 1];\\n                    aOutputMax_ = vmState_.stack[vmState_.stackIndex - 2];\\n                }\\n\\n                {\\n                    vmState_ = LibState.fromBytesPacked(b_.vmState);\\n                    eval(\\n                        EvalContext(bHash_, a_.owner).toContextBytes(),\\n                        vmState_,\\n                        ENTRYPOINT\\n                    );\\n                    bPrice_ = vmState_.stack[vmState_.stackIndex - 1];\\n                    bOutputMax_ = vmState_.stack[vmState_.stackIndex - 2];\\n                }\\n            }\\n\\n            // outputs are capped by the remaining funds in their output vault.\\n            {\\n                aOutputMax_ = aOutputMax_.min(\\n                    vaults[a_.owner][a_.outputToken][a_.outputVaultId]\\n                );\\n                bOutputMax_ = bOutputMax_.min(\\n                    vaults[b_.owner][b_.outputToken][b_.outputVaultId]\\n                );\\n            }\\n\\n            stateChange_.aOutput = aOutputMax_.min(\\n                bOutputMax_.fixedPointMul(bPrice_)\\n            );\\n            stateChange_.bOutput = bOutputMax_.min(\\n                aOutputMax_.fixedPointMul(aPrice_)\\n            );\\n\\n            require(\\n                stateChange_.aOutput > 0 || stateChange_.bOutput > 0,\\n                \\\"0_CLEAR\\\"\\n            );\\n\\n            stateChange_.aInput = stateChange_.aOutput.fixedPointMul(aPrice_);\\n            stateChange_.bInput = stateChange_.bOutput.fixedPointMul(bPrice_);\\n        }\\n\\n        if (stateChange_.aOutput > 0) {\\n            vaults[a_.owner][a_.outputToken][a_.outputVaultId] -= stateChange_\\n                .aOutput;\\n            if (_isTracked(a_.tracking, TRACKING_MASK_CLEARED_ORDER)) {\\n                clearedOrder[aHash_] += stateChange_.aOutput;\\n            }\\n            if (_isTracked(a_.tracking, TRACKING_MASK_CLEARED_COUNTERPARTY)) {\\n                // A counts funds paid to cover the bounty as cleared for B.\\n                clearedCounterparty[aHash_][b_.owner] += stateChange_.aOutput;\\n            }\\n        }\\n        if (stateChange_.bOutput > 0) {\\n            vaults[b_.owner][b_.outputToken][b_.outputVaultId] -= stateChange_\\n                .bOutput;\\n            if (_isTracked(b_.tracking, TRACKING_MASK_CLEARED_ORDER)) {\\n                clearedOrder[bHash_] += stateChange_.bOutput;\\n            }\\n            if (_isTracked(b_.tracking, TRACKING_MASK_CLEARED_COUNTERPARTY)) {\\n                clearedCounterparty[bHash_][a_.owner] += stateChange_.bOutput;\\n            }\\n        }\\n        if (stateChange_.aInput > 0) {\\n            vaults[a_.owner][a_.inputToken][a_.inputVaultId] += stateChange_\\n                .aInput;\\n        }\\n        if (stateChange_.bInput > 0) {\\n            vaults[b_.owner][b_.inputToken][b_.inputVaultId] += stateChange_\\n                .bInput;\\n        }\\n        {\\n            // At least one of these will overflow due to negative bounties if\\n            // there is a spread between the orders.\\n            uint256 aBounty_ = stateChange_.aOutput - stateChange_.bInput;\\n            uint256 bBounty_ = stateChange_.bOutput - stateChange_.aInput;\\n            if (aBounty_ > 0) {\\n                vaults[msg.sender][a_.outputToken][\\n                    bountyConfig_.aVaultId\\n                ] += aBounty_;\\n            }\\n            if (bBounty_ > 0) {\\n                vaults[msg.sender][b_.outputToken][\\n                    bountyConfig_.bVaultId\\n                ] += bBounty_;\\n            }\\n        }\\n\\n        emit AfterClear(stateChange_);\\n    }\\n\\n    function opOrderFundsCleared(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        OrderHash orderHash_;\\n        assembly {\\n            location_ := sub(stackTopLocation_, 0x20)\\n            orderHash_ := mload(location_)\\n        }\\n        uint256 fundsCleared_ = clearedOrder[orderHash_];\\n        assembly {\\n            mstore(location_, fundsCleared_)\\n        }\\n        return stackTopLocation_;\\n    }\\n\\n    function opOrderCounterpartyFundsCleared(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        OrderHash orderHash_;\\n        uint256 counterparty_;\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            location_ := sub(stackTopLocation_, 0x20)\\n            orderHash_ := mload(location_)\\n            counterparty_ := mload(stackTopLocation_)\\n        }\\n        uint256 fundsCleared_ = clearedCounterparty[orderHash_][\\n            address(uint160(counterparty_))\\n        ];\\n        assembly {\\n            mstore(location_, fundsCleared_)\\n        }\\n        return stackTopLocation_;\\n    }\\n\\n    function localFnPtrs() internal pure returns (bytes memory) {\\n        unchecked {\\n            uint256 lenBytes_ = LOCAL_OPS_LENGTH * 0x20;\\n            function(uint256, uint256) pure returns (uint256) zeroFn_;\\n            assembly {\\n                zeroFn_ := 0\\n            }\\n            function(uint256, uint256) view returns (uint256)[LOCAL_OPS_LENGTH +\\n                1]\\n                memory fns_ = [\\n                    // will be overridden with length\\n                    zeroFn_,\\n                    opOrderFundsCleared,\\n                    opOrderCounterpartyFundsCleared\\n                ];\\n            bytes memory ret_;\\n            assembly {\\n                mstore(fns_, lenBytes_)\\n                ret_ := fns_\\n            }\\n            return ret_;\\n        }\\n    }\\n\\n    function fnPtrs() public pure override returns (bytes memory) {\\n        return bytes.concat(AllStandardOps.fnPtrs(), localFnPtrs());\\n    }\\n}\\n\",\"keccak256\":\"0xa4930835acf512b08a7722888c1a02dfbcab3a9e60216177c41ba96705cd7846\",\"license\":\"CAL\"},\"contracts/orderbook/libraries/Order.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"./Vault.sol\\\";\\nimport \\\"../../vm/RainVM.sol\\\";\\nimport \\\"../../vm/VMStateBuilder.sol\\\";\\n\\ntype OrderHash is uint256;\\ntype OrderLiveness is uint256;\\n\\nstruct OrderConfig {\\n    address inputToken;\\n    VaultId inputVaultId;\\n    address outputToken;\\n    VaultId outputVaultId;\\n    uint256 tracking;\\n    StateConfig vmStateConfig;\\n}\\n\\nstruct Order {\\n    address owner;\\n    address inputToken;\\n    VaultId inputVaultId;\\n    address outputToken;\\n    VaultId outputVaultId;\\n    uint256 tracking;\\n    bytes vmState;\\n}\\n\\nuint256 constant ENTRYPOINT = 0;\\nuint256 constant MIN_FINAL_STACK_INDEX = 2;\\n\\nOrderLiveness constant ORDER_DEAD = OrderLiveness.wrap(0);\\nOrderLiveness constant ORDER_LIVE = OrderLiveness.wrap(1);\\n\\nlibrary LibOrder {\\n    function fromOrderConfig(\\n        address vmStateBuilder_,\\n        address vm_,\\n        OrderConfig memory config_\\n    ) internal returns (Order memory) {\\n        Bounds memory bounds_;\\n        bounds_.entrypoint = ENTRYPOINT;\\n        bounds_.minFinalStackIndex = MIN_FINAL_STACK_INDEX;\\n        Bounds[] memory boundss_ = new Bounds[](1);\\n        boundss_[0] = bounds_;\\n        return\\n            Order(\\n                msg.sender,\\n                config_.inputToken,\\n                config_.inputVaultId,\\n                config_.outputToken,\\n                config_.outputVaultId,\\n                config_.tracking,\\n                VMStateBuilder(vmStateBuilder_).buildState(\\n                    vm_,\\n                    config_.vmStateConfig,\\n                    boundss_\\n                )\\n            );\\n    }\\n\\n    function isLive(OrderLiveness liveness_) internal pure returns (bool) {\\n        return\\n            OrderLiveness.unwrap(liveness_) == OrderLiveness.unwrap(ORDER_LIVE);\\n    }\\n\\n    function isDead(OrderLiveness liveness_) internal pure returns (bool) {\\n        return\\n            OrderLiveness.unwrap(liveness_) == OrderLiveness.unwrap(ORDER_DEAD);\\n    }\\n\\n    function hash(Order memory order_) internal pure returns (OrderHash) {\\n        return OrderHash.wrap(uint256(keccak256(abi.encode(order_))));\\n    }\\n}\\n\",\"keccak256\":\"0x4c0e1fe7e21e3030b9e511a8a888125c80e3a27a00717da0425e7fac7eef5169\",\"license\":\"CAL\"},\"contracts/orderbook/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\ntype VaultId is uint256;\\n\",\"keccak256\":\"0x1409009c8817d9db7a5b229a4f1fa6fb1919d7df5c09394982d4efcce51067ec\",\"license\":\"CAL\"},\"contracts/sstore2/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of\\n  data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n    error WriteError();\\n\\n    /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n    function write(bytes memory _data) internal returns (address pointer) {\\n        // Append 00 to _data so contract can't be called\\n        // Build init code\\n        bytes memory code = Bytecode.creationCodeFor(\\n            abi.encodePacked(hex\\\"00\\\", _data)\\n        );\\n\\n        // Deploy contract using create\\n        assembly {\\n            pointer := create(0, add(code, 32), mload(code))\\n        }\\n\\n        // Address MUST be non-zero\\n        if (pointer == address(0)) revert WriteError();\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer, uint256 _start)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first\\n    byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n    function read(\\n        address _pointer,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x233f8e9ad3717999efbf17923c0f16aaf910f79064aff273485237b4f2a1ef2f\",\"license\":\"MIT\"},\"contracts/sstore2/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nlibrary Bytecode {\\n    error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n    /**\\n    @notice Generate a creation code that results on a contract with `_code` as\\n    bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n    function creationCodeFor(bytes memory _code)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n        return\\n            abi.encodePacked(\\n                hex\\\"63\\\",\\n                uint32(_code.length),\\n                hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n                _code\\n            );\\n    }\\n\\n    /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n    function codeSize(address _addr) internal view returns (uint256 size) {\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n    }\\n\\n    /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n    function codeAt(\\n        address _addr,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal view returns (bytes memory oCode) {\\n        uint256 csize = codeSize(_addr);\\n        if (csize == 0) return bytes(\\\"\\\");\\n\\n        if (_start > csize) return bytes(\\\"\\\");\\n        if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end);\\n\\n        unchecked {\\n            uint256 reqSize = _end - _start;\\n            uint256 maxSize = csize - _start;\\n\\n            uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n            assembly {\\n                // allocate output byte array - this could also be done without\\n                // assembly\\n                // by using o_code = new bytes(size)\\n                oCode := mload(0x40)\\n                // new \\\"memory end\\\" including padding\\n                mstore(\\n                    0x40,\\n                    add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n                )\\n                // store length in memory\\n                mstore(oCode, size)\\n                // actually retrieve the code, this needs assembly\\n                extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb113974373d234e70f518f0f7c3f34162c008031c168ba3b8ed12f438d5e7145\",\"license\":\"MIT\"},\"contracts/tier/ITierV2.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// @title ITierV2\\n/// @notice `ITierV2` is a simple interface that contracts can implement to\\n/// provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITierV2`:\\n/// - MUST represent held tiers as a `uint`.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the time each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at `1`; Tier `0` is implied if no tier has ever\\n///     been held.\\n///   - Tier `0` is NOT encoded in the report, it is simply the fallback value.\\n///   - If a tier is lost the time data is erased for that tier and will be\\n///     set if/when the tier is regained to the new time.\\n///   - If a tier is held but the historical time information is not available\\n///     the report MAY return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n///   - Context can be a list of numbers that MAY pairwise define tiers such as\\n///     minimum thresholds, or MAY simply provide global context such as a\\n///     relevant NFT ID for example.\\n/// - MUST implement `reportTimeForTier`\\n///   - Functions exactly as `report` but only returns a single time for a\\n///     single tier\\n///   - MUST return the same time value `report` would for any given tier and\\n///     context combination.\\n///\\n/// So the four possible states and report values are:\\n/// - Tier is held and time is known: Timestamp is in the report\\n/// - Tier is held but time is NOT known: `0` is in the report\\n/// - Tier is NOT held: `0xFF..` is in the report\\n/// - Tier is unknown: `0xFF..` is in the report\\n///\\n/// The reason `context` is specified as a list of values rather than arbitrary\\n/// bytes is to allow clear and efficient compatibility with VM stacks. Some N\\n/// values can be taken from a VM stack and used directly as a context, which\\n/// would be difficult or impossible to ensure is safe for arbitrary bytes.\\ninterface ITierV2 {\\n    /// Same as report but only returns the time for a single tier.\\n    /// Often the implementing contract can calculate a single tier more\\n    /// efficiently than all 8 tiers. If the consumer only needs one or a few\\n    /// tiers it MAY be much cheaper to request only those tiers individually.\\n    /// This DOES NOT apply to all contracts, an obvious example is token\\n    /// balance based tiers which always return `ALWAYS` or `NEVER` for all\\n    /// tiers so no efficiency is gained.\\n    /// The return value is a `uint256` for gas efficiency but the values will\\n    /// be bounded by `type(uint32).max` as no single tier can report a value\\n    /// higher than this.\\n    function reportTimeForTier(\\n        address account,\\n        uint256 tier,\\n        uint256[] calldata context\\n    ) external view returns (uint256 time);\\n\\n    /// Same as `ITier` but with a list of values for `context` which allows a\\n    /// single underlying state to present many different reports dynamically.\\n    ///\\n    /// For example:\\n    /// - Staking ledgers can calculate different tier thresholds\\n    /// - NFTs can give different tiers based on different IDs\\n    /// - Snapshot ERC20s can give different reports based on snapshot ID\\n    ///\\n    /// `context` supercedes `setTier` function and `TierChange` event from\\n    /// `ITier` at the interface level. Implementing contracts are free to\\n    /// inherit both `ITier` and `ITierV2` if the old behaviour is desired.\\n    function report(address account, uint256[] calldata context)\\n        external\\n        view\\n        returns (uint256 report);\\n}\\n\",\"keccak256\":\"0xdc851fc7cd82f9752a2bc96dfe3914257af6a970f514a0a7ed50a7b327c4d035\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierConstants.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title TierConstants\\n/// @notice Constants for use with tier logic.\\nlibrary TierConstants {\\n    /// NEVER is 0xFF.. as it is infinitely in the future.\\n    /// NEVER for an entire report.\\n    uint256 internal constant NEVER_REPORT = type(uint256).max;\\n    /// NEVER for a single tier time.\\n    uint32 internal constant NEVER_TIME = type(uint32).max;\\n\\n    /// Always is 0 as it is the genesis block.\\n    /// Tiers can't predate the chain but they can predate an `ITierV2`\\n    /// contract.\\n    uint256 internal constant ALWAYS = 0;\\n\\n    /// Account has never held a tier.\\n    uint256 internal constant TIER_ZERO = 0;\\n\\n    /// Magic number for tier one.\\n    uint256 internal constant TIER_ONE = 1;\\n    /// Magic number for tier two.\\n    uint256 internal constant TIER_TWO = 2;\\n    /// Magic number for tier three.\\n    uint256 internal constant TIER_THREE = 3;\\n    /// Magic number for tier four.\\n    uint256 internal constant TIER_FOUR = 4;\\n    /// Magic number for tier five.\\n    uint256 internal constant TIER_FIVE = 5;\\n    /// Magic number for tier six.\\n    uint256 internal constant TIER_SIX = 6;\\n    /// Magic number for tier seven.\\n    uint256 internal constant TIER_SEVEN = 7;\\n    /// Magic number for tier eight.\\n    uint256 internal constant TIER_EIGHT = 8;\\n    /// Maximum tier is `TIER_EIGHT`.\\n    uint256 internal constant MAX_TIER = TIER_EIGHT;\\n}\\n\",\"keccak256\":\"0x4d73c7a5d50d7dddfd0a6cacaf5a366f99b80199dc9f9e8aa9ba77e2736a19e5\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierReport.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ITierV2} from \\\"../ITierV2.sol\\\";\\nimport \\\"./TierConstants.sol\\\";\\n\\n/// @title TierReport\\n/// @notice `TierReport` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtTimeFromReport`: Returns the highest status achieved relative to\\n/// a block timestamp and report. Statuses gained after that block are ignored.\\n/// - `tierTime`: Returns the timestamp that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateTimesForTierRange`: Updates a report with a timestamp for every\\n///    tier in a range.\\n/// - `updateReportWithTierAtTime`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this\\n/// factors that out.\\nlibrary TierReport {\\n    /// Enforce upper limit on tiers so we can do unchecked math.\\n    /// @param tier_ The tier to enforce bounds on.\\n    modifier maxTier(uint256 tier_) {\\n        require(tier_ <= TierConstants.MAX_TIER, \\\"MAX_TIER\\\");\\n        _;\\n    }\\n\\n    /// Returns the highest tier achieved relative to a block timestamp\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.timestamp` but not always. Tiers gained after the\\n    /// reference time are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `timestamp_` this\\n    /// means the user must have held the tier continuously from `timestamp_`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITierV2`.\\n    /// @param timestamp_ The timestamp to check the tiers against.\\n    /// @return tier_ The highest tier held since `timestamp_` as per `report`.\\n    function tierAtTimeFromReport(uint256 report_, uint256 timestamp_)\\n        internal\\n        pure\\n        returns (uint256 tier_)\\n    {\\n        unchecked {\\n            for (tier_ = 0; tier_ < 8; tier_++) {\\n                if (uint32(uint256(report_ >> (tier_ * 32))) > timestamp_) {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Returns the timestamp that a given tier has been held since from a\\n    /// report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtTimeFromReport`.\\n    ///\\n    /// @param report_ The report to read a timestamp from.\\n    /// @param tier_ The Tier to read the timestamp for.\\n    /// @return timestamp_ The timestamp the tier has been held since.\\n    function reportTimeForTier(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256 timestamp_)\\n    {\\n        unchecked {\\n            // ZERO is a special case. Everyone has always been at least ZERO,\\n            // since block 0.\\n            if (tier_ == 0) {\\n                return 0;\\n            }\\n\\n            uint256 offset_ = (tier_ - 1) * 32;\\n            timestamp_ = uint256(uint32(uint256(report_ >> offset_)));\\n        }\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            uint256 mask_ = (TierConstants.NEVER_REPORT >> offset_) << offset_;\\n            return report_ | mask_;\\n        }\\n    }\\n\\n    /// Updates a report with a timestamp for a given tier.\\n    /// More gas efficient than `updateTimesForTierRange` if only a single\\n    /// tier is being modified.\\n    /// The tier at/above the given tier is updated. E.g. tier `0` will update\\n    /// the time for tier `1`.\\n    /// @param report_ Report to use as the baseline for the updated report.\\n    /// @param tier_ The tier level to update.\\n    /// @param timestamp_ The new block number for `tier_`.\\n    /// @return updatedReport_ The newly updated `report_`.\\n    function updateTimeAtTier(\\n        uint256 report_,\\n        uint256 tier_,\\n        uint256 timestamp_\\n    ) internal pure maxTier(tier_) returns (uint256 updatedReport_) {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            updatedReport_ =\\n                (report_ &\\n                    ~uint256(uint256(TierConstants.NEVER_TIME) << offset_)) |\\n                uint256(timestamp_ << offset_);\\n        }\\n    }\\n\\n    /// Updates a report with a block number for every tier in a range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start tier.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier at the start of the range (exclusive).\\n    /// @param endTier_ The tier at the end of the range (inclusive).\\n    /// @param timestamp_ The timestamp to set for every tier in the range.\\n    /// @return updatedReport_ The updated report.\\n    function updateTimesForTierRange(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 timestamp_\\n    ) internal pure maxTier(endTier_) returns (uint256 updatedReport_) {\\n        unchecked {\\n            uint256 offset_;\\n            for (uint256 i_ = startTier_; i_ < endTier_; i_++) {\\n                offset_ = i_ * 32;\\n                report_ =\\n                    (report_ &\\n                        ~uint256(\\n                            uint256(TierConstants.NEVER_TIME) << offset_\\n                        )) |\\n                    uint256(timestamp_ << offset_);\\n            }\\n            updatedReport_ = report_;\\n        }\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param timestamp_ The timestamp_ to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return updatedReport_ The updated report.\\n    function updateReportWithTierAtTime(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 timestamp_\\n    ) internal pure returns (uint256 updatedReport_) {\\n        updatedReport_ = endTier_ < startTier_\\n            ? truncateTiersAbove(report_, endTier_)\\n            : updateTimesForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                timestamp_\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x814ae8971bdddb4a0c8b3e460d1c338bc03a43c0e27452f5338816408519115e\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierwiseCombine.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TierReport.sol\\\";\\nimport \\\"../../math/SaturatingMath.sol\\\";\\n\\nlibrary TierwiseCombine {\\n    using Math for uint256;\\n    using SaturatingMath for uint256;\\n\\n    /// Every lte check in `selectLte` must pass.\\n    uint256 internal constant LOGIC_EVERY = 0;\\n    /// Only one lte check in `selectLte` must pass.\\n    uint256 internal constant LOGIC_ANY = 1;\\n\\n    /// Select the minimum block number from passing blocks in `selectLte`.\\n    uint256 internal constant MODE_MIN = 0;\\n    /// Select the maximum block number from passing blocks in `selectLte`.\\n    uint256 internal constant MODE_MAX = 1;\\n    /// Select the first block number that passes in `selectLte`.\\n    uint256 internal constant MODE_FIRST = 2;\\n\\n    /// Performs a tierwise saturating subtraction of two reports.\\n    /// Intepret as \\\"# of blocks older report was held before newer report\\\".\\n    /// If older report is in fact newer then `0` will be returned.\\n    /// i.e. the diff cannot be negative, older report as simply spent 0 blocks\\n    /// existing before newer report, if it is in truth the newer report.\\n    /// @param newerReport_ Block to subtract from.\\n    /// @param olderReport_ Block to subtract.\\n    function saturatingSub(uint256 newerReport_, uint256 olderReport_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 ret_;\\n            for (uint256 tier_ = 1; tier_ <= 8; tier_++) {\\n                uint256 newerBlock_ = TierReport.reportTimeForTier(\\n                    newerReport_,\\n                    tier_\\n                );\\n                uint256 olderBlock_ = TierReport.reportTimeForTier(\\n                    olderReport_,\\n                    tier_\\n                );\\n                uint256 diff_ = newerBlock_.saturatingSub(olderBlock_);\\n                ret_ = TierReport.updateTimeAtTier(ret_, tier_ - 1, diff_);\\n            }\\n            return ret_;\\n        }\\n    }\\n\\n    /// Given a list of reports, selects the best tier in a tierwise fashion.\\n    /// The \\\"best\\\" criteria can be configured by `logic_` and `mode_`.\\n    /// Logic can be \\\"every\\\" or \\\"any\\\", which means that the reports for a given\\n    /// tier must either all or any be less than or equal to the reference\\n    /// `blockNumber_`.\\n    /// Mode can be \\\"min\\\", \\\"max\\\", \\\"first\\\" which selects between all the block\\n    /// numbers for a given tier that meet the lte criteria.\\n    /// IMPORTANT: If the output of `selectLte` is used to write to storage\\n    /// care must be taken to ensure that \\\"upcoming\\\" tiers relative to the\\n    /// `blockNumber_` are not overwritten inappropriately. Typically this\\n    /// function should be used as a filter over reads only from an upstream\\n    /// source of truth.\\n    /// @param reports_ The list of reports to select over.\\n    /// @param blockNumber_ The block number that tier blocks must be lte.\\n    /// @param logic_ `LOGIC_EVERY` or `LOGIC_ANY`.\\n    /// @param mode_ `MODE_MIN`, `MODE_MAX` or `MODE_FIRST`.\\n    function selectLte(\\n        uint256[] memory reports_,\\n        uint256 blockNumber_,\\n        uint256 logic_,\\n        uint256 mode_\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 ret_;\\n            uint256 block_;\\n            bool anyLte_;\\n            uint256 length_ = reports_.length;\\n            for (uint256 tier_ = 1; tier_ <= 8; tier_++) {\\n                uint256 accumulator_;\\n                // Nothing lte the reference block for this tier yet.\\n                anyLte_ = false;\\n\\n                // Initialize the accumulator for this tier.\\n                if (mode_ == MODE_MIN) {\\n                    accumulator_ = TierConstants.NEVER_REPORT;\\n                } else {\\n                    accumulator_ = 0;\\n                }\\n\\n                // Filter all the blocks at the current tier from all the\\n                // reports against the reference tier and each other.\\n                for (uint256 i_ = 0; i_ < length_; i_++) {\\n                    block_ = TierReport.reportTimeForTier(reports_[i_], tier_);\\n\\n                    if (block_ <= blockNumber_) {\\n                        // Min and max need to compare current value against\\n                        // the accumulator.\\n                        if (mode_ == MODE_MIN) {\\n                            accumulator_ = block_.min(accumulator_);\\n                        } else if (mode_ == MODE_MAX) {\\n                            accumulator_ = block_.max(accumulator_);\\n                        } else if (mode_ == MODE_FIRST && !anyLte_) {\\n                            accumulator_ = block_;\\n                        }\\n                        anyLte_ = true;\\n                    } else if (logic_ == LOGIC_EVERY) {\\n                        // Can short circuit for an \\\"every\\\" check.\\n                        accumulator_ = TierConstants.NEVER_REPORT;\\n                        break;\\n                    }\\n                }\\n                if (!anyLte_) {\\n                    accumulator_ = TierConstants.NEVER_REPORT;\\n                }\\n                ret_ = TierReport.updateTimeAtTier(\\n                    ret_,\\n                    tier_ - 1,\\n                    accumulator_\\n                );\\n            }\\n            return ret_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc2fc43f70f19af29a6b08f0de69ebde9ccdb6f1e360f22747071c5076a11a69c\",\"license\":\"CAL\"},\"contracts/vm/RainVM.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../math/SaturatingMath.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// Everything required to evaluate and track the state of a rain script.\\n/// As this is a struct it will be in memory when passed to `RainVM` and so\\n/// will be modified by reference internally. This is important for gas\\n/// efficiency; the stack, arguments and stackIndex will likely be mutated by\\n/// the running script.\\n/// @param stackIndex Opcodes write to the stack at the stack index and can\\n/// consume from the stack by decrementing the index and reading between the\\n/// old and new stack index.\\n/// IMPORANT: The stack is never zeroed out so the index must be used to\\n/// find the \\\"top\\\" of the stack as the result of an `eval`.\\n/// @param stack Stack is the general purpose runtime state that opcodes can\\n/// read from and write to according to their functionality.\\n/// @param sources Sources available to be executed by `eval`.\\n/// Notably `ZIPMAP` can also select a source to execute by index.\\n/// @param constants Constants that can be copied to the stack by index by\\n/// `VAL`.\\n/// @param arguments `ZIPMAP` populates arguments which can be copied to the\\n/// stack by `VAL`.\\nstruct State {\\n    uint256 stackIndex;\\n    uint256[] stack;\\n    bytes[] ptrSources;\\n    uint256[] constants;\\n    /// `ZIPMAP` populates arguments into constants which can be copied to the\\n    /// stack by `VAL` as usual, starting from this index. This copying is\\n    /// destructive so it is recommended to leave space in the constants array.\\n    uint256 argumentsIndex;\\n}\\n\\nstruct StorageOpcodesRange {\\n    uint256 pointer;\\n    uint256 length;\\n}\\n\\nlibrary LibState {\\n    /// Put the state back to a freshly eval-able value. The same state can be\\n    /// run more than once (e.g. two different entrypoints) to yield different\\n    /// stacks, as long as all the sources are VALID and reset is called\\n    /// between each eval call.\\n    /// Generally this should be called whenever eval is run over a state that\\n    /// is exposed to the calling context (e.g. it is an argument) so that the\\n    /// caller may safely eval multiple times on any state it has in scope.\\n    function reset(State memory state_) internal pure {\\n        state_.stackIndex = 0;\\n    }\\n\\n    function toBytesDebug(State memory state_)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(state_);\\n    }\\n\\n    function fromBytesPacked(bytes memory stateBytes_)\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        unchecked {\\n            State memory state_;\\n            uint256 indexes_;\\n            assembly {\\n                // Load indexes from state bytes.\\n                indexes_ := mload(add(stateBytes_, 0x20))\\n                // mask out everything but the constants length from state\\n                // bytes.\\n                mstore(add(stateBytes_, 0x20), and(indexes_, 0xFF))\\n                // point state constants at state bytes\\n                mstore(add(state_, 0x60), add(stateBytes_, 0x20))\\n            }\\n            // Stack index 0 is implied.\\n            state_.stack = new uint256[]((indexes_ >> 8) & 0xFF);\\n            state_.argumentsIndex = (indexes_ >> 16) & 0xFF;\\n            uint256 sourcesLen_ = (indexes_ >> 24) & 0xFF;\\n            bytes[] memory ptrSources_;\\n            uint256[] memory ptrSourcesPtrs_ = new uint256[](sourcesLen_);\\n\\n            assembly {\\n                let sourcesStart_ := add(\\n                    stateBytes_,\\n                    add(\\n                        // 0x40 for constants and state array length\\n                        0x40,\\n                        // skip over length of constants\\n                        mul(0x20, mload(add(stateBytes_, 0x20)))\\n                    )\\n                )\\n                let cursor_ := sourcesStart_\\n\\n                for {\\n                    let i_ := 0\\n                } lt(i_, sourcesLen_) {\\n                    i_ := add(i_, 1)\\n                } {\\n                    // sources_ is a dynamic array so it is a list of\\n                    // pointers that can be set literally to the cursor_\\n                    mstore(\\n                        add(ptrSourcesPtrs_, add(0x20, mul(i_, 0x20))),\\n                        cursor_\\n                    )\\n                    // move the cursor by the length of the source in bytes\\n                    cursor_ := add(cursor_, add(0x20, mload(cursor_)))\\n                }\\n                // point state at sources_ rather than clone in memory\\n                ptrSources_ := ptrSourcesPtrs_\\n                mstore(add(state_, 0x40), ptrSources_)\\n            }\\n            return state_;\\n        }\\n    }\\n\\n    function toBytesPacked(State memory state_)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        unchecked {\\n            // indexes + constants\\n            uint256[] memory constants_ = state_.constants;\\n            // constants is first so we can literally use it on the other end\\n            uint256 indexes_ = state_.constants.length |\\n                (state_.stack.length << 8) |\\n                (state_.argumentsIndex << 16) |\\n                (state_.ptrSources.length << 24);\\n            bytes memory ret_ = bytes.concat(\\n                bytes32(indexes_),\\n                abi.encodePacked(constants_)\\n            );\\n            for (uint256 i_ = 0; i_ < state_.ptrSources.length; i_++) {\\n                ret_ = bytes.concat(\\n                    ret_,\\n                    bytes32(state_.ptrSources[i_].length),\\n                    state_.ptrSources[i_]\\n                );\\n            }\\n            return ret_;\\n        }\\n    }\\n}\\n\\n/// @dev Copies a value either off `constants` to the top of the stack.\\nuint256 constant OPCODE_CONSTANT = 0;\\n/// @dev Duplicates any value in the stack to the top of the stack. The operand\\n/// specifies the index to copy from.\\nuint256 constant OPCODE_STACK = 1;\\nuint256 constant OPCODE_CONTEXT = 2;\\nuint256 constant OPCODE_STORAGE = 3;\\n/// @dev Takes N values off the stack, interprets them as an array then zips\\n/// and maps a source from `sources` over them.\\nuint256 constant OPCODE_ZIPMAP = 4;\\n/// @dev ABI encodes the entire stack and logs it to the hardhat console.\\nuint256 constant OPCODE_DEBUG = 5;\\n/// @dev Number of provided opcodes for `RainVM`.\\nuint256 constant RAIN_VM_OPS_LENGTH = 6;\\n\\nuint256 constant DEBUG_STATE_ABI = 0;\\nuint256 constant DEBUG_STATE_PACKED = 1;\\nuint256 constant DEBUG_STACK = 2;\\nuint256 constant DEBUG_STACK_INDEX = 3;\\n\\n/// @title RainVM\\n/// @notice micro VM for implementing and executing custom contract DSLs.\\n/// Libraries and contracts map opcodes to `view` functionality then RainVM\\n/// runs rain scripts using these opcodes. Rain scripts dispatch as pairs of\\n/// bytes. The first byte is an opcode to run and the second byte is a value\\n/// the opcode can use contextually to inform how to run. Typically opcodes\\n/// will read/write to the stack to produce some meaningful final state after\\n/// all opcodes have been dispatched.\\n///\\n/// The only thing required to run a rain script is a `State` struct to pass\\n/// to `eval`, and the index of the source to run. Additional context can\\n/// optionally be provided to be used by opcodes. For example, an `ITierV2`\\n/// contract can take the input of `report`, abi encode it as context, then\\n/// expose a local opcode that copies this account to the stack. The state will\\n/// be mutated by reference rather than returned by `eval`, this is to make it\\n/// very clear to implementers that the inline mutation is occurring.\\n///\\n/// Rain scripts run \\\"top to bottom\\\", i.e. \\\"left to right\\\".\\n/// See the tests for examples on how to construct rain script in JavaScript\\n/// then pass to `ImmutableSource` contracts deployed by a factory that then\\n/// run `eval` to produce a final value.\\n///\\n/// There are only 4 \\\"core\\\" opcodes for `RainVM`:\\n/// - `0`: Copy value from either `constants` at index `operand` to the top of\\n///   the stack.\\n/// - `1`: Duplicates the value at stack index `operand_` to the top of the\\n///   stack.\\n/// - `2`: Zipmap takes N values from the stack, interprets each as an array of\\n///   configurable length, then zips them into `arguments` and maps a source\\n///   from `sources` over these. See `zipmap` for more details.\\n/// - `3`: Debug prints the state to the console log as per hardhat.\\n///\\n/// To do anything useful the contract that inherits `RainVM` needs to provide\\n/// opcodes to build up an internal DSL. This may sound complex but it only\\n/// requires mapping opcode integers to functions to call, and reading/writing\\n/// values to the stack as input/output for these functions. Further, opcode\\n/// packs are provided in rain that any inheriting contract can use as a normal\\n/// solidity library. See `MathOps.sol` opcode pack and the\\n/// `CalculatorTest.sol` test contract for an example of how to dispatch\\n/// opcodes and handle the results in a wrapping contract.\\n///\\n/// RainVM natively has no concept of branching logic such as `if` or loops.\\n/// An opcode pack could implement these similar to the core zipmap by lazily\\n/// evaluating a source from `sources` based on some condition, etc. Instead\\n/// some simpler, eagerly evaluated selection tools such as `min` and `max` in\\n/// the `MathOps` opcode pack are provided. Future versions of `RainVM` MAY\\n/// implement lazy `if` and other similar patterns.\\n///\\n/// The `eval` function is `view` because rain scripts are expected to compute\\n/// results only without modifying any state. The contract wrapping the VM is\\n/// free to mutate as usual. This model encourages exposing only read-only\\n/// functionality to end-user deployers who provide scripts to a VM factory.\\n/// Removing all writes removes a lot of potential foot-guns for rain script\\n/// authors and allows VM contract authors to reason more clearly about the\\n/// input/output of the wrapping solidity code.\\n///\\n/// Internally `RainVM` makes heavy use of unchecked math and assembly logic\\n/// as the opcode dispatch logic runs on a tight loop and so gas costs can ramp\\n/// up very quickly. Implementing contracts and opcode packs SHOULD require\\n/// that opcodes they receive do not exceed the codes they are expecting.\\nabstract contract RainVM {\\n    using Math for uint256;\\n    using SaturatingMath for uint256;\\n\\n    /// Default is to disallow all storage access to opcodes.\\n    function storageOpcodesRange()\\n        public\\n        pure\\n        virtual\\n        returns (StorageOpcodesRange memory)\\n    {\\n        return StorageOpcodesRange(0, 0);\\n    }\\n\\n    function fnPtrs() public pure virtual returns (bytes memory);\\n\\n    /// Zipmap is rain script's native looping construct.\\n    /// N values are taken from the stack as `uint256` then split into `uintX`\\n    /// values where X is configurable by `operand_`. Each 1 increment in the\\n    /// operand size config doubles the number of items in the implied arrays.\\n    /// For example, size 0 is 1 `uint256` value, size 1 is\\n    /// `2x `uint128` values, size 2 is 4x `uint64` values and so on.\\n    ///\\n    /// The implied arrays are zipped and then copied into `arguments` and\\n    /// mapped over with a source from `sources`. Each iteration of the mapping\\n    /// copies values into `arguments` from index `0` but there is no attempt\\n    /// to zero out any values that may already be in the `arguments` array.\\n    /// It is the callers responsibility to ensure that the `arguments` array\\n    /// is correctly sized and populated for the mapped source.\\n    ///\\n    /// The `operand_` for the zipmap opcode is split into 3 components:\\n    /// - 3 low bits: The index of the source to use from `sources`.\\n    /// - 2 middle bits: The size of the loop, where 0 is 1 iteration\\n    /// - 3 high bits: The number of vals to be zipped from the stack where 0\\n    ///   is 1 value to be zipped.\\n    ///\\n    /// This is a separate function to avoid blowing solidity compile stack.\\n    /// In the future it may be moved inline to `eval` for gas efficiency.\\n    ///\\n    /// See https://en.wikipedia.org/wiki/Zipping_(computer_science)\\n    /// See https://en.wikipedia.org/wiki/Map_(higher-order_function)\\n    /// @param context_ Domain specific context the wrapping contract can\\n    /// provide to passthrough back to its own opcodes.\\n    /// @param state_ The execution state of the VM.\\n    /// @param operand_ The operand_ associated with this dispatch to zipmap.\\n    function zipmap(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 stackTopLocation_,\\n        uint256 operand_\\n    ) internal view returns (uint256) {\\n        unchecked {\\n            uint256 sourceIndex_ = operand_ & 0x07;\\n            uint256 loopSize_ = (operand_ >> 3) & 0x03;\\n            uint256 mask_;\\n            uint256 stepSize_;\\n            if (loopSize_ == 0) {\\n                mask_ = type(uint256).max;\\n                stepSize_ = 0x100;\\n            } else if (loopSize_ == 1) {\\n                mask_ = type(uint128).max;\\n                stepSize_ = 0x80;\\n            } else if (loopSize_ == 2) {\\n                mask_ = type(uint64).max;\\n                stepSize_ = 0x40;\\n            } else {\\n                mask_ = type(uint32).max;\\n                stepSize_ = 0x20;\\n            }\\n            uint256 valLength_ = (operand_ >> 5) + 1;\\n\\n            // Set aside base values so they can't be clobbered during eval\\n            // as the stack changes on each loop.\\n            uint256[] memory baseVals_ = new uint256[](valLength_);\\n            uint256 baseValsBottom_;\\n            {\\n                assembly {\\n                    baseValsBottom_ := add(baseVals_, 0x20)\\n                    for {\\n                        let cursor_ := sub(\\n                            stackTopLocation_,\\n                            mul(valLength_, 0x20)\\n                        )\\n                        let baseValsCursor_ := baseValsBottom_\\n                    } lt(cursor_, stackTopLocation_) {\\n                        cursor_ := add(cursor_, 0x20)\\n                        baseValsCursor_ := add(baseValsCursor_, 0x20)\\n                    } {\\n                        mstore(baseValsCursor_, mload(cursor_))\\n                    }\\n                }\\n            }\\n\\n            uint256 argumentsBottomLocation_;\\n            assembly {\\n                let constantsBottomLocation_ := add(\\n                    mload(add(state_, 0x60)),\\n                    0x20\\n                )\\n                argumentsBottomLocation_ := add(\\n                    constantsBottomLocation_,\\n                    mul(\\n                        0x20,\\n                        mload(\\n                            // argumentsIndex\\n                            add(state_, 0x80)\\n                        )\\n                    )\\n                )\\n            }\\n\\n            for (uint256 step_ = 0; step_ < 0x100; step_ += stepSize_) {\\n                // Prepare arguments.\\n                {\\n                    // max cursor is in this scope to avoid stack overflow from\\n                    // solidity.\\n                    uint256 maxCursor_ = baseValsBottom_ + (valLength_ * 0x20);\\n                    uint256 argumentsCursor_ = argumentsBottomLocation_;\\n                    uint256 cursor_ = baseValsBottom_;\\n                    while (cursor_ < maxCursor_) {\\n                        assembly {\\n                            mstore(\\n                                argumentsCursor_,\\n                                and(shr(step_, mload(cursor_)), mask_)\\n                            )\\n                            cursor_ := add(cursor_, 0x20)\\n                            argumentsCursor_ := add(argumentsCursor_, 0x20)\\n                        }\\n                    }\\n                }\\n                stackTopLocation_ = eval(context_, state_, sourceIndex_);\\n            }\\n            return stackTopLocation_;\\n        }\\n    }\\n\\n    /// Evaluates a rain script.\\n    /// The main workhorse of the rain VM, `eval` runs any core opcodes and\\n    /// dispatches anything it is unaware of to the implementing contract.\\n    /// For a script to be useful the implementing contract must override\\n    /// `applyOp` and dispatch non-core opcodes to domain specific logic. This\\n    /// could be mathematical operations for a calculator, tier reports for\\n    /// a membership combinator, entitlements for a minting curve, etc.\\n    ///\\n    /// Everything required to coordinate the execution of a rain script to\\n    /// completion is contained in the `State`. The context and source index\\n    /// are provided so the caller can provide additional data and kickoff the\\n    /// opcode dispatch from the correct source in `sources`.\\n    function eval(\\n        bytes memory context_,\\n        State memory state_,\\n        uint256 sourceIndex_\\n    ) internal view returns (uint256) {\\n        unchecked {\\n            uint256 pc_ = 0;\\n            uint256 opcode_;\\n            uint256 operand_;\\n            uint256 sourceLocation_;\\n            uint256 sourceLen_;\\n            uint256 constantsBottomLocation_;\\n            uint256 stackBottomLocation_;\\n            uint256 stackTopLocation_;\\n            uint256 firstFnPtrLocation_;\\n\\n            assembly {\\n                let stackLocation_ := mload(add(state_, 0x20))\\n                stackBottomLocation_ := add(stackLocation_, 0x20)\\n                stackTopLocation_ := add(\\n                    stackBottomLocation_,\\n                    // Add stack index offset.\\n                    mul(mload(state_), 0x20)\\n                )\\n                sourceLocation_ := mload(\\n                    add(\\n                        mload(add(state_, 0x40)),\\n                        add(0x20, mul(sourceIndex_, 0x20))\\n                    )\\n                )\\n                sourceLen_ := mload(sourceLocation_)\\n                constantsBottomLocation_ := add(mload(add(state_, 0x60)), 0x20)\\n                // first fn pointer is seen if we move two bytes into the data.\\n                firstFnPtrLocation_ := add(mload(add(state_, 0xA0)), 0x02)\\n            }\\n\\n            // Loop until complete.\\n            while (pc_ < sourceLen_) {\\n                assembly {\\n                    pc_ := add(pc_, 3)\\n                    let op_ := mload(add(sourceLocation_, pc_))\\n                    operand_ := byte(31, op_)\\n                    opcode_ := and(shr(8, op_), 0xFFFF)\\n                }\\n\\n                if (opcode_ < RAIN_VM_OPS_LENGTH) {\\n                    if (opcode_ == OPCODE_CONSTANT) {\\n                        assembly {\\n                            mstore(\\n                                stackTopLocation_,\\n                                mload(\\n                                    add(\\n                                        constantsBottomLocation_,\\n                                        mul(0x20, operand_)\\n                                    )\\n                                )\\n                            )\\n                            stackTopLocation_ := add(stackTopLocation_, 0x20)\\n                        }\\n                    } else if (opcode_ == OPCODE_STACK) {\\n                        assembly {\\n                            mstore(\\n                                stackTopLocation_,\\n                                mload(\\n                                    add(\\n                                        stackBottomLocation_,\\n                                        mul(operand_, 0x20)\\n                                    )\\n                                )\\n                            )\\n                            stackTopLocation_ := add(stackTopLocation_, 0x20)\\n                        }\\n                    } else if (opcode_ == OPCODE_CONTEXT) {\\n                        // This is the only runtime integrity check that we do\\n                        // as it is not possible to know how long context might\\n                        // be in general until runtime.\\n                        require(\\n                            operand_ * 0x20 < context_.length,\\n                            \\\"CONTEXT_LENGTH\\\"\\n                        );\\n                        assembly {\\n                            mstore(\\n                                stackTopLocation_,\\n                                mload(\\n                                    add(\\n                                        context_,\\n                                        add(0x20, mul(0x20, operand_))\\n                                    )\\n                                )\\n                            )\\n                            stackTopLocation_ := add(stackTopLocation_, 0x20)\\n                        }\\n                    } else if (opcode_ == OPCODE_STORAGE) {\\n                        StorageOpcodesRange\\n                            memory storageOpcodesRange_ = storageOpcodesRange();\\n                        assembly {\\n                            mstore(\\n                                stackTopLocation_,\\n                                sload(\\n                                    add(operand_, mload(storageOpcodesRange_))\\n                                )\\n                            )\\n                            stackTopLocation_ := add(stackTopLocation_, 0x20)\\n                        }\\n                    } else if (opcode_ == OPCODE_ZIPMAP) {\\n                        stackTopLocation_ = zipmap(\\n                            context_,\\n                            state_,\\n                            stackTopLocation_,\\n                            operand_\\n                        );\\n                    } else {\\n                        bytes memory debug_;\\n                        if (operand_ == DEBUG_STATE_ABI) {\\n                            debug_ = abi.encode(state_);\\n                        } else if (operand_ == DEBUG_STATE_PACKED) {\\n                            debug_ = LibState.toBytesPacked(state_);\\n                        } else if (operand_ == DEBUG_STACK) {\\n                            debug_ = abi.encodePacked(state_.stack);\\n                        } else if (operand_ == DEBUG_STACK_INDEX) {\\n                            debug_ = abi.encodePacked(state_.stackIndex);\\n                        }\\n                        if (debug_.length > 0) {\\n                            console.logBytes(debug_);\\n                        }\\n                    }\\n                } else {\\n                    function(uint256, uint256) view returns (uint256) fn_;\\n                    assembly {\\n                        fn_ := opcode_\\n                    }\\n                    stackTopLocation_ = fn_(operand_, stackTopLocation_);\\n                }\\n                // The stack index may be the same as the length as this means\\n                // the stack is full. But we cannot write past the end of the\\n                // stack. This also catches a stack index that underflows due\\n                // to unchecked or assembly math. This check MAY be redundant\\n                // with standard OOB checks on the stack array due to indexing\\n                // into it, but is a required guard in the case of VM assembly.\\n                // Future versions of the VM will precalculate all stack\\n                // movements at deploy time rather than runtime as this kind of\\n                // accounting adds nontrivial gas across longer scripts that\\n                // include many opcodes.\\n                // Note: This check would NOT be safe in the case that some\\n                // opcode used assembly in a way that can underflow the stack\\n                // as this would allow a malicious rain script to write to the\\n                // stack length and/or the stack index.\\n                require(\\n                    state_.stackIndex <= state_.stack.length,\\n                    \\\"STACK_OVERFLOW\\\"\\n                );\\n            }\\n            state_.stackIndex =\\n                (stackTopLocation_ - stackBottomLocation_) /\\n                0x20;\\n            return stackTopLocation_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7c75c1fcfaa98a06d194a9476fc36df803b2bba3ca74912c6137660684b0e2ef\",\"license\":\"CAL\"},\"contracts/vm/VMStateBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\nimport \\\"./RainVM.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../sstore2/SSTORE2.sol\\\";\\n\\n/// Config required to build a new `State`.\\n/// @param sources Sources verbatim.\\n/// @param constants Constants verbatim.\\nstruct StateConfig {\\n    bytes[] sources;\\n    uint256[] constants;\\n}\\n\\n/// @param stackIndex The current stack index as the state builder moves\\n/// through each opcode and applies the appropriate pops and pushes.\\n/// @param stackLength The maximum length of the stack seen so far due to stack\\n/// index movements. If the stack index underflows this will be close to\\n/// uint256 max and will ultimately error. It will also error if it overflows\\n/// MAX_STACK_LENGTH.\\n/// @param argumentsLength The maximum length of arguments seen so far due to\\n/// zipmap calls. Will be 0 if there are no zipmap calls.\\n/// @param storageLength The VM contract MUST specify which range of storage\\n/// slots can be read by VM scripts as [0, storageLength). If the storageLength\\n/// is 0 then no storage slots may be read by opcodes. In practise opcodes are\\n/// uint8 so storage slots beyond 255 cannot be read, notably all mappings will\\n/// be inaccessible.\\n/// @param opcodesLength The VM contract MUST specify how many valid opcodes\\n/// there are, where a valid opcode is one with a corresponding valid function\\n/// pointer in the array returned by `fnPtrs`. If this is not set correctly\\n/// then an attacker may specify an opcode that points to data beyond the valid\\n/// fnPtrs, which has undefined and therefore possibly catastrophic behaviour\\n/// for the implementing contract, up to and including total funds loss.\\nstruct Bounds {\\n    uint256 entrypoint;\\n    uint256 minFinalStackIndex;\\n    uint256 stackIndex;\\n    uint256 stackLength;\\n    uint256 argumentsLength;\\n    uint256 storageLength;\\n    uint256 opcodesLength;\\n}\\n\\nuint256 constant MAX_STACK_LENGTH = type(uint8).max;\\n\\ncontract VMStateBuilder {\\n    using Math for uint256;\\n\\n    address private immutable _stackPopsFnPtrs;\\n    address private immutable _stackPushesFnPtrs;\\n    mapping(address => address) private ptrCache;\\n\\n    constructor() {\\n        _stackPopsFnPtrs = SSTORE2.write(stackPopsFnPtrs());\\n        _stackPushesFnPtrs = SSTORE2.write(stackPushesFnPtrs());\\n    }\\n\\n    function _packedFnPtrs(address vm_) private returns (bytes memory) {\\n        unchecked {\\n            bytes memory packedPtrs_ = SSTORE2.read(ptrCache[vm_]);\\n            if (packedPtrs_.length == 0) {\\n                ptrCache[vm_] = SSTORE2.write(packFnPtrs(RainVM(vm_).fnPtrs()));\\n                return _packedFnPtrs(vm_);\\n            }\\n            return packedPtrs_;\\n        }\\n    }\\n\\n    /// Builds a new `State` bytes from `StateConfig`.\\n    /// Empty stack and arguments with stack index 0.\\n    /// @param config_ State config to build the new `State`.\\n    function buildState(\\n        address vm_,\\n        StateConfig memory config_,\\n        Bounds[] memory boundss_\\n    ) external returns (bytes memory) {\\n        unchecked {\\n            bytes memory packedFnPtrs_ = _packedFnPtrs(vm_);\\n            uint256 storageLength_ = RainVM(vm_).storageOpcodesRange().length;\\n            uint256 argumentsLength_ = 0;\\n            uint256 stackLength_ = 0;\\n\\n            for (uint256 b_ = 0; b_ < boundss_.length; b_++) {\\n                boundss_[b_].storageLength = storageLength_;\\n\\n                // Opcodes are 1 byte and fnPtrs are 2 bytes so we halve the\\n                // length to get the valid opcodes length.\\n                boundss_[b_].opcodesLength = packedFnPtrs_.length / 2;\\n                ensureIntegrity(config_, boundss_[b_]);\\n                argumentsLength_ = argumentsLength_.max(\\n                    boundss_[b_].argumentsLength\\n                );\\n                stackLength_ = stackLength_.max(boundss_[b_].stackLength);\\n                // Stack needs to be high enough to read from after eval.\\n                require(\\n                    boundss_[b_].stackIndex >= boundss_[b_].minFinalStackIndex,\\n                    \\\"FINAL_STACK_INDEX\\\"\\n                );\\n            }\\n\\n            // build a new constants array with space for the arguments.\\n            uint256[] memory constants_ = new uint256[](\\n                config_.constants.length + argumentsLength_\\n            );\\n            for (uint256 i_ = 0; i_ < config_.constants.length; i_++) {\\n                constants_[i_] = config_.constants[i_];\\n            }\\n\\n            bytes[] memory ptrSources_ = new bytes[](config_.sources.length);\\n            for (uint256 i_ = 0; i_ < config_.sources.length; i_++) {\\n                ptrSources_[i_] = ptrSource(packedFnPtrs_, config_.sources[i_]);\\n            }\\n\\n            return\\n                LibState.toBytesPacked(\\n                    State(\\n                        0,\\n                        new uint256[](stackLength_),\\n                        ptrSources_,\\n                        constants_,\\n                        config_.constants.length\\n                    )\\n                );\\n        }\\n    }\\n\\n    function ptrSource(bytes memory packedFnPtrs_, bytes memory source_)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        unchecked {\\n            uint256 sourceLen_ = source_.length;\\n            require(sourceLen_ % 2 == 0, \\\"ODD_SOURCE_LENGTH\\\");\\n\\n            bytes memory ptrSource_ = new bytes((sourceLen_ * 3) / 2);\\n\\n            uint256 rainVMOpsLength_ = RAIN_VM_OPS_LENGTH;\\n            assembly {\\n                let start_ := 1\\n                let end_ := add(sourceLen_, 1)\\n                for {\\n                    let i_ := start_\\n                    let o_ := 0\\n                } lt(i_, end_) {\\n                    i_ := add(i_, 1)\\n                } {\\n                    let op_ := byte(31, mload(add(source_, i_)))\\n                    // is opcode\\n                    if mod(i_, 2) {\\n                        // core ops simply zero pad.\\n                        if lt(op_, rainVMOpsLength_) {\\n                            o_ := add(o_, 1)\\n                            mstore8(add(ptrSource_, add(0x20, o_)), op_)\\n                        }\\n                        if iszero(lt(op_, rainVMOpsLength_)) {\\n                            let fn_ := mload(\\n                                add(packedFnPtrs_, add(0x2, mul(op_, 0x2)))\\n                            )\\n                            mstore8(\\n                                add(ptrSource_, add(0x20, o_)),\\n                                byte(30, fn_)\\n                            )\\n                            o_ := add(o_, 1)\\n                            mstore8(\\n                                add(ptrSource_, add(0x20, o_)),\\n                                byte(31, fn_)\\n                            )\\n                        }\\n                    }\\n                    // is operand\\n                    if iszero(mod(i_, 2)) {\\n                        mstore8(add(ptrSource_, add(0x20, o_)), op_)\\n                    }\\n                    o_ := add(o_, 1)\\n                }\\n            }\\n            return ptrSource_;\\n        }\\n    }\\n\\n    function packFnPtrs(bytes memory fnPtrs_)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        unchecked {\\n            require(fnPtrs_.length % 0x20 == 0, \\\"BAD_FN_PTRS_LENGTH\\\");\\n            bytes memory fnPtrsPacked_ = new bytes(fnPtrs_.length / 0x10);\\n            assembly {\\n                for {\\n                    let i_ := 0\\n                    let o_ := 0x02\\n                } lt(i_, mload(fnPtrs_)) {\\n                    i_ := add(i_, 0x20)\\n                    o_ := add(o_, 0x02)\\n                } {\\n                    let location_ := add(fnPtrsPacked_, o_)\\n                    let old_ := mload(location_)\\n                    let new_ := or(old_, mload(add(fnPtrs_, add(0x20, i_))))\\n                    mstore(location_, new_)\\n                }\\n            }\\n            return fnPtrsPacked_;\\n        }\\n    }\\n\\n    function _ensureIntegrityZipmap(\\n        StateConfig memory stateConfig_,\\n        Bounds memory bounds_,\\n        uint256 operand_\\n    ) private view {\\n        unchecked {\\n            uint256 valLength_ = (operand_ >> 5) + 1;\\n            // read underflow here will show up as an OOB max later.\\n            bounds_.stackIndex -= valLength_;\\n            bounds_.stackLength = bounds_.stackLength.max(bounds_.stackIndex);\\n            bounds_.argumentsLength = bounds_.argumentsLength.max(valLength_);\\n            uint256 loopTimes_ = 1 << ((operand_ >> 3) & 0x03);\\n            uint256 outerEntrypoint_ = bounds_.entrypoint;\\n            uint256 innerEntrypoint_ = operand_ & 0x07;\\n            bounds_.entrypoint = innerEntrypoint_;\\n            for (uint256 n_ = 0; n_ < loopTimes_; n_++) {\\n                ensureIntegrity(stateConfig_, bounds_);\\n            }\\n            bounds_.entrypoint = outerEntrypoint_;\\n        }\\n    }\\n\\n    function ensureIntegrity(\\n        StateConfig memory stateConfig_,\\n        Bounds memory bounds_\\n    ) public view {\\n        unchecked {\\n            uint256 entrypoint_ = bounds_.entrypoint;\\n            require(stateConfig_.sources.length > entrypoint_, \\\"MIN_SOURCES\\\");\\n            bytes memory stackPopsFns_ = SSTORE2.read(_stackPopsFnPtrs);\\n            bytes memory stackPushesFns_ = SSTORE2.read(_stackPushesFnPtrs);\\n            uint256 i_ = 0;\\n            uint256 sourceLen_;\\n            uint256 opcode_;\\n            uint256 operand_;\\n            uint256 sourceLocation_;\\n\\n            assembly {\\n                sourceLocation_ := mload(\\n                    add(mload(stateConfig_), add(0x20, mul(entrypoint_, 0x20)))\\n                )\\n\\n                sourceLen_ := mload(sourceLocation_)\\n            }\\n\\n            while (i_ < sourceLen_) {\\n                assembly {\\n                    i_ := add(i_, 2)\\n                    let op_ := mload(add(sourceLocation_, i_))\\n                    opcode_ := byte(30, op_)\\n                    operand_ := byte(31, op_)\\n                }\\n\\n                // Additional integrity checks for core opcodes.\\n                if (opcode_ < RAIN_VM_OPS_LENGTH) {\\n                    if (opcode_ == OPCODE_CONSTANT) {\\n                        // trying to read past the end of the constants array.\\n                        // note that it is possible for a script to reach into\\n                        // arguments space after a zipmap has completed. While\\n                        // this is almost certainly a critical bug for the\\n                        // script it doesn't expose the ability to read past\\n                        // the constants array in memory so we allow it here.\\n                        require(\\n                            operand_ <\\n                                (bounds_.argumentsLength +\\n                                    stateConfig_.constants.length)\\n                        );\\n                        bounds_.stackIndex++;\\n                    } else if (opcode_ == OPCODE_STACK) {\\n                        // trying to read past the current stack top.\\n                        require(operand_ < bounds_.stackIndex);\\n                        bounds_.stackIndex++;\\n                    } else if (opcode_ == OPCODE_CONTEXT) {\\n                        // Note that context length check is handled at runtime\\n                        // because we don't know how long context should be at\\n                        // this point.\\n                        bounds_.stackIndex++;\\n                    } else if (opcode_ == OPCODE_STORAGE) {\\n                        // trying to read past allowed storage slots.\\n                        require(operand_ < bounds_.storageLength);\\n                        bounds_.stackIndex++;\\n                    }\\n                    if (opcode_ == OPCODE_ZIPMAP) {\\n                        _ensureIntegrityZipmap(stateConfig_, bounds_, operand_);\\n                    }\\n                } else {\\n                    // Opcodes can't exceed the bounds of valid fn pointers.\\n                    require(opcode_ < bounds_.opcodesLength, \\\"MAX_OPCODE\\\");\\n                    function(uint256) pure returns (uint256) popsFn_;\\n                    function(uint256) pure returns (uint256) pushesFn_;\\n                    assembly {\\n                        popsFn_ := mload(\\n                            add(stackPopsFns_, add(0x20, mul(opcode_, 0x20)))\\n                        )\\n                        pushesFn_ := mload(\\n                            add(stackPushesFns_, add(0x20, mul(opcode_, 0x20)))\\n                        )\\n                    }\\n\\n                    // This will catch popping/reading from underflowing the\\n                    // stack as it will show up as an overflow on the stack\\n                    // length below.\\n                    bounds_.stackIndex -= popsFn_(operand_);\\n                    bounds_.stackLength = bounds_.stackLength.max(\\n                        bounds_.stackIndex\\n                    );\\n\\n                    bounds_.stackIndex += pushesFn_(operand_);\\n                }\\n\\n                bounds_.stackLength = bounds_.stackLength.max(\\n                    bounds_.stackIndex\\n                );\\n            }\\n            // Both an overflow or underflow in uint256 space will show up as\\n            // an upper bound exceeding the uint8 space.\\n            require(bounds_.stackLength <= MAX_STACK_LENGTH, \\\"MAX_STACK\\\");\\n        }\\n    }\\n\\n    function stackPopsFnPtrs() public pure virtual returns (bytes memory) {}\\n\\n    function stackPushesFnPtrs() public pure virtual returns (bytes memory) {}\\n}\\n\",\"keccak256\":\"0xd60dd0ce86eb167d04e2514130fc53cb1d0911d15bdbf29fd82be84b29320f72\",\"license\":\"CAL\"},\"contracts/vm/ops/AllStandardOps.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../RainVM.sol\\\";\\nimport \\\"./erc20/OpERC20BalanceOf.sol\\\";\\nimport \\\"./erc20/OpERC20TotalSupply.sol\\\";\\nimport \\\"./erc20/snapshot/OpERC20SnapshotBalanceOfAt.sol\\\";\\nimport \\\"./erc20/snapshot/OpERC20SnapshotTotalSupplyAt.sol\\\";\\nimport \\\"./erc721/OpERC721BalanceOf.sol\\\";\\nimport \\\"./erc721/OpERC721OwnerOf.sol\\\";\\nimport \\\"./erc1155/OpERC1155BalanceOf.sol\\\";\\nimport \\\"./erc1155/OpERC1155BalanceOfBatch.sol\\\";\\nimport \\\"./evm/OpBlockNumber.sol\\\";\\nimport \\\"./evm/OpCaller.sol\\\";\\nimport \\\"./evm/OpThisAddress.sol\\\";\\nimport \\\"./evm/OpTimestamp.sol\\\";\\nimport \\\"./math/fixedPoint/OpFixedPointScale18.sol\\\";\\nimport \\\"./math/fixedPoint/OpFixedPointScale18Div.sol\\\";\\nimport \\\"./math/fixedPoint/OpFixedPointScale18Mul.sol\\\";\\nimport \\\"./math/fixedPoint/OpFixedPointScaleBy.sol\\\";\\nimport \\\"./math/fixedPoint/OpFixedPointScaleN.sol\\\";\\nimport \\\"./math/logic/OpAny.sol\\\";\\nimport \\\"./math/logic/OpEagerIf.sol\\\";\\nimport \\\"./math/logic/OpEqualTo.sol\\\";\\nimport \\\"./math/logic/OpEvery.sol\\\";\\nimport \\\"./math/logic/OpGreaterThan.sol\\\";\\nimport \\\"./math/logic/OpIsZero.sol\\\";\\nimport \\\"./math/logic/OpLessThan.sol\\\";\\nimport \\\"./math/saturating/OpSaturatingAdd.sol\\\";\\nimport \\\"./math/saturating/OpSaturatingMul.sol\\\";\\nimport \\\"./math/saturating/OpSaturatingSub.sol\\\";\\nimport \\\"./math/OpAdd.sol\\\";\\nimport \\\"./math/OpDiv.sol\\\";\\nimport \\\"./math/OpExp.sol\\\";\\nimport \\\"./math/OpMax.sol\\\";\\nimport \\\"./math/OpMin.sol\\\";\\nimport \\\"./math/OpMod.sol\\\";\\nimport \\\"./math/OpMul.sol\\\";\\nimport \\\"./math/OpSub.sol\\\";\\nimport \\\"./tier/OpITierV2Report.sol\\\";\\nimport \\\"./tier/OpITierV2ReportTimeForTier.sol\\\";\\nimport \\\"./tier/OpSaturatingDiff.sol\\\";\\nimport \\\"./tier/OpSelectLte.sol\\\";\\nimport \\\"./tier/OpUpdateTimesForTierRange.sol\\\";\\n\\nuint256 constant ALL_STANDARD_OPS_LENGTH = RAIN_VM_OPS_LENGTH + 40;\\n\\n/// @title AllStandardOps\\n/// @notice RainVM opcode pack to expose all other packs.\\nlibrary AllStandardOps {\\n    function zero(uint256) internal pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    function one(uint256) internal pure returns (uint256) {\\n        return 1;\\n    }\\n\\n    function two(uint256) internal pure returns (uint256) {\\n        return 2;\\n    }\\n\\n    function three(uint256) internal pure returns (uint256) {\\n        return 3;\\n    }\\n\\n    function nonzeroOperandN(uint256 operand_) internal pure returns (uint256) {\\n        require(operand_ > 0, \\\"0_OPERAND\\\");\\n        return operand_;\\n    }\\n\\n    function stackPopsFnPtrs() internal pure returns (bytes memory) {\\n        unchecked {\\n            uint256 lenBytes_ = ALL_STANDARD_OPS_LENGTH * 0x20;\\n            function(uint256) pure returns (uint256) zeroFn_;\\n            assembly {\\n                // using zero bytes in the fnPtrs array may save gas in certain\\n                // contexts.\\n                zeroFn_ := 0\\n            }\\n            function(uint256) pure returns (uint256)[ALL_STANDARD_OPS_LENGTH +\\n                1]\\n                memory fns_ = [\\n                    // will be overriden with length\\n                    zeroFn_,\\n                    // constant placeholder\\n                    zeroFn_,\\n                    // stack placeholder\\n                    zeroFn_,\\n                    // context placeholder\\n                    zeroFn_,\\n                    // storage placeholder\\n                    zeroFn_,\\n                    // zipmap placeholder\\n                    zeroFn_,\\n                    // debug placeholder\\n                    zeroFn_,\\n                    // erc20 balance of\\n                    two,\\n                    // erc20 total supply\\n                    one,\\n                    // erc20 snapshot balance of at\\n                    three,\\n                    // erc20 snapshot total supply at\\n                    two,\\n                    // erc721 balance of\\n                    two,\\n                    // erc721 owner of\\n                    two,\\n                    // erc1155 balance of\\n                    three,\\n                    // erc1155 balance of batch\\n                    OpERC1155BalanceOfBatch.stackPops,\\n                    // block number\\n                    zero,\\n                    // caller\\n                    zero,\\n                    // this address\\n                    zero,\\n                    // timestamp\\n                    zero,\\n                    // scale18\\n                    one,\\n                    // scale18 div\\n                    two,\\n                    // scale18 mul\\n                    two,\\n                    // scaleBy\\n                    one,\\n                    // scaleN\\n                    one,\\n                    // any\\n                    nonzeroOperandN,\\n                    // eager if\\n                    three,\\n                    // equal to\\n                    two,\\n                    // every\\n                    nonzeroOperandN,\\n                    // greater than\\n                    two,\\n                    // iszero\\n                    one,\\n                    // less than\\n                    two,\\n                    // saturating add\\n                    nonzeroOperandN,\\n                    // saturating mul\\n                    nonzeroOperandN,\\n                    // saturating sub\\n                    nonzeroOperandN,\\n                    // add\\n                    nonzeroOperandN,\\n                    // div\\n                    nonzeroOperandN,\\n                    // exp\\n                    nonzeroOperandN,\\n                    // max\\n                    nonzeroOperandN,\\n                    // min\\n                    nonzeroOperandN,\\n                    // mod\\n                    nonzeroOperandN,\\n                    // mul\\n                    nonzeroOperandN,\\n                    // sub\\n                    nonzeroOperandN,\\n                    // tier report\\n                    OpITierV2Report.stackPops,\\n                    // tier report time for tier\\n                    OpITierV2ReportTimeForTier.stackPops,\\n                    // tier saturating diff\\n                    two,\\n                    // select lte\\n                    OpSelectLte.stackPops,\\n                    // update times for tier range\\n                    two\\n                ];\\n            bytes memory ret_;\\n            assembly {\\n                mstore(fns_, lenBytes_)\\n                ret_ := fns_\\n            }\\n            return ret_;\\n        }\\n    }\\n\\n    function stackPushesFnPtrs() internal pure returns (bytes memory) {\\n        unchecked {\\n            uint256 lenBytes_ = ALL_STANDARD_OPS_LENGTH * 0x20;\\n            function(uint256) pure returns (uint256) zeroFn_;\\n            assembly {\\n                // using zero bytes in the fnPtrs array may save gas in certain\\n                // contexts.\\n                zeroFn_ := 0\\n            }\\n            function(uint256) pure returns (uint256)[ALL_STANDARD_OPS_LENGTH +\\n                1]\\n                memory fns_ = [\\n                    // will be overriden with length\\n                    zeroFn_,\\n                    // constant placeholder\\n                    zeroFn_,\\n                    // stack placeholder\\n                    zeroFn_,\\n                    // context placeholder\\n                    zeroFn_,\\n                    // storage placeholder\\n                    zeroFn_,\\n                    // zipmap placeholder\\n                    zeroFn_,\\n                    // debug placeholder\\n                    zeroFn_,\\n                    // erc20 balance of\\n                    one,\\n                    // erc20 total supply\\n                    one,\\n                    // erc20 snapshot balance of at\\n                    one,\\n                    // erc20 snapshot total supply at\\n                    one,\\n                    // erc721 balance of\\n                    one,\\n                    // erc721 owner of\\n                    one,\\n                    // erc1155 balance of\\n                    one,\\n                    // erc1155 balance of batch\\n                    nonzeroOperandN,\\n                    // block number\\n                    one,\\n                    // caller\\n                    one,\\n                    // this address\\n                    one,\\n                    // timestamp\\n                    one,\\n                    // scale18\\n                    one,\\n                    // scale18 div\\n                    one,\\n                    // scale18 mul\\n                    one,\\n                    // scaleBy\\n                    one,\\n                    // scaleN\\n                    one,\\n                    // any\\n                    one,\\n                    // eager if\\n                    one,\\n                    // equal to\\n                    one,\\n                    // every\\n                    one,\\n                    // greater than\\n                    one,\\n                    // iszero\\n                    one,\\n                    // less than\\n                    one,\\n                    // saturating add\\n                    one,\\n                    // saturating mul\\n                    one,\\n                    // saturating sub\\n                    one,\\n                    // add\\n                    one,\\n                    // div\\n                    one,\\n                    // exp\\n                    one,\\n                    // max\\n                    one,\\n                    // min\\n                    one,\\n                    // mod\\n                    one,\\n                    // mul\\n                    one,\\n                    // sub\\n                    one,\\n                    // tier report\\n                    one,\\n                    // tier report time for tier\\n                    one,\\n                    // tier saturating diff\\n                    one,\\n                    // select lte\\n                    one,\\n                    // update times for tier range\\n                    one\\n                ];\\n            bytes memory ret_;\\n            assembly {\\n                mstore(fns_, lenBytes_)\\n                ret_ := fns_\\n            }\\n            return ret_;\\n        }\\n    }\\n\\n    function fnPtrs() internal pure returns (bytes memory) {\\n        unchecked {\\n            uint256 lenBytes_ = ALL_STANDARD_OPS_LENGTH * 0x20;\\n            function(uint256, uint256) view returns (uint256) zeroFn_;\\n            assembly {\\n                // using zero bytes in the fnPtrs array may save gas in certain\\n                // contexts.\\n                zeroFn_ := 0\\n            }\\n            function(uint256, uint256)\\n                view\\n                returns (uint256)[ALL_STANDARD_OPS_LENGTH + 1]\\n                memory fns_ = [\\n                    // will be overridden with length\\n                    zeroFn_,\\n                    // placeholders for core ops\\n                    // constant\\n                    zeroFn_,\\n                    // stack\\n                    zeroFn_,\\n                    // context\\n                    zeroFn_,\\n                    // storage\\n                    zeroFn_,\\n                    // zipmap\\n                    zeroFn_,\\n                    // debug\\n                    zeroFn_,\\n                    // dispatchable ops\\n                    OpERC20BalanceOf.balanceOf,\\n                    OpERC20TotalSupply.totalSupply,\\n                    OpERC20SnapshotBalanceOfAt.balanceOfAt,\\n                    OpERC20SnapshotTotalSupplyAt.totalSupplyAt,\\n                    OpERC721BalanceOf.balanceOf,\\n                    OpERC721OwnerOf.ownerOf,\\n                    OpERC1155BalanceOf.balanceOf,\\n                    OpERC1155BalanceOfBatch.balanceOfBatch,\\n                    OpBlockNumber.blockNumber,\\n                    OpCaller.caller,\\n                    OpThisAddress.thisAddress,\\n                    OpTimestamp.timestamp,\\n                    OpFixedPointScale18.scale18,\\n                    OpFixedPointScale18Div.scale18Div,\\n                    OpFixedPointScale18Mul.scale18Mul,\\n                    OpFixedPointScaleBy.scaleBy,\\n                    OpFixedPointScaleN.scaleN,\\n                    OpAny.any,\\n                    OpEagerIf.eagerIf,\\n                    OpEqualTo.equalTo,\\n                    OpEvery.every,\\n                    OpGreaterThan.greaterThan,\\n                    OpIsZero.isZero,\\n                    OpLessThan.lessThan,\\n                    OpSaturatingAdd.saturatingAdd,\\n                    OpSaturatingMul.saturatingMul,\\n                    OpSaturatingSub.saturatingSub,\\n                    OpAdd.add,\\n                    OpDiv.div,\\n                    OpExp.exp,\\n                    OpMax.max,\\n                    OpMin.min,\\n                    OpMod.mod,\\n                    OpMul.mul,\\n                    OpSub.sub,\\n                    OpITierV2Report.report,\\n                    OpITierV2ReportTimeForTier.reportTimeForTier,\\n                    OpSaturatingDiff.saturatingDiff,\\n                    OpSelectLte.selectLte,\\n                    OpUpdateTimesForTierRange.updateTimesForTierRange\\n                ];\\n            bytes memory ret_;\\n            assembly {\\n                mstore(fns_, lenBytes_)\\n                ret_ := fns_\\n            }\\n            return ret_;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3b7cd0d079e0d7c530ff2c7af8156763644e3e20103a4025161ede57ad0ab1e\",\"license\":\"CAL\"},\"contracts/vm/ops/erc1155/OpERC1155BalanceOf.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/// @title OpERC1155BalanceOf\\n/// @notice Opcode for getting the current erc1155 balance of an account.\\nlibrary OpERC1155BalanceOf {\\n    // Stack the return of `balanceOf`.\\n    function balanceOf(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 token_;\\n        uint256 account_;\\n        uint256 id_;\\n        assembly {\\n            location_ := sub(stackTopLocation_, 0x60)\\n            stackTopLocation_ := add(location_, 0x20)\\n            token_ := mload(location_)\\n            account_ := mload(stackTopLocation_)\\n            id_ := mload(add(location_, 0x40))\\n        }\\n        uint256 result_ = IERC1155(address(uint160(token_))).balanceOf(\\n            address(uint160(account_)),\\n            id_\\n        );\\n        assembly {\\n            mstore(location_, result_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x501ddca2cd98e596eaa6f85c0c76881250c9092beb2eaff40193786873b6f02b\",\"license\":\"CAL\"},\"contracts/vm/ops/erc1155/OpERC1155BalanceOfBatch.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/// @title OpERC1155BalanceOfBatch\\n/// @notice Opcode for getting the current erc1155 balance of an accounts batch.\\nlibrary OpERC1155BalanceOfBatch {\\n    function stackPops(uint256 operand_) internal pure returns (uint256) {\\n        unchecked {\\n            require(operand_ > 0, \\\"0_OPERAND\\\");\\n            return (operand_ * 2) + 1;\\n        }\\n    }\\n\\n    // Stack the return of `balanceOfBatch`.\\n    // Operand will be the length\\n    function balanceOfBatch(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        address[] memory addresses_ = new address[](operand_);\\n        uint256[] memory ids_ = new uint256[](operand_);\\n        uint256 token_;\\n        assembly {\\n            location_ := sub(stackTopLocation_, add(0x20, mul(operand_, 0x40)))\\n            token_ := mload(location_)\\n            let cursor_ := add(location_, 0x20)\\n\\n            for {\\n                let maxCursor_ := add(cursor_, mul(operand_, 0x20))\\n                let addressesCursor_ := add(addresses_, 0x20)\\n            } lt(cursor_, maxCursor_) {\\n                cursor_ := add(cursor_, 0x20)\\n                addressesCursor_ := add(addressesCursor_, 0x20)\\n            } {\\n                mstore(addressesCursor_, mload(cursor_))\\n            }\\n\\n            for {\\n                let maxCursor_ := add(cursor_, mul(operand_, 0x20))\\n                let idsCursor_ := add(ids_, 0x20)\\n            } lt(cursor_, maxCursor_) {\\n                cursor_ := add(cursor_, 0x20)\\n                idsCursor_ := add(idsCursor_, 0x20)\\n            } {\\n                mstore(idsCursor_, mload(cursor_))\\n            }\\n        }\\n        uint256[] memory balances_ = IERC1155(address(uint160(token_)))\\n            .balanceOfBatch(addresses_, ids_);\\n\\n        assembly {\\n            let cursor_ := location_\\n            for {\\n                let balancesCursor_ := add(balances_, 0x20)\\n                let balancesCursorMax_ := add(\\n                    balancesCursor_,\\n                    mul(operand_, 0x20)\\n                )\\n            } lt(balancesCursor_, balancesCursorMax_) {\\n                cursor_ := add(cursor_, 0x20)\\n                balancesCursor_ := add(balancesCursor_, 0x20)\\n            } {\\n                mstore(cursor_, mload(balancesCursor_))\\n            }\\n            stackTopLocation_ := cursor_\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xedb0ce4945d3798ac92ea91daffefeee7e48e469a2750ffbc54f31022c54c950\",\"license\":\"CAL\"},\"contracts/vm/ops/erc20/OpERC20BalanceOf.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title OpERC20BalanceOf\\n/// @notice Opcode for ERC20 `balanceOf`.\\nlibrary OpERC20BalanceOf {\\n    /// Stack `balanceOf`.\\n    function balanceOf(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 token_;\\n        uint256 account_;\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            location_ := sub(stackTopLocation_, 0x20)\\n            token_ := mload(location_)\\n            account_ := mload(stackTopLocation_)\\n        }\\n        uint256 balance_ = IERC20(address(uint160(token_))).balanceOf(\\n            address(uint160(account_))\\n        );\\n        assembly {\\n            mstore(location_, balance_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xc0100ed667adafe60d73f92acb3fabfa23ca400c15f1d1fbb6e680a9ff42206f\",\"license\":\"CAL\"},\"contracts/vm/ops/erc20/OpERC20TotalSupply.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title OpERC20TotalSupply\\n/// @notice Opcode for ERC20 `totalSupply`.\\nlibrary OpERC20TotalSupply {\\n    // Stack the return of `totalSupply`.\\n    function totalSupply(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 token_;\\n        assembly {\\n            location_ := sub(stackTopLocation_, 0x20)\\n            token_ := mload(location_)\\n        }\\n        uint256 supply_ = IERC20(address(uint160(token_))).totalSupply();\\n        assembly {\\n            mstore(location_, supply_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x136befcb6391498835a5f63016b5fa5f0a714902b0887ce806ac60dea6f17cf7\",\"license\":\"CAL\"},\"contracts/vm/ops/erc20/snapshot/OpERC20SnapshotBalanceOfAt.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\\\";\\n\\n/// @title OpERC20SnapshotBalanceOfAt\\n/// @notice Opcode for Open Zeppelin `ERC20Snapshot.balanceOfAt`.\\n/// https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#ERC20Snapshot\\nlibrary OpERC20SnapshotBalanceOfAt {\\n    /// Stack `balanceOfAt`.\\n    function balanceOfAt(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 token_;\\n        uint256 account_;\\n        uint256 snapshotId_;\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x40)\\n            location_ := sub(stackTopLocation_, 0x20)\\n            token_ := mload(location_)\\n            account_ := mload(stackTopLocation_)\\n            snapshotId_ := mload(add(stackTopLocation_, 0x20))\\n        }\\n        uint256 balance_ = ERC20Snapshot(address(uint160(token_))).balanceOfAt(\\n            address(uint160(account_)),\\n            snapshotId_\\n        );\\n        assembly {\\n            mstore(location_, balance_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x8d62ba45986e5585ef20e6526f44132a28b48dc927c1479f6befc331ec582b5b\",\"license\":\"CAL\"},\"contracts/vm/ops/erc20/snapshot/OpERC20SnapshotTotalSupplyAt.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\\\";\\n\\n/// @title OpERC20SnapshotTotalSupplyAt\\n/// @notice Opcode for Open Zeppelin `ERC20Snapshot.totalSupplyAt`.\\n/// https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#ERC20Snapshot\\nlibrary OpERC20SnapshotTotalSupplyAt {\\n    /// Stack `totalSupplyAt`.\\n    function totalSupplyAt(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 token_;\\n        uint256 snapshotId_;\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            location_ := sub(stackTopLocation_, 0x20)\\n            token_ := mload(location_)\\n            snapshotId_ := mload(stackTopLocation_)\\n        }\\n        uint256 totalSupply_ = ERC20Snapshot(address(uint160(token_)))\\n            .totalSupplyAt(snapshotId_);\\n        assembly {\\n            mstore(location_, totalSupply_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x8528b1dd51723768595d35537141a1997cb3b322aa0f70d5dc736e8014142428\",\"license\":\"CAL\"},\"contracts/vm/ops/erc721/OpERC721BalanceOf.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @title OpERC721BalanceOf\\n/// @notice Opcode for getting the current erc721 balance of an account.\\nlibrary OpERC721BalanceOf {\\n    // Stack the return of `balanceOf`.\\n    function balanceOf(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 token_;\\n        uint256 account_;\\n\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            location_ := sub(stackTopLocation_, 0x20)\\n            token_ := mload(location_)\\n            account_ := mload(stackTopLocation_)\\n        }\\n        uint256 balance_ = IERC721(address(uint160(token_))).balanceOf(\\n            address(uint160(account_))\\n        );\\n\\n        assembly {\\n            mstore(location_, balance_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xeded12fa887be8e6d1358823d59078bfe55ff845feff02fe835f05dcb561c6a5\",\"license\":\"CAL\"},\"contracts/vm/ops/erc721/OpERC721OwnerOf.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @title OpERC721OwnerOf\\n/// @notice Opcode for getting the current erc721 owner of an account.\\nlibrary OpERC721OwnerOf {\\n    // Stack the return of `ownerOf`.\\n    function ownerOf(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 token_;\\n        uint256 id_;\\n\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            location_ := sub(stackTopLocation_, 0x20)\\n            token_ := mload(location_)\\n            id_ := mload(stackTopLocation_)\\n        }\\n        uint256 owner_ = uint256(\\n            uint160(IERC721(address(uint160(token_))).ownerOf(id_))\\n        );\\n        assembly {\\n            mstore(location_, owner_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xf1401b6f6cd8e5d861e75c9dc75e82ac7c9453f5e054422b7bef99e16b43b41e\",\"license\":\"CAL\"},\"contracts/vm/ops/evm/OpBlockNumber.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpBlockNumber\\n/// @notice Opcode for getting the current block number.\\nlibrary OpBlockNumber {\\n    function blockNumber(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        assembly {\\n            mstore(stackTopLocation_, number())\\n            stackTopLocation_ := add(stackTopLocation_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x838009d0b58ca254de3451dba393ba9d4da35179da51296dc631c72dfb8ce646\",\"license\":\"CAL\"},\"contracts/vm/ops/evm/OpCaller.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpCaller\\n/// @notice Opcode for getting the current caller.\\nlibrary OpCaller {\\n    function caller(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        assembly {\\n            mstore(stackTopLocation_, caller())\\n            stackTopLocation_ := add(stackTopLocation_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x60e8410815291d4e6e5d17077156ee4f7a7651b58e7993cc88e8f46432ac1380\",\"license\":\"CAL\"},\"contracts/vm/ops/evm/OpThisAddress.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpThisAddress\\n/// @notice Opcode for getting the address of the current contract.\\nlibrary OpThisAddress {\\n    function thisAddress(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        assembly {\\n            mstore(stackTopLocation_, address())\\n            stackTopLocation_ := add(stackTopLocation_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xd9599f95ad49825fcf48a91a248bacbdc9c58e831cb83228d6d2b5016969b411\",\"license\":\"CAL\"},\"contracts/vm/ops/evm/OpTimestamp.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpTimestamp\\n/// @notice Opcode for getting the current timestamp.\\nlibrary OpTimestamp {\\n    function timestamp(uint256, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        assembly {\\n            mstore(stackTopLocation_, timestamp())\\n            stackTopLocation_ := add(stackTopLocation_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xd8e1d955accbaf86289e7706550ee751ed8e0cf60205c81821a0bbd2eb30ceb5\",\"license\":\"CAL\"},\"contracts/vm/ops/math/OpAdd.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpAdd\\n/// @notice Opcode for adding N numbers.\\nlibrary OpAdd {\\n    function add(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            let accumulator_ := mload(location_)\\n            let intermediate_\\n            for {\\n                let cursor_ := add(location_, 0x20)\\n            } lt(cursor_, stackTopLocation_) {\\n                cursor_ := add(cursor_, 0x20)\\n            } {\\n                intermediate_ := add(accumulator_, mload(cursor_))\\n                // Adapted from Open Zeppelin safe math.\\n                if lt(intermediate_, accumulator_) {\\n                    revert(0, 0)\\n                }\\n                accumulator_ := intermediate_\\n            }\\n            mstore(location_, accumulator_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x1a3e8c6f7a4b8e9001b3f9566968887ba0215b7a14638bd3f1a64b3bf0be1e69\",\"license\":\"CAL\"},\"contracts/vm/ops/math/OpDiv.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpDiv\\n/// @notice Opcode for dividing N numbers.\\nlibrary OpDiv {\\n    function div(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            let accumulator_ := mload(location_)\\n            let item_\\n            for {\\n                let cursor_ := add(location_, 0x20)\\n            } lt(cursor_, stackTopLocation_) {\\n                cursor_ := add(cursor_, 0x20)\\n            } {\\n                item_ := mload(cursor_)\\n                // Adapted from Open Zeppelin safe math.\\n                if iszero(item_) {\\n                    revert(0, 0)\\n                }\\n                accumulator_ := div(accumulator_, item_)\\n            }\\n            mstore(location_, accumulator_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x7f9c5376a6d9820d20029928063a3c4d9ab24c021c8bd9bdeb964d6194a7316b\",\"license\":\"CAL\"},\"contracts/vm/ops/math/OpExp.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpExp\\n/// @notice Opcode to exponentiate N numbers.\\nlibrary OpExp {\\n    function exp(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 accumulator_;\\n        uint256 cursor_;\\n        uint256 item_;\\n        assembly {\\n            location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            accumulator_ := mload(location_)\\n            cursor_ := add(location_, 0x20)\\n        }\\n        while (cursor_ < stackTopLocation_) {\\n            assembly {\\n                item_ := mload(cursor_)\\n                cursor_ := add(cursor_, 0x20)\\n            }\\n            // This is NOT in assembly so that we get overflow safety.\\n            accumulator_ = accumulator_**item_;\\n        }\\n        assembly {\\n            mstore(location_, accumulator_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x31be9d92aa9b7cd0db1a4780449ae801f4c7837df4f30a12f91615df257bf853\",\"license\":\"CAL\"},\"contracts/vm/ops/math/OpMax.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpMax\\n/// @notice Opcode to stack the maximum of N numbers.\\nlibrary OpMax {\\n    function max(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            let accumulator_ := mload(location_)\\n            let cursor_ := add(location_, 0x20)\\n            let item_\\n            for {\\n                cursor_ := add(location_, 0x20)\\n            } lt(cursor_, stackTopLocation_) {\\n                cursor_ := add(cursor_, 0x20)\\n            } {\\n                item_ := mload(cursor_)\\n                if gt(item_, accumulator_) {\\n                    accumulator_ := item_\\n                }\\n            }\\n            mstore(location_, accumulator_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x3bdac5580e6117380789512b72b18cd339c2c80b703706287c8d6956a19a823b\",\"license\":\"CAL\"},\"contracts/vm/ops/math/OpMin.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpMin\\n/// @notice Opcode to stack the minimum of N numbers.\\nlibrary OpMin {\\n    function min(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            let accumulator_ := mload(location_)\\n            let cursor_ := add(location_, 0x20)\\n            let item_\\n            for {\\n                cursor_ := add(location_, 0x20)\\n            } lt(cursor_, stackTopLocation_) {\\n                cursor_ := add(cursor_, 0x20)\\n            } {\\n                item_ := mload(cursor_)\\n                if lt(item_, accumulator_) {\\n                    accumulator_ := item_\\n                }\\n            }\\n            mstore(location_, accumulator_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x8fb9b180e85064de4f80619c105e4b611a0a649fb0f51ba07af23a3f7a9e14ce\",\"license\":\"CAL\"},\"contracts/vm/ops/math/OpMod.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpMod\\n/// @notice Opcode to mod N numbers.\\nlibrary OpMod {\\n    function mod(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            let accumulator_ := mload(location_)\\n            let item_\\n            for {\\n                let cursor_ := add(location_, 0x20)\\n            } lt(cursor_, stackTopLocation_) {\\n                cursor_ := add(cursor_, 0x20)\\n            } {\\n                item_ := mload(cursor_)\\n                // Adapted from Open Zeppelin safe math.\\n                if iszero(item_) {\\n                    revert(0, 0)\\n                }\\n                accumulator_ := mod(accumulator_, item_)\\n            }\\n            mstore(location_, accumulator_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x9b49b493b5cd292bca88c381527b6ef958dd25a269862f27e5cb71bdf25998a1\",\"license\":\"CAL\"},\"contracts/vm/ops/math/OpMul.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpMul\\n/// @notice Opcode for multiplying N numbers.\\nlibrary OpMul {\\n    function mul(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            let accumulator_ := mload(location_)\\n            let item_\\n            let intermediate_\\n            for {\\n                let cursor_ := add(location_, 0x20)\\n            } lt(cursor_, stackTopLocation_) {\\n                cursor_ := add(cursor_, 0x20)\\n            } {\\n                if gt(accumulator_, 0) {\\n                    item_ := mload(cursor_)\\n                    intermediate_ := mul(accumulator_, item_)\\n                    // Adapted from Open Zeppelin safe math.\\n                    if iszero(eq(div(intermediate_, accumulator_), item_)) {\\n                        revert(0, 0)\\n                    }\\n                    accumulator_ := intermediate_\\n                }\\n            }\\n            mstore(location_, accumulator_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xabf7186f7ced156af756cb4dd1628d65bb6f309b91a16b17f36a525ecff04f18\",\"license\":\"CAL\"},\"contracts/vm/ops/math/OpSub.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpSub\\n/// @notice Opcode for subtracting N numbers.\\nlibrary OpSub {\\n    function sub(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            let accumulator_ := mload(location_)\\n            let intermediate_\\n            for {\\n                let cursor_ := add(location_, 0x20)\\n            } lt(cursor_, stackTopLocation_) {\\n                cursor_ := add(cursor_, 0x20)\\n            } {\\n                intermediate_ := sub(accumulator_, mload(cursor_))\\n                // Adapted from Open Zeppelin safe math.\\n                if gt(intermediate_, accumulator_) {\\n                    revert(0, 0)\\n                }\\n                accumulator_ := intermediate_\\n            }\\n            mstore(location_, accumulator_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x36065096154959455e85ac7fb43012d6c8ce0f179e6ad3155bf3953c7863d889\",\"license\":\"CAL\"},\"contracts/vm/ops/math/fixedPoint/OpFixedPointScale18.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../../math/FixedPointMath.sol\\\";\\n\\n/// @title OpFixedPointScale18\\n/// @notice Opcode for scaling a number to 18 fixed point.\\nlibrary OpFixedPointScale18 {\\n    using FixedPointMath for uint256;\\n\\n    function scale18(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 a_;\\n        assembly {\\n            location_ := sub(stackTopLocation_, 0x20)\\n            a_ := mload(location_)\\n        }\\n        uint256 b_ = a_.scale18(operand_);\\n        assembly {\\n            mstore(location_, b_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xe4e12a77b98ad57b090d62c02f232dc0a5797dc8b4470046f4b67e631ca14b58\",\"license\":\"CAL\"},\"contracts/vm/ops/math/fixedPoint/OpFixedPointScale18Div.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../../math/FixedPointMath.sol\\\";\\n\\n/// @title OpFixedPointScale18Div\\n/// @notice Opcode for performing scale 18 fixed point division.\\nlibrary OpFixedPointScale18Div {\\n    using FixedPointMath for uint256;\\n\\n    function scale18Div(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 a_;\\n        uint256 b_;\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            location_ := sub(stackTopLocation_, 0x20)\\n            a_ := mload(location_)\\n            b_ := mload(stackTopLocation_)\\n        }\\n        uint256 c_ = a_.scale18(operand_).fixedPointDiv(b_);\\n        assembly {\\n            mstore(location_, c_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x38cf55ac6dd8798ca462a102cdab3def122d9f9a2dfe74f49ec8d88a8ab785f1\",\"license\":\"CAL\"},\"contracts/vm/ops/math/fixedPoint/OpFixedPointScale18Mul.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../../math/FixedPointMath.sol\\\";\\n\\n/// @title OpFixedPointScale18Mul\\n/// @notice Opcode for performing scale 18 fixed point multiplication.\\nlibrary OpFixedPointScale18Mul {\\n    using FixedPointMath for uint256;\\n\\n    function scale18Mul(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 a_;\\n        uint256 b_;\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            location_ := sub(stackTopLocation_, 0x20)\\n            a_ := mload(location_)\\n            b_ := mload(stackTopLocation_)\\n        }\\n        uint256 c_ = a_.scale18(operand_).fixedPointMul(b_);\\n        assembly {\\n            mstore(location_, c_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x7c8149000e8ba541968b1822f1d716f4022a4ddc547ed7d661c6e06856f5f1c2\",\"license\":\"CAL\"},\"contracts/vm/ops/math/fixedPoint/OpFixedPointScaleBy.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../../math/FixedPointMath.sol\\\";\\n\\n/// @title OpFixedPointScaleBy\\n/// @notice Opcode for scaling a number by some OOMs.\\nlibrary OpFixedPointScaleBy {\\n    using FixedPointMath for uint256;\\n\\n    function scaleBy(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 a_;\\n        assembly {\\n            location_ := sub(stackTopLocation_, 0x20)\\n            a_ := mload(location_)\\n        }\\n        uint256 b_ = a_.scaleBy(int8(uint8(operand_)));\\n        assembly {\\n            mstore(location_, b_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x540c088d27152e8198f26e8ec00489562b7e77fe2d4e47b23ba701b31b16f5b4\",\"license\":\"CAL\"},\"contracts/vm/ops/math/fixedPoint/OpFixedPointScaleN.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../../math/FixedPointMath.sol\\\";\\n\\n/// @title OpFixedPointScaleN\\n/// @notice Opcode for scaling a number to N fixed point.\\nlibrary OpFixedPointScaleN {\\n    using FixedPointMath for uint256;\\n\\n    function scaleN(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 a_;\\n        assembly {\\n            location_ := sub(stackTopLocation_, 0x20)\\n            a_ := mload(location_)\\n        }\\n        uint256 b_ = a_.scaleN(operand_);\\n        assembly {\\n            mstore(location_, b_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xc6305a7fcc903e8f94c341d9c948469646e66b8e44ec74f7e15ce601944d49a7\",\"license\":\"CAL\"},\"contracts/vm/ops/math/logic/OpAny.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpAny\\n/// @notice Opcode to compare the top N stack values.\\nlibrary OpAny {\\n    // ANY\\n    // ANY is the first nonzero item, else 0.\\n    // operand_ id the length of items to check.\\n    function any(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            for {\\n                let cursor_ := location_\\n            } lt(cursor_, stackTopLocation_) {\\n                cursor_ := add(cursor_, 0x20)\\n            } {\\n                // If anything is NOT zero then ANY is a successful\\n                // check and can short-circuit.\\n                let item_ := mload(cursor_)\\n                if iszero(iszero(item_)) {\\n                    // Write the usable value to the top of the stack.\\n                    mstore(location_, item_)\\n                    break\\n                }\\n            }\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x0645452cc4b1fb710ad9457e11053c4b0e571d1a09925eafcb10675db4af490e\",\"license\":\"CAL\"},\"contracts/vm/ops/math/logic/OpEagerIf.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpEagerIf\\n/// @notice Opcode for selecting a value based on a condition.\\nlibrary OpEagerIf {\\n    /// Eager because BOTH x_ and y_ must be eagerly evaluated\\n    /// before EAGER_IF will select one of them. If both x_ and y_\\n    /// are cheap (e.g. constant values) then this may also be the\\n    /// simplest and cheapest way to select one of them.\\n    function eagerIf(uint256, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            let location_ := sub(stackTopLocation_, 0x60)\\n            stackTopLocation_ := add(location_, 0x20)\\n            // false => use second value\\n            // true => use first value\\n            mstore(\\n                location_,\\n                mload(\\n                    add(stackTopLocation_, mul(0x20, iszero(mload(location_))))\\n                )\\n            )\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xe969feef10104d8581d1eb951e6991a0dbed423f4e556c4815352f539c554458\",\"license\":\"CAL\"},\"contracts/vm/ops/math/logic/OpEqualTo.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpEqualTo\\n/// @notice Opcode to compare the top two stack values.\\nlibrary OpEqualTo {\\n    function equalTo(uint256, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            let location_ := sub(stackTopLocation_, 0x20)\\n            mstore(location_, eq(mload(location_), mload(stackTopLocation_)))\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x82f291dbd5982b4f42961720ff4e35ca3ee4a85f07ae501a2a31b08f96c89f4c\",\"license\":\"CAL\"},\"contracts/vm/ops/math/logic/OpEvery.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpEvery\\n/// @notice Opcode to compare the top N stack values.\\nlibrary OpEvery {\\n    // EVERY\\n    // EVERY is either the first item if every item is nonzero, else 0.\\n    // operand_ is the length of items to check.\\n    function every(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            let location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            for {\\n                let cursor_ := location_\\n            } lt(cursor_, stackTopLocation_) {\\n                cursor_ := add(cursor_, 0x20)\\n            } {\\n                // If anything is zero then EVERY is a failed check.\\n                if iszero(mload(cursor_)) {\\n                    mstore(location_, 0)\\n                    break\\n                }\\n            }\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x8a1c1c3f52e8cf9258a9ec041a67246e847316b8b5c6642e99f996f2a36eaee1\",\"license\":\"CAL\"},\"contracts/vm/ops/math/logic/OpGreaterThan.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpGreaterThan\\n/// @notice Opcode to compare the top two stack values.\\nlibrary OpGreaterThan {\\n    function greaterThan(uint256, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            let location_ := sub(stackTopLocation_, 0x20)\\n            mstore(location_, gt(mload(location_), mload(stackTopLocation_)))\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x70b58ac456f24f0047bdfeb1137f465dc3801ce6cba4006ab94bd3e1956105dd\",\"license\":\"CAL\"},\"contracts/vm/ops/math/logic/OpIsZero.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpIsZero\\n/// @notice Opcode for checking if the stack top is zero.\\nlibrary OpIsZero {\\n    function isZero(uint256, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            // The index doesn't change for iszero as there is\\n            // one input and output.\\n            let location_ := sub(stackTopLocation_, 0x20)\\n            mstore(location_, iszero(mload(location_)))\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x4fd2f15a887de7eb8355138abce5acb6d5d808ba78d360066ea29c8e743862d2\",\"license\":\"CAL\"},\"contracts/vm/ops/math/logic/OpLessThan.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title OpLessThan\\n/// @notice Opcode to compare the top two stack values.\\nlibrary OpLessThan {\\n    function lessThan(uint256, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            let location_ := sub(stackTopLocation_, 0x20)\\n            mstore(location_, lt(mload(location_), mload(stackTopLocation_)))\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x0a7df0155ff30495631aa1e466832cc53d2dd2c0fe2600386c12a2602ad9febd\",\"license\":\"CAL\"},\"contracts/vm/ops/math/saturating/OpSaturatingAdd.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../../math/SaturatingMath.sol\\\";\\n\\n/// @title OpSaturatingAdd\\n/// @notice Opcode for adding N numbers with saturating addition.\\nlibrary OpSaturatingAdd {\\n    using SaturatingMath for uint256;\\n\\n    function saturatingAdd(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 accumulator_;\\n        uint256 cursor_;\\n        uint256 item_;\\n        assembly {\\n            location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            accumulator_ := mload(location_)\\n            cursor_ := add(location_, 0x20)\\n        }\\n        while (\\n            cursor_ < stackTopLocation_ && accumulator_ < type(uint256).max\\n        ) {\\n            assembly {\\n                item_ := mload(cursor_)\\n                cursor_ := add(cursor_, 0x20)\\n            }\\n            accumulator_ = accumulator_.saturatingAdd(item_);\\n        }\\n        assembly {\\n            mstore(location_, accumulator_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xd16cccb69cccb50c837ade18cbebd82df3ac6352bedb354f5b0c722bfad07702\",\"license\":\"CAL\"},\"contracts/vm/ops/math/saturating/OpSaturatingMul.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../../math/SaturatingMath.sol\\\";\\n\\n/// @title OpSaturatingMul\\n/// @notice Opcode for multiplying N numbers with saturating multiplication.\\nlibrary OpSaturatingMul {\\n    using SaturatingMath for uint256;\\n\\n    function saturatingMul(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 accumulator_;\\n        uint256 cursor_;\\n        uint256 item_;\\n        assembly {\\n            location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            accumulator_ := mload(location_)\\n            cursor_ := add(location_, 0x20)\\n        }\\n        while (\\n            cursor_ < stackTopLocation_ && accumulator_ < type(uint256).max\\n        ) {\\n            assembly {\\n                item_ := mload(cursor_)\\n                cursor_ := add(cursor_, 0x20)\\n            }\\n            accumulator_ = accumulator_.saturatingMul(item_);\\n        }\\n        assembly {\\n            mstore(location_, accumulator_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x2ad362e8b053e7a2023ddac1ae84c591d2cf944e5bc4891b7cffba6033c29f92\",\"license\":\"CAL\"},\"contracts/vm/ops/math/saturating/OpSaturatingSub.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../../math/SaturatingMath.sol\\\";\\n\\n/// @title OpSaturatingSub\\n/// @notice Opcode for subtracting N numbers with saturating subtraction.\\nlibrary OpSaturatingSub {\\n    using SaturatingMath for uint256;\\n\\n    function saturatingSub(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 accumulator_;\\n        uint256 cursor_;\\n        uint256 item_;\\n        assembly {\\n            location_ := sub(stackTopLocation_, mul(operand_, 0x20))\\n            accumulator_ := mload(location_)\\n            cursor_ := add(location_, 0x20)\\n        }\\n        while (cursor_ < stackTopLocation_ && 0 < accumulator_) {\\n            assembly {\\n                item_ := mload(cursor_)\\n                cursor_ := add(cursor_, 0x20)\\n            }\\n            accumulator_ = accumulator_.saturatingSub(item_);\\n        }\\n        assembly {\\n            mstore(location_, accumulator_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xcb9885a02bed8efab382734cdf2022424b208052e662881433b1cabf0b07b922\",\"license\":\"CAL\"},\"contracts/vm/ops/tier/OpITierV2Report.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../tier/ITierV2.sol\\\";\\n\\n/// @title OpITierV2Report\\n/// @notice Exposes `ITierV2.report` as an opcode.\\nlibrary OpITierV2Report {\\n    function stackPops(uint256 operand_)\\n        internal\\n        pure\\n        returns (uint256 reportsLength_)\\n    {\\n        unchecked {\\n            reportsLength_ = operand_ + 2;\\n        }\\n    }\\n\\n    // Stack the `report` returned by an `ITierV2` contract.\\n    function report(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 tierContract_;\\n        uint256 account_;\\n        uint256[] memory context_;\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, add(0x20, operand_))\\n            location_ := sub(stackTopLocation_, 0x20)\\n            tierContract_ := mload(location_)\\n            account_ := mload(stackTopLocation_)\\n            // we can reuse the account_ as the length for context_\\n            // and achieve a near zero-cost bytes array to send to `report`.\\n            mstore(stackTopLocation_, operand_)\\n            context_ := stackTopLocation_\\n        }\\n        uint256 report_ = ITierV2(address(uint160(tierContract_))).report(\\n            address(uint160(account_)),\\n            context_\\n        );\\n        assembly {\\n            mstore(location_, report_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xcdb73c4531a175ffbecb2b2ea9787abe37d2082a5553f59aa8dacec82d0bf553\",\"license\":\"CAL\"},\"contracts/vm/ops/tier/OpITierV2ReportTimeForTier.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../tier/ITierV2.sol\\\";\\n\\n/// @title OpITierV2Report\\n/// @notice Exposes `ITierV2.reportTimeForTier` as an opcode.\\nlibrary OpITierV2ReportTimeForTier {\\n    function stackPops(uint256 operand_)\\n        internal\\n        pure\\n        returns (uint256 reportsLength_)\\n    {\\n        unchecked {\\n            reportsLength_ = operand_ + 3;\\n        }\\n    }\\n\\n    // Stack the `reportTimeForTier` returned by an `ITierV2` contract.\\n    function reportTimeForTier(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 tierContract_;\\n        uint256 account_;\\n        uint256 tier_;\\n        uint256[] memory context_;\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, add(0x20, operand_))\\n            location_ := sub(stackTopLocation_, 0x40)\\n            tierContract_ := mload(location_)\\n            account_ := mload(add(location_, 0x20))\\n            tier_ := mload(stackTopLocation_)\\n            // we can reuse the tier_ as the length for context_ and achieve a\\n            // near zero-cost bytes array to send to `reportTimeForTier`.\\n            mstore(stackTopLocation_, operand_)\\n            context_ := stackTopLocation_\\n        }\\n        uint256 reportTime_ = ITierV2(address(uint160(tierContract_)))\\n            .reportTimeForTier(address(uint160(account_)), tier_, context_);\\n        assembly {\\n            mstore(location_, reportTime_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x76c5ba4e00479285677779ee220e8d8a190decce447914055024effddc682fc7\",\"license\":\"CAL\"},\"contracts/vm/ops/tier/OpSaturatingDiff.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../tier/libraries/TierwiseCombine.sol\\\";\\n\\nlibrary OpSaturatingDiff {\\n    // Stack the tierwise saturating subtraction of two reports.\\n    // If the older report is newer than newer report the result will\\n    // be `0`, else a tierwise diff in blocks will be obtained.\\n    // The older and newer report are taken from the stack.\\n    function saturatingDiff(uint256, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 location_;\\n        uint256 newerReport_;\\n        uint256 olderReport_;\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            location_ := sub(stackTopLocation_, 0x20)\\n            newerReport_ := mload(location_)\\n            olderReport_ := mload(stackTopLocation_)\\n        }\\n        uint256 result_ = TierwiseCombine.saturatingSub(\\n            newerReport_,\\n            olderReport_\\n        );\\n        assembly {\\n            mstore(location_, result_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0xc3426d11ef4b2090ece900ddfa2e802e4af8a539b336e32e4e7a9aac71af445b\",\"license\":\"CAL\"},\"contracts/vm/ops/tier/OpSelectLte.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../tier/libraries/TierwiseCombine.sol\\\";\\n\\n/// @title OpSelectLte\\n/// @notice Exposes `TierwiseCombine.selectLte` as an opcode.\\nlibrary OpSelectLte {\\n    function stackPops(uint256 operand_) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 reportsLength_ = operand_ & 0x1F; // & 00011111\\n            require(reportsLength_ > 0, \\\"BAD_OPERAND\\\");\\n            return reportsLength_;\\n        }\\n    }\\n\\n    // Stacks the result of a `selectLte` combinator.\\n    // All `selectLte` share the same stack and argument handling.\\n    // Takes the `logic_` and `mode_` from the `operand_` high bits.\\n    // `logic_` is the highest bit.\\n    // `mode_` is the 2 highest bits after `logic_`.\\n    // The other bits specify how many values to take from the stack\\n    // as reports to compare against each other and the block number.\\n    function selectLte(uint256 operand_, uint256 stackTopLocation_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 logic_ = operand_ >> 7;\\n        uint256 mode_ = (operand_ >> 5) & 0x3; // & 00000011\\n        uint256 reportsLength_ = operand_ & 0x1F; // & 00011111\\n\\n        uint256 location_;\\n        uint256[] memory reports_ = new uint256[](reportsLength_);\\n        uint256 time_;\\n        assembly {\\n            location_ := sub(\\n                stackTopLocation_,\\n                mul(add(reportsLength_, 1), 0x20)\\n            )\\n            let maxCursor_ := add(location_, mul(reportsLength_, 0x20))\\n            for {\\n                let cursor_ := location_\\n                let i_ := 0\\n            } lt(cursor_, maxCursor_) {\\n                cursor_ := add(cursor_, 0x20)\\n                i_ := add(i_, 0x20)\\n            } {\\n                mstore(add(reports_, add(0x20, i_)), mload(cursor_))\\n            }\\n            time_ := mload(maxCursor_)\\n        }\\n\\n        uint256 result_ = TierwiseCombine.selectLte(\\n            reports_,\\n            time_,\\n            logic_,\\n            mode_\\n        );\\n        assembly {\\n            mstore(location_, result_)\\n            stackTopLocation_ := add(location_, 0x20)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x5ddbf756632e07e8c94dd00b90fb2e4db954b2105abefba3cf5fc97222451e78\",\"license\":\"CAL\"},\"contracts/vm/ops/tier/OpUpdateTimesForTierRange.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../../../tier/libraries/TierReport.sol\\\";\\n\\nlibrary OpUpdateTimesForTierRange {\\n    // Stacks a report with updated times over tier range.\\n    // The start and end tier are taken from the low and high bits of\\n    // the `operand_` respectively.\\n    // The report to update and timestamp to update to are both\\n    // taken from the stack.\\n    function updateTimesForTierRange(\\n        uint256 operand_,\\n        uint256 stackTopLocation_\\n    ) internal pure returns (uint256) {\\n        uint256 location_;\\n        uint256 report_;\\n        uint256 startTier_ = operand_ & 0x0f; // & 00001111\\n        uint256 endTier_ = (operand_ >> 4) & 0x0f; // & 00001111\\n        uint256 timestamp_;\\n\\n        assembly {\\n            stackTopLocation_ := sub(stackTopLocation_, 0x20)\\n            location_ := sub(stackTopLocation_, 0x20)\\n            report_ := mload(location_)\\n            timestamp_ := mload(stackTopLocation_)\\n        }\\n\\n        uint256 result_ = TierReport.updateTimesForTierRange(\\n            report_,\\n            startTier_,\\n            endTier_,\\n            timestamp_\\n        );\\n\\n        assembly {\\n            mstore(location_, result_)\\n        }\\n        return stackTopLocation_;\\n    }\\n}\\n\",\"keccak256\":\"0x34aeb29dd80c3589ba83dbc5b6e6becf145990b605471cde925f97eb268166dc\",\"license\":\"CAL\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200496b3803806200496b83398101604081905262000034916200004a565b306080526001600160a01b031660a0526200007c565b6000602082840312156200005d57600080fd5b81516001600160a01b03811681146200007557600080fd5b9392505050565b60805160a0516148c9620000a26000396000610d9e01526000610dbf01526148c96000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063bb93549b1161005b578063bb93549b146100bd578063e0419ae3146100d0578063e6b626361461010d578063f2cd6c081461012057600080fd5b80634a342e68146100825780634f2661871461009757806384e07cdc146100aa575b600080fd5b61009561009036600461379a565b610135565b005b6100956100a53660046137ed565b610258565b6100956100b8366004613a5d565b6103ac565b6100956100cb366004613afb565b610d97565b6040805180820182526000808252602091820181905282518084018452818152820181815283519182525191810191909152015b60405180910390f35b61009561011b3660046137ed565b610e60565b610128610f5a565b6040516101049190613bac565b6101426020820182613bbf565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4f574e455200000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006101ee6101e983613bdc565b61113f565b600081815260208190526040902054909150600114156102545760008181526020819052604080822091909155517fdefb26ae563b251be3ab9494dd34f2147bbbc13d20d407bc783d275d4b958e5e9061024b9033908590613c9c565b60405180910390a15b5050565b336000908152600160209081526040822090829061027890850185613bbf565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081208584013582529092528082205492506102bf908401358361118e565b90506102cb8183613d8d565b336000908152600160209081526040822091906102ea90870187613bbf565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085602001358152602001908152602001600020819055507f2538ccc7ad2a119a36f2e65c1e2fc908beef800cd59b5d6680db24de18e7847a33848360405161037093929190613ddc565b60405180910390a16103a7338261038a6020870187613bbf565b73ffffffffffffffffffffffffffffffffffffffff1691906111a8565b505050565b60006103b78461113f565b905060006103c48461113f565b9050836020015173ffffffffffffffffffffffffffffffffffffffff16856060015173ffffffffffffffffffffffffffffffffffffffff1614610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f544f4b454e5f4d49534d4154434800000000000000000000000000000000000060448201526064016101d2565b846020015173ffffffffffffffffffffffffffffffffffffffff16846060015173ffffffffffffffffffffffffffffffffffffffff1614610500576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f544f4b454e5f4d49534d4154434800000000000000000000000000000000000060448201526064016101d2565b600082815260208190526040902054600114610578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f415f4e4f545f4c4956450000000000000000000000000000000000000000000060448201526064016101d2565b6000818152602081905260409020546001146105f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f425f4e4f545f4c4956450000000000000000000000000000000000000000000060448201526064016101d2565b61061b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000806000807fc8fdaeeb4c67170b308e2c1186ec1ab72321b4e96499f8d9aa9bdef787959d25338b8b8b6040516106569493929190613e81565b60405180910390a16106906040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b61069d8b60c0015161127c565b90506106e16106d960405180604001604052808b81526020018d6000015173ffffffffffffffffffffffffffffffffffffffff168152506113e8565b82600061143c565b5080602001516001826000015103815181106106ff576106ff613edf565b60200260200101519450806020015160028260000151038151811061072657610726613edf565b6020026020010151925061073d8a60c0015161127c565b90506107796106d960405180604001604052808a81526020018e6000015173ffffffffffffffffffffffffffffffffffffffff168152506113e8565b50806020015160018260000151038151811061079757610797613edf565b6020026020010151935080602001516002826000015103815181106107be576107be613edf565b6020026020010151915050610875600160008c6000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c6060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c608001518152602001908152602001600020548361118e90919063ffffffff16565b895173ffffffffffffffffffffffffffffffffffffffff908116600090815260016020908152604080832060608f0151909416835292815282822060808e01518352905220549092506108c990829061118e565b90506108df6108d88285611712565b839061118e565b85526108f56108ee8386611712565b829061118e565b6020860152845115158061090d575060008560200151115b610973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f305f434c4541520000000000000000000000000000000000000000000000000060448201526064016101d2565b845161097f9085611712565b604086015260208501516109939084611712565b606086015250508251159150610a8b9050578051865173ffffffffffffffffffffffffffffffffffffffff908116600090815260016020908152604080832060608c0151909416835292815282822060808b01518352905290812080549091906109fe908490613d8d565b909155505060a086015160011615610a3657805160008481526002602052604081208054909190610a30908490613f0e565b90915550505b60a086015160021615610a8b5780516000848152600360209081526040808320895173ffffffffffffffffffffffffffffffffffffffff16845290915281208054909190610a85908490613f0e565b90915550505b602081015115610b8757602080820151865173ffffffffffffffffffffffffffffffffffffffff908116600090815260018452604080822060608b0151909316825291845281812060808a015182529093528220805491929091610af0908490613d8d565b909155505060a085015160011615610b2f578060200151600260008481526020019081526020016000206000828254610b299190613f0e565b90915550505b60a085015160021615610b875760208082015160008481526003835260408082208a5173ffffffffffffffffffffffffffffffffffffffff168352909352918220805491929091610b81908490613f0e565b90915550505b604081015115610bf257604080820151875173ffffffffffffffffffffffffffffffffffffffff908116600090815260016020908152848220818c015190931682529182528381208a8501518252909152918220805491929091610bec908490613f0e565b90915550505b606081015115610c5c576060810151855173ffffffffffffffffffffffffffffffffffffffff9081166000908152600160209081526040808320828b01519094168352928152828220838a0151835290529081208054909190610c56908490613f0e565b90915550505b60608101518151600091610c6f91613d8d565b9050600082604001518360200151610c879190613d8d565b90508115610ce25733600090815260016020908152604080832060608c015173ffffffffffffffffffffffffffffffffffffffff16845282528083208935845290915281208054849290610cdc908490613f0e565b90915550505b8015610d3d5733600090815260016020908152604080832060608b015173ffffffffffffffffffffffffffffffffffffffff168452825280832089830135845290915281208054839290610d37908490613f0e565b90915550505b505060408051825181526020808401519082015282820151818301526060808401519082015290517f3e673c18070310617c4b157f17e875bbc59a81b0f5107d346dfed8775de6f0f79181900360800190a1505050505050565b6000610dec7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610de785613fb0565b611731565b90506000610df98261113f565b6000818152602081905260409020549091506103a7576000818152602081905260409081902060019055517fd0a47b54268dda2cd6b19382b7bb0140468dffa248430275421ff569d8462cb890610e539033908590614100565b60405180910390a1505050565b33600090815260016020908152604080832090840135929091610e8590850185613bbf565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020013581526020019081526020016000206000828254610ee39190613f0e565b90915550506040517fadc7bd964a04a8a02261d33d2d09c6a7d9f539bc5eab77008e85fc6661ef123190610f1a903390849061412f565b60405180910390a1610f5733306040840135610f396020860186613bbf565b73ffffffffffffffffffffffffffffffffffffffff169291906119bf565b50565b604080516105e08101825260006020820181905291810182905260608181018390526080820183905260a0820183905260c0820192909252611e6860e08201819052611f5c610100830152611fe86101208301526121096101408301526101608201526121b26101808201526122ba6101a082015261238e6101c082015261258b6101e08201526125966102008201526125a16102208201526125ac6102408201526125b76102608201526125eb6102808201526126516102a08201526126b76102c08201526126eb6102e082015261271f6103008201526127546103208201526127af61034082015261280561036082015261282e6103808201526128856103a08201526128b26103c08201526129096103e08201526129746104008201526129d1610420820152612a0f610440820152612a48610460820152612a7c610480820152612aae6104a0820152612ae06104c0820152612b126104e0820152612b46610500820152612b98610520820152612bd1610540820152612c83610560820152612db0610580820152612e0c6105a0820152612ec66105c080830191909152815260408051606081018252612f426020820152612f7d8183015290815260405160200161112b929190614159565b604051602081830303815290604052905090565b6000816040516020016111529190614188565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012092915050565b600081831061119d578161119f565b825b90505b92915050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526103a79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611a23565b6112ae6040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b6112e06040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b60208301805160ff8082168352606084019290925290600882901c1667ffffffffffffffff81111561131457611314613809565b60405190808252806020026020018201604052801561133d578160200160208202803683370190505b50602083015260ff601082901c81166080840152601882901c16606060008267ffffffffffffffff81111561137457611374613809565b60405190808252806020026020018201604052801561139d578160200160208202803683370190505b5090506020870151602002604001870160005b848110156113d75781602082026020018401528151602001820191506001810190506113b0565b505060408501525091949350505050565b60606113f261377c565b8251815260208084015173ffffffffffffffffffffffffffffffffffffffff16818301526040516114259183910161419b565b604051602081830303815290604052915050919050565b60208281015183516040850151848402018301518051606087015160a088015160009687968796879695948301938284019391820290920101906002015b848910156116f8576003890198508886015180601f1a975061ffff8160081c16985050600688101561167057876114bf57866020028401518252602082019150611683565b60018814156114dc57602087028301518252602082019150611683565b6002881415611569578c518760200210611552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f434f4e544558545f4c454e47544800000000000000000000000000000000000060448201526064016101d2565b866020026020018d01518252602082019150611683565b60038814156115b157600061159f6040805180820182526000808252602091820181905282518084019093528083529082015290565b51880154835250602090910190611683565b60048814156115cd576115c68d8d848a611b2f565b9150611683565b6060876115fb578c6040516020016115e5919061425c565b604051602081830303815290604052905061165a565b60018814156116145761160d8d611c9c565b905061165a565b6002881415611630576020808e01516040516115e592016142f3565b600388141561165a578c516040805160208101929092520160405160208183030381529060405290505b80511561166a5761166a81611dd9565b50611683565b8761167f888463ffffffff8416565b9250505b60208c0151518c5111156116f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f535441434b5f4f564552464c4f5700000000000000000000000000000000000060448201526064016101d2565b61147a565b6020838303048c52509750505050505050505b9392505050565b6000670de0b6b3a76400006117278385614358565b61119f9190614395565b6117b36040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b6117f36040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008082526002602083015260408051600180825281830190925290816020015b6118546040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081611814579050509050818160008151811061187d5761187d613edf565b60200260200101819052506040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001856000015173ffffffffffffffffffffffffffffffffffffffff16815260200185602001518152602001856040015173ffffffffffffffffffffffffffffffffffffffff16815260200185606001518152602001856080015181526020018773ffffffffffffffffffffffffffffffffffffffff166317376ae0888860a00151866040518463ffffffff1660e01b815260040161194e939291906143d0565b6000604051808303816000875af115801561196d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526119b391908101906144c3565b90529695505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611a1d9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016111fa565b50505050565b6000611a85826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130019092919063ffffffff16565b8051909150156103a75780806020019051810190611aa3919061453a565b6103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101d2565b600060078216600383811c16828082611b6e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050610100611bb9565b8260011415611b9257506fffffffffffffffffffffffffffffffff90506080611bb9565b8260021415611bae575067ffffffffffffffff90506040611bb9565b5063ffffffff905060205b6001600587901c0160008167ffffffffffffffff811115611bdc57611bdc613809565b604051908082528060200260200182016040528015611c05578160200160208202803683370190505b50905060208082019083028a03815b8b821015611c2c578151815260209182019101611c14565b505060608b015160808c015160209081029091010160005b610100811015611c8a5760208502830182845b82811015611c73578051841c8a16825260209182019101611c57565b505050611c818e8e8b61143c565b9b508501611c44565b50999c9b505050505050505050505050565b606060008260600151905060006018846040015151901b60108560800151901b6008866020015151901b866060015151171717905060008160001b83604051602001611ce891906142f3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052611d24929160200161455c565b604051602081830303815290604052905060005b856040015151811015611dd0578186604001518281518110611d5c57611d5c613edf565b60200260200101515160001b87604001518381518110611d7e57611d7e613edf565b6020026020010151604051602001611d9893929190614582565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529150600101611d38565b50949350505050565b610f5781604051602401611ded9190613bac565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0be77f5600000000000000000000000000000000000000000000000000000000179052613018565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920180516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808316600483015292946000949390929185918416906370a08231906024015b602060405180830381865afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f91906145b9565b9093525092949350505050565b60008060006020840391508151905060008173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdc91906145b9565b90925250919392505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0830180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909401516040517f4ee2cd7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808716600483015260248201839052929560009594939092918691851690634ee2cd7e906044015b602060405180830381865afa1580156120d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fb91906145b9565b909452509395945050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920180516040517f981b24d000000000000000000000000000000000000000000000000000000000815260048101829052919360009392909190849073ffffffffffffffffffffffffffffffffffffffff84169063981b24d090602401611f0e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920180516040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052919360009392909190849073ffffffffffffffffffffffffffffffffffffffff841690636352211e90602401602060405180830381865afa158015612273573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229791906145d2565b73ffffffffffffffffffffffffffffffffffffffff169093525092949350505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0830180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909401516040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301526024820183905292956000959493909291869185169062fdd58e906044016120ba565b60008060008467ffffffffffffffff8111156123ac576123ac613809565b6040519080825280602002602001820160405280156123d5578160200160208202803683370190505b50905060008567ffffffffffffffff8111156123f3576123f3613809565b60405190808252806020026020018201604052801561241c578160200160208202803683370190505b506040870286037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018051909550919250602080890282019085015b81831015612471578251815260209283019201612459565b5050602088028101602084015b8183101561249657825181526020928301920161247e565b50506040517f4e1273f40000000000000000000000000000000000000000000000000000000081526000915073ffffffffffffffffffffffffffffffffffffffff831690634e1273f4906124f090879087906004016145ef565b600060405180830381865afa15801561250d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526125539190810190614652565b9050846020820160208a0281015b8082101561257c578151835260209283019290910190612561565b50909998505050505050505050565b438152602001919050565b338152602001919050565b308152602001919050565b428152602001919050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180516000919082611fdc8287613039565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201805190926000929183611f4f8261264b858a613039565b906130ba565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201805190926000929183611f4f826126b1858a613039565b90611712565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180516000919082611fdc82876130cf565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180516000919082611fdc828761311a565b6000602083028203805b838110156127495780518015612740578252612749565b50602001612729565b506020019392505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0810180511560200282017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc090810151909152018092915050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc09092018051909214909152919050565b6000602083028203805b838110156127495780516128265760008252612749565b60200161280f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0909201805192909211909152919050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018051159052919050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0909201805192909210909152919050565b6020828102820380516000928201835b858210801561294757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83105b156129665750805160209091019061295f8382613178565b9250612919565b505081526020019392505050565b6020828102820380516000928201835b85821080156129b257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83105b15612966575080516020909101906129ca83826131b3565b9250612984565b6020828102820380516000928201835b85821080156129f05750826000105b1561296657508051602090910190612a0883826131e2565b92506129e1565b600060208302820380516000602083015b858110156129665780518301915082821015612a3b57600080fd5b9091508190602001612a20565b600060208302820380516000602083015b85811015612966578051915081612a6f57600080fd5b9181900491602001612a59565b6020828102820380516000928201835b8582101561296657508051602090910190612aa781846147f8565b9250612a8c565b6020828102820380516000928201835b858210156129665750805182811115612ad5578092505b602082019150612abe565b6020828102820380516000928201835b858210156129665750805182811015612b07578092505b602082019150612af0565b600060208302820380516000602083015b85811015612966578051915081612b3957600080fd5b9181900691602001612b23565b60006020830282038051600080602084015b86811015612b89578315612b81578051925082840291508284830414612b7d57600080fd5b8193505b602001612b58565b50505081526020019392505050565b600060208302820380516000602083015b858110156129665780518303915082821115612bc457600080fd5b9091508190602001612ba9565b8190037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920180518482526040517f88d686040000000000000000000000000000000000000000000000000000000081529193600093929091908590859073ffffffffffffffffffffffffffffffffffffffff8516906388d68604906120ba9086908690600401614804565b8190037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08301517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090930180518582526040517fcaa0eb3b000000000000000000000000000000000000000000000000000000008152919460009493929091908690869073ffffffffffffffffffffffffffffffffffffffff86169063caa0eb3b90612d5c90879087908790600401614833565b602060405180830381865afa158015612d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9d91906145b9565b8652505060209093019695505050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201805190926000929183611f4f83836131f8565b6000600783901c6003600585901c16601f851683808267ffffffffffffffff811115612e3a57612e3a613809565b604051908082528060200260200182016040528015612e63578160200160208202803683370190505b509050600060206001850102880392506020840283018360005b82821015612e9f57815181602001860152602082019150602081019050612e7d565b50505190506000612eb283838989613257565b845250506020909101979650505050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092018051909260009291600f80871691600488901c9091169085612f33858585856133a7565b90955250949695505050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180516000908152600260205260409020549052919050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092018051600093845260036020908152604080862073ffffffffffffffffffffffffffffffffffffffff9093168652919052909220549052919050565b6060613010848460008561344d565b949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080826012141561304e57839150506111a2565b826012111561307a5750601282900361306881600a6147f8565b6130729085614358565b9150506111a2565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee82016130a981600a6147f8565b6130729085614395565b5092915050565b600081611727670de0b6b3a764000085614358565b600081810b6130df5750816111a2565b60008260000b1315613107576130f682600a614868565b6131009084614358565b90506111a2565b60ff6000839003166130a981600a6147f8565b600080601283141561312f57839150506111a2565b8260121115613149575060128290036130a981600a6147f8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee820161306881600a6147f8565b600082820183811061318a5780613010565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff949350505050565b6000826131c2575060006111a2565b828202828482816131d5576131d5614329565b04141561318a5780613010565b60008183116131f257600061119f565b50900390565b60008060015b6008811161324f57600061321286836135e3565b9050600061322086846135e3565b9050600061322e83836131e2565b905061323e856001860383613690565b945050600190920191506131fe9050565b509392505050565b835160009081908190819060015b600881116133995760009250828761329e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6132a2565b5060005b60005b83811015613357576132d08c82815181106132c2576132c2613edf565b6020026020010151846135e3565b95508a861161332257886132ef576132e8868361118e565b9150613319565b6001891415613302576132e88683613719565b600289148015613310575084155b15613319578591505b6001945061334f565b8961334f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150613357565b6001016132a5565b508361338057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b61338e866001840383613690565b955050600101613265565b509298975050505050505050565b6000826008811115613415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016101d2565b6000855b858110156134415763ffffffff6020820290811b199890981685891b17979150600101613419565b50959695505050505050565b6060824710156134df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101d2565b73ffffffffffffffffffffffffffffffffffffffff85163b61355d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101d2565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516135869190614877565b60006040518083038185875af1925050503d80600081146135c3576040519150601f19603f3d011682016040523d82523d6000602084013e6135c8565b606091505b50915091506135d8828286613729565b979650505050505050565b6000816008811115613651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016101d2565b8261365f57600091506130b3565b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016020021c63ffffffff1690565b60008260088111156136fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016101d2565b505063ffffffff602090920291821b199290921691901b1790565b60008183101561119d578161119f565b6060831561373857508161170b565b8251156137485782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d29190613bac565b60405180604001604052806002906020820280368337509192915050565b6000602082840312156137ac57600080fd5b813567ffffffffffffffff8111156137c357600080fd5b820160e0818503121561170b57600080fd5b6000606082840312156137e757600080fd5b50919050565b6000606082840312156137ff57600080fd5b61119f83836137d5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561385b5761385b613809565b60405290565b60405160c0810167ffffffffffffffff8111828210171561385b5761385b613809565b6040805190810167ffffffffffffffff8111828210171561385b5761385b613809565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156138ee576138ee613809565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f5757600080fd5b8035613923816138f6565b919050565b600067ffffffffffffffff82111561394257613942613809565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261397f57600080fd5b813561399261398d82613928565b6138a7565b8181528460208386010111156139a757600080fd5b816020850160208301376000918101602001919091529392505050565b600060e082840312156139d657600080fd5b6139de613838565b90506139e982613918565b81526139f760208301613918565b602082015260408201356040820152613a1260608301613918565b60608201526080820135608082015260a082013560a082015260c082013567ffffffffffffffff811115613a4557600080fd5b613a518482850161396e565b60c08301525092915050565b60008060008385036080811215613a7357600080fd5b843567ffffffffffffffff80821115613a8b57600080fd5b613a97888389016139c4565b95506020870135915080821115613aad57600080fd5b50613aba878288016139c4565b93505060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082011215613aed57600080fd5b506040840190509250925092565b600060208284031215613b0d57600080fd5b813567ffffffffffffffff811115613b2457600080fd5b820160c0818503121561170b57600080fd5b60005b83811015613b51578181015183820152602001613b39565b83811115611a1d5750506000910152565b60008151808452613b7a816020860160208601613b36565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061119f6020830184613b62565b600060208284031215613bd157600080fd5b813561170b816138f6565b60006111a236836139c4565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613c1d57600080fd5b830160208101925035905067ffffffffffffffff811115613c3d57600080fd5b803603831315613c4c57600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff8085168352604060208401528335613cca816138f6565b811660408401526020840135613cdf816138f6565b8181166060850152505060408301356080830152613cff60608401613918565b73ffffffffffffffffffffffffffffffffffffffff811660a084015250608083013560c083015260a083013560e0830152613d3d60c0840184613be8565b60e0610100850152613d5461012085018284613c53565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015613d9f57613d9f613d5e565b500390565b8035613daf816138f6565b73ffffffffffffffffffffffffffffffffffffffff16825260208181013590830152604090810135910152565b73ffffffffffffffffffffffffffffffffffffffff8416815260a08101613e066020830185613da4565b826080830152949350505050565b600073ffffffffffffffffffffffffffffffffffffffff80835116845280602084015116602085015260408301516040850152806060840151166060850152506080820151608084015260a082015160a084015260c082015160e060c085015261301060e0850182613b62565b73ffffffffffffffffffffffffffffffffffffffff8516815260a060208201526000613eb060a0830186613e14565b8281036040840152613ec28186613e14565b915050823560608301526020830135608083015295945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008219821115613f2157613f21613d5e565b500190565b600067ffffffffffffffff821115613f4057613f40613809565b5060051b60200190565b600082601f830112613f5b57600080fd5b81356020613f6b61398d83613f26565b82815260059290921b84018101918181019086841115613f8a57600080fd5b8286015b84811015613fa55780358352918301918301613f8e565b509695505050505050565b600060c08236031215613fc257600080fd5b613fca613861565b8235613fd5816138f6565b8152602083810135818301526040840135613fef816138f6565b80604084015250606084013560608301526080840135608083015260a084013567ffffffffffffffff8082111561402557600080fd5b81860191506040823603121561403a57600080fd5b614042613884565b82358281111561405157600080fd5b830136601f82011261406257600080fd5b803561407061398d82613f26565b81815260059190911b8201860190868101903683111561408f57600080fd5b8784015b838110156140c7578035878111156140ab5760008081fd5b6140b9368b8389010161396e565b845250918801918801614093565b50845250505082840135828111156140de57600080fd5b6140ea36828601613f4a565b9482019490945260a08501525091949350505050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006130106040830184613e14565b73ffffffffffffffffffffffffffffffffffffffff831681526080810161170b6020830184613da4565b6000835161416b818460208801613b36565b83519083019061417f818360208801613b36565b01949350505050565b60208152600061119f6020830184613e14565b60008183825b60028110156141c05781518352602092830192909101906001016141a1565b50505060408201905092915050565b600081518084526020808501945080840160005b838110156141ff578151875295820195908201906001016141e3565b509495945050505050565b6000815180845260208085019450848260051b860182860160005b8581101561424f57838303895261423d838351613b62565b98850198925090840190600101614225565b5090979650505050505050565b60208152815160208201526000602083015160a0604084015261428260c08401826141cf565b905060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808584030160608601526142be838361420a565b92506060860151915080858403016080860152506142dc82826141cf565b915050608084015160a08401528091505092915050565b815160009082906020808601845b8381101561431d57815185529382019390820190600101614301565b50929695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561439057614390613d5e565b500290565b6000826143cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000606073ffffffffffffffffffffffffffffffffffffffff861683526020818185015260a086516040808588015261440b8388018361420a565b91508389015160807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa089850301818a015261444684836141cf565b898103848b01528a51808252878c019550908701925060005b818110156144b15785518051855288810151898601528581015186860152898101518a8601528381015184860152878101518886015260c090810151908501529487019460e09093019260010161445f565b50919c9b505050505050505050505050565b6000602082840312156144d557600080fd5b815167ffffffffffffffff8111156144ec57600080fd5b8201601f810184136144fd57600080fd5b805161450b61398d82613928565b81815285602083850101111561452057600080fd5b614531826020830160208601613b36565b95945050505050565b60006020828403121561454c57600080fd5b8151801515811461170b57600080fd5b82815260008251614574816020850160208701613b36565b919091016020019392505050565b60008451614594818460208901613b36565b820184815283516145ac816020808501908801613b36565b0160200195945050505050565b6000602082840312156145cb57600080fd5b5051919050565b6000602082840312156145e457600080fd5b815161170b816138f6565b604080825283519082018190526000906020906060840190828701845b8281101561463e57815173ffffffffffffffffffffffffffffffffffffffff168452928401929084019060010161460c565b50505083810382850152613d5481866141cf565b6000602080838503121561466557600080fd5b825167ffffffffffffffff81111561467c57600080fd5b8301601f8101851361468d57600080fd5b805161469b61398d82613f26565b81815260059190911b820183019083810190878311156146ba57600080fd5b928401925b828410156135d8578351825292840192908401906146bf565b600181815b8085111561473157817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561471757614717613d5e565b8085161561472457918102915b93841c93908002906146dd565b509250929050565b600082614748575060016111a2565b81614755575060006111a2565b816001811461476b576002811461477557614791565b60019150506111a2565b60ff84111561478657614786613d5e565b50506001821b6111a2565b5060208310610133831016604e8410600b84101617156147b4575081810a6111a2565b6147be83836146d8565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156147f0576147f0613d5e565b029392505050565b600061119f8383614739565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061301060408301846141cf565b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061453160608301846141cf565b600061119f60ff841683614739565b60008251614889818460208701613b36565b919091019291505056fea26469706673582212208dbafb7bcd48b014402a0a55130cd0c770b52b90593b84266a98db1f404653c064736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063bb93549b1161005b578063bb93549b146100bd578063e0419ae3146100d0578063e6b626361461010d578063f2cd6c081461012057600080fd5b80634a342e68146100825780634f2661871461009757806384e07cdc146100aa575b600080fd5b61009561009036600461379a565b610135565b005b6100956100a53660046137ed565b610258565b6100956100b8366004613a5d565b6103ac565b6100956100cb366004613afb565b610d97565b6040805180820182526000808252602091820181905282518084018452818152820181815283519182525191810191909152015b60405180910390f35b61009561011b3660046137ed565b610e60565b610128610f5a565b6040516101049190613bac565b6101426020820182613bbf565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4f574e455200000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006101ee6101e983613bdc565b61113f565b600081815260208190526040902054909150600114156102545760008181526020819052604080822091909155517fdefb26ae563b251be3ab9494dd34f2147bbbc13d20d407bc783d275d4b958e5e9061024b9033908590613c9c565b60405180910390a15b5050565b336000908152600160209081526040822090829061027890850185613bbf565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081208584013582529092528082205492506102bf908401358361118e565b90506102cb8183613d8d565b336000908152600160209081526040822091906102ea90870187613bbf565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085602001358152602001908152602001600020819055507f2538ccc7ad2a119a36f2e65c1e2fc908beef800cd59b5d6680db24de18e7847a33848360405161037093929190613ddc565b60405180910390a16103a7338261038a6020870187613bbf565b73ffffffffffffffffffffffffffffffffffffffff1691906111a8565b505050565b60006103b78461113f565b905060006103c48461113f565b9050836020015173ffffffffffffffffffffffffffffffffffffffff16856060015173ffffffffffffffffffffffffffffffffffffffff1614610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f544f4b454e5f4d49534d4154434800000000000000000000000000000000000060448201526064016101d2565b846020015173ffffffffffffffffffffffffffffffffffffffff16846060015173ffffffffffffffffffffffffffffffffffffffff1614610500576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f544f4b454e5f4d49534d4154434800000000000000000000000000000000000060448201526064016101d2565b600082815260208190526040902054600114610578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f415f4e4f545f4c4956450000000000000000000000000000000000000000000060448201526064016101d2565b6000818152602081905260409020546001146105f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f425f4e4f545f4c4956450000000000000000000000000000000000000000000060448201526064016101d2565b61061b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000806000807fc8fdaeeb4c67170b308e2c1186ec1ab72321b4e96499f8d9aa9bdef787959d25338b8b8b6040516106569493929190613e81565b60405180910390a16106906040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b61069d8b60c0015161127c565b90506106e16106d960405180604001604052808b81526020018d6000015173ffffffffffffffffffffffffffffffffffffffff168152506113e8565b82600061143c565b5080602001516001826000015103815181106106ff576106ff613edf565b60200260200101519450806020015160028260000151038151811061072657610726613edf565b6020026020010151925061073d8a60c0015161127c565b90506107796106d960405180604001604052808a81526020018e6000015173ffffffffffffffffffffffffffffffffffffffff168152506113e8565b50806020015160018260000151038151811061079757610797613edf565b6020026020010151935080602001516002826000015103815181106107be576107be613edf565b6020026020010151915050610875600160008c6000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c6060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c608001518152602001908152602001600020548361118e90919063ffffffff16565b895173ffffffffffffffffffffffffffffffffffffffff908116600090815260016020908152604080832060608f0151909416835292815282822060808e01518352905220549092506108c990829061118e565b90506108df6108d88285611712565b839061118e565b85526108f56108ee8386611712565b829061118e565b6020860152845115158061090d575060008560200151115b610973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f305f434c4541520000000000000000000000000000000000000000000000000060448201526064016101d2565b845161097f9085611712565b604086015260208501516109939084611712565b606086015250508251159150610a8b9050578051865173ffffffffffffffffffffffffffffffffffffffff908116600090815260016020908152604080832060608c0151909416835292815282822060808b01518352905290812080549091906109fe908490613d8d565b909155505060a086015160011615610a3657805160008481526002602052604081208054909190610a30908490613f0e565b90915550505b60a086015160021615610a8b5780516000848152600360209081526040808320895173ffffffffffffffffffffffffffffffffffffffff16845290915281208054909190610a85908490613f0e565b90915550505b602081015115610b8757602080820151865173ffffffffffffffffffffffffffffffffffffffff908116600090815260018452604080822060608b0151909316825291845281812060808a015182529093528220805491929091610af0908490613d8d565b909155505060a085015160011615610b2f578060200151600260008481526020019081526020016000206000828254610b299190613f0e565b90915550505b60a085015160021615610b875760208082015160008481526003835260408082208a5173ffffffffffffffffffffffffffffffffffffffff168352909352918220805491929091610b81908490613f0e565b90915550505b604081015115610bf257604080820151875173ffffffffffffffffffffffffffffffffffffffff908116600090815260016020908152848220818c015190931682529182528381208a8501518252909152918220805491929091610bec908490613f0e565b90915550505b606081015115610c5c576060810151855173ffffffffffffffffffffffffffffffffffffffff9081166000908152600160209081526040808320828b01519094168352928152828220838a0151835290529081208054909190610c56908490613f0e565b90915550505b60608101518151600091610c6f91613d8d565b9050600082604001518360200151610c879190613d8d565b90508115610ce25733600090815260016020908152604080832060608c015173ffffffffffffffffffffffffffffffffffffffff16845282528083208935845290915281208054849290610cdc908490613f0e565b90915550505b8015610d3d5733600090815260016020908152604080832060608b015173ffffffffffffffffffffffffffffffffffffffff168452825280832089830135845290915281208054839290610d37908490613f0e565b90915550505b505060408051825181526020808401519082015282820151818301526060808401519082015290517f3e673c18070310617c4b157f17e875bbc59a81b0f5107d346dfed8775de6f0f79181900360800190a1505050505050565b6000610dec7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610de785613fb0565b611731565b90506000610df98261113f565b6000818152602081905260409020549091506103a7576000818152602081905260409081902060019055517fd0a47b54268dda2cd6b19382b7bb0140468dffa248430275421ff569d8462cb890610e539033908590614100565b60405180910390a1505050565b33600090815260016020908152604080832090840135929091610e8590850185613bbf565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836020013581526020019081526020016000206000828254610ee39190613f0e565b90915550506040517fadc7bd964a04a8a02261d33d2d09c6a7d9f539bc5eab77008e85fc6661ef123190610f1a903390849061412f565b60405180910390a1610f5733306040840135610f396020860186613bbf565b73ffffffffffffffffffffffffffffffffffffffff169291906119bf565b50565b604080516105e08101825260006020820181905291810182905260608181018390526080820183905260a0820183905260c0820192909252611e6860e08201819052611f5c610100830152611fe86101208301526121096101408301526101608201526121b26101808201526122ba6101a082015261238e6101c082015261258b6101e08201526125966102008201526125a16102208201526125ac6102408201526125b76102608201526125eb6102808201526126516102a08201526126b76102c08201526126eb6102e082015261271f6103008201526127546103208201526127af61034082015261280561036082015261282e6103808201526128856103a08201526128b26103c08201526129096103e08201526129746104008201526129d1610420820152612a0f610440820152612a48610460820152612a7c610480820152612aae6104a0820152612ae06104c0820152612b126104e0820152612b46610500820152612b98610520820152612bd1610540820152612c83610560820152612db0610580820152612e0c6105a0820152612ec66105c080830191909152815260408051606081018252612f426020820152612f7d8183015290815260405160200161112b929190614159565b604051602081830303815290604052905090565b6000816040516020016111529190614188565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012092915050565b600081831061119d578161119f565b825b90505b92915050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526103a79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611a23565b6112ae6040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b6112e06040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b60208301805160ff8082168352606084019290925290600882901c1667ffffffffffffffff81111561131457611314613809565b60405190808252806020026020018201604052801561133d578160200160208202803683370190505b50602083015260ff601082901c81166080840152601882901c16606060008267ffffffffffffffff81111561137457611374613809565b60405190808252806020026020018201604052801561139d578160200160208202803683370190505b5090506020870151602002604001870160005b848110156113d75781602082026020018401528151602001820191506001810190506113b0565b505060408501525091949350505050565b60606113f261377c565b8251815260208084015173ffffffffffffffffffffffffffffffffffffffff16818301526040516114259183910161419b565b604051602081830303815290604052915050919050565b60208281015183516040850151848402018301518051606087015160a088015160009687968796879695948301938284019391820290920101906002015b848910156116f8576003890198508886015180601f1a975061ffff8160081c16985050600688101561167057876114bf57866020028401518252602082019150611683565b60018814156114dc57602087028301518252602082019150611683565b6002881415611569578c518760200210611552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f434f4e544558545f4c454e47544800000000000000000000000000000000000060448201526064016101d2565b866020026020018d01518252602082019150611683565b60038814156115b157600061159f6040805180820182526000808252602091820181905282518084019093528083529082015290565b51880154835250602090910190611683565b60048814156115cd576115c68d8d848a611b2f565b9150611683565b6060876115fb578c6040516020016115e5919061425c565b604051602081830303815290604052905061165a565b60018814156116145761160d8d611c9c565b905061165a565b6002881415611630576020808e01516040516115e592016142f3565b600388141561165a578c516040805160208101929092520160405160208183030381529060405290505b80511561166a5761166a81611dd9565b50611683565b8761167f888463ffffffff8416565b9250505b60208c0151518c5111156116f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f535441434b5f4f564552464c4f5700000000000000000000000000000000000060448201526064016101d2565b61147a565b6020838303048c52509750505050505050505b9392505050565b6000670de0b6b3a76400006117278385614358565b61119f9190614395565b6117b36040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b6117f36040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008082526002602083015260408051600180825281830190925290816020015b6118546040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081611814579050509050818160008151811061187d5761187d613edf565b60200260200101819052506040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001856000015173ffffffffffffffffffffffffffffffffffffffff16815260200185602001518152602001856040015173ffffffffffffffffffffffffffffffffffffffff16815260200185606001518152602001856080015181526020018773ffffffffffffffffffffffffffffffffffffffff166317376ae0888860a00151866040518463ffffffff1660e01b815260040161194e939291906143d0565b6000604051808303816000875af115801561196d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526119b391908101906144c3565b90529695505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611a1d9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016111fa565b50505050565b6000611a85826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130019092919063ffffffff16565b8051909150156103a75780806020019051810190611aa3919061453a565b6103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101d2565b600060078216600383811c16828082611b6e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050610100611bb9565b8260011415611b9257506fffffffffffffffffffffffffffffffff90506080611bb9565b8260021415611bae575067ffffffffffffffff90506040611bb9565b5063ffffffff905060205b6001600587901c0160008167ffffffffffffffff811115611bdc57611bdc613809565b604051908082528060200260200182016040528015611c05578160200160208202803683370190505b50905060208082019083028a03815b8b821015611c2c578151815260209182019101611c14565b505060608b015160808c015160209081029091010160005b610100811015611c8a5760208502830182845b82811015611c73578051841c8a16825260209182019101611c57565b505050611c818e8e8b61143c565b9b508501611c44565b50999c9b505050505050505050505050565b606060008260600151905060006018846040015151901b60108560800151901b6008866020015151901b866060015151171717905060008160001b83604051602001611ce891906142f3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052611d24929160200161455c565b604051602081830303815290604052905060005b856040015151811015611dd0578186604001518281518110611d5c57611d5c613edf565b60200260200101515160001b87604001518381518110611d7e57611d7e613edf565b6020026020010151604051602001611d9893929190614582565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529150600101611d38565b50949350505050565b610f5781604051602401611ded9190613bac565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0be77f5600000000000000000000000000000000000000000000000000000000179052613018565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920180516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808316600483015292946000949390929185918416906370a08231906024015b602060405180830381865afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f91906145b9565b9093525092949350505050565b60008060006020840391508151905060008173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdc91906145b9565b90925250919392505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0830180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909401516040517f4ee2cd7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808716600483015260248201839052929560009594939092918691851690634ee2cd7e906044015b602060405180830381865afa1580156120d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fb91906145b9565b909452509395945050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920180516040517f981b24d000000000000000000000000000000000000000000000000000000000815260048101829052919360009392909190849073ffffffffffffffffffffffffffffffffffffffff84169063981b24d090602401611f0e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920180516040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052919360009392909190849073ffffffffffffffffffffffffffffffffffffffff841690636352211e90602401602060405180830381865afa158015612273573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229791906145d2565b73ffffffffffffffffffffffffffffffffffffffff169093525092949350505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0830180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909401516040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301526024820183905292956000959493909291869185169062fdd58e906044016120ba565b60008060008467ffffffffffffffff8111156123ac576123ac613809565b6040519080825280602002602001820160405280156123d5578160200160208202803683370190505b50905060008567ffffffffffffffff8111156123f3576123f3613809565b60405190808252806020026020018201604052801561241c578160200160208202803683370190505b506040870286037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018051909550919250602080890282019085015b81831015612471578251815260209283019201612459565b5050602088028101602084015b8183101561249657825181526020928301920161247e565b50506040517f4e1273f40000000000000000000000000000000000000000000000000000000081526000915073ffffffffffffffffffffffffffffffffffffffff831690634e1273f4906124f090879087906004016145ef565b600060405180830381865afa15801561250d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526125539190810190614652565b9050846020820160208a0281015b8082101561257c578151835260209283019290910190612561565b50909998505050505050505050565b438152602001919050565b338152602001919050565b308152602001919050565b428152602001919050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180516000919082611fdc8287613039565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201805190926000929183611f4f8261264b858a613039565b906130ba565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201805190926000929183611f4f826126b1858a613039565b90611712565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180516000919082611fdc82876130cf565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180516000919082611fdc828761311a565b6000602083028203805b838110156127495780518015612740578252612749565b50602001612729565b506020019392505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0810180511560200282017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc090810151909152018092915050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc09092018051909214909152919050565b6000602083028203805b838110156127495780516128265760008252612749565b60200161280f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0909201805192909211909152919050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018051159052919050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0909201805192909210909152919050565b6020828102820380516000928201835b858210801561294757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83105b156129665750805160209091019061295f8382613178565b9250612919565b505081526020019392505050565b6020828102820380516000928201835b85821080156129b257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83105b15612966575080516020909101906129ca83826131b3565b9250612984565b6020828102820380516000928201835b85821080156129f05750826000105b1561296657508051602090910190612a0883826131e2565b92506129e1565b600060208302820380516000602083015b858110156129665780518301915082821015612a3b57600080fd5b9091508190602001612a20565b600060208302820380516000602083015b85811015612966578051915081612a6f57600080fd5b9181900491602001612a59565b6020828102820380516000928201835b8582101561296657508051602090910190612aa781846147f8565b9250612a8c565b6020828102820380516000928201835b858210156129665750805182811115612ad5578092505b602082019150612abe565b6020828102820380516000928201835b858210156129665750805182811015612b07578092505b602082019150612af0565b600060208302820380516000602083015b85811015612966578051915081612b3957600080fd5b9181900691602001612b23565b60006020830282038051600080602084015b86811015612b89578315612b81578051925082840291508284830414612b7d57600080fd5b8193505b602001612b58565b50505081526020019392505050565b600060208302820380516000602083015b858110156129665780518303915082821115612bc457600080fd5b9091508190602001612ba9565b8190037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920180518482526040517f88d686040000000000000000000000000000000000000000000000000000000081529193600093929091908590859073ffffffffffffffffffffffffffffffffffffffff8516906388d68604906120ba9086908690600401614804565b8190037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08301517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090930180518582526040517fcaa0eb3b000000000000000000000000000000000000000000000000000000008152919460009493929091908690869073ffffffffffffffffffffffffffffffffffffffff86169063caa0eb3b90612d5c90879087908790600401614833565b602060405180830381865afa158015612d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9d91906145b9565b8652505060209093019695505050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201805190926000929183611f4f83836131f8565b6000600783901c6003600585901c16601f851683808267ffffffffffffffff811115612e3a57612e3a613809565b604051908082528060200260200182016040528015612e63578160200160208202803683370190505b509050600060206001850102880392506020840283018360005b82821015612e9f57815181602001860152602082019150602081019050612e7d565b50505190506000612eb283838989613257565b845250506020909101979650505050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092018051909260009291600f80871691600488901c9091169085612f33858585856133a7565b90955250949695505050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180516000908152600260205260409020549052919050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092018051600093845260036020908152604080862073ffffffffffffffffffffffffffffffffffffffff9093168652919052909220549052919050565b6060613010848460008561344d565b949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080826012141561304e57839150506111a2565b826012111561307a5750601282900361306881600a6147f8565b6130729085614358565b9150506111a2565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee82016130a981600a6147f8565b6130729085614395565b5092915050565b600081611727670de0b6b3a764000085614358565b600081810b6130df5750816111a2565b60008260000b1315613107576130f682600a614868565b6131009084614358565b90506111a2565b60ff6000839003166130a981600a6147f8565b600080601283141561312f57839150506111a2565b8260121115613149575060128290036130a981600a6147f8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee820161306881600a6147f8565b600082820183811061318a5780613010565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff949350505050565b6000826131c2575060006111a2565b828202828482816131d5576131d5614329565b04141561318a5780613010565b60008183116131f257600061119f565b50900390565b60008060015b6008811161324f57600061321286836135e3565b9050600061322086846135e3565b9050600061322e83836131e2565b905061323e856001860383613690565b945050600190920191506131fe9050565b509392505050565b835160009081908190819060015b600881116133995760009250828761329e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6132a2565b5060005b60005b83811015613357576132d08c82815181106132c2576132c2613edf565b6020026020010151846135e3565b95508a861161332257886132ef576132e8868361118e565b9150613319565b6001891415613302576132e88683613719565b600289148015613310575084155b15613319578591505b6001945061334f565b8961334f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150613357565b6001016132a5565b508361338057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b61338e866001840383613690565b955050600101613265565b509298975050505050505050565b6000826008811115613415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016101d2565b6000855b858110156134415763ffffffff6020820290811b199890981685891b17979150600101613419565b50959695505050505050565b6060824710156134df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101d2565b73ffffffffffffffffffffffffffffffffffffffff85163b61355d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101d2565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516135869190614877565b60006040518083038185875af1925050503d80600081146135c3576040519150601f19603f3d011682016040523d82523d6000602084013e6135c8565b606091505b50915091506135d8828286613729565b979650505050505050565b6000816008811115613651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016101d2565b8261365f57600091506130b3565b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016020021c63ffffffff1690565b60008260088111156136fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f5449455200000000000000000000000000000000000000000000000060448201526064016101d2565b505063ffffffff602090920291821b199290921691901b1790565b60008183101561119d578161119f565b6060831561373857508161170b565b8251156137485782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d29190613bac565b60405180604001604052806002906020820280368337509192915050565b6000602082840312156137ac57600080fd5b813567ffffffffffffffff8111156137c357600080fd5b820160e0818503121561170b57600080fd5b6000606082840312156137e757600080fd5b50919050565b6000606082840312156137ff57600080fd5b61119f83836137d5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561385b5761385b613809565b60405290565b60405160c0810167ffffffffffffffff8111828210171561385b5761385b613809565b6040805190810167ffffffffffffffff8111828210171561385b5761385b613809565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156138ee576138ee613809565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f5757600080fd5b8035613923816138f6565b919050565b600067ffffffffffffffff82111561394257613942613809565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261397f57600080fd5b813561399261398d82613928565b6138a7565b8181528460208386010111156139a757600080fd5b816020850160208301376000918101602001919091529392505050565b600060e082840312156139d657600080fd5b6139de613838565b90506139e982613918565b81526139f760208301613918565b602082015260408201356040820152613a1260608301613918565b60608201526080820135608082015260a082013560a082015260c082013567ffffffffffffffff811115613a4557600080fd5b613a518482850161396e565b60c08301525092915050565b60008060008385036080811215613a7357600080fd5b843567ffffffffffffffff80821115613a8b57600080fd5b613a97888389016139c4565b95506020870135915080821115613aad57600080fd5b50613aba878288016139c4565b93505060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082011215613aed57600080fd5b506040840190509250925092565b600060208284031215613b0d57600080fd5b813567ffffffffffffffff811115613b2457600080fd5b820160c0818503121561170b57600080fd5b60005b83811015613b51578181015183820152602001613b39565b83811115611a1d5750506000910152565b60008151808452613b7a816020860160208601613b36565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061119f6020830184613b62565b600060208284031215613bd157600080fd5b813561170b816138f6565b60006111a236836139c4565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613c1d57600080fd5b830160208101925035905067ffffffffffffffff811115613c3d57600080fd5b803603831315613c4c57600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff8085168352604060208401528335613cca816138f6565b811660408401526020840135613cdf816138f6565b8181166060850152505060408301356080830152613cff60608401613918565b73ffffffffffffffffffffffffffffffffffffffff811660a084015250608083013560c083015260a083013560e0830152613d3d60c0840184613be8565b60e0610100850152613d5461012085018284613c53565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015613d9f57613d9f613d5e565b500390565b8035613daf816138f6565b73ffffffffffffffffffffffffffffffffffffffff16825260208181013590830152604090810135910152565b73ffffffffffffffffffffffffffffffffffffffff8416815260a08101613e066020830185613da4565b826080830152949350505050565b600073ffffffffffffffffffffffffffffffffffffffff80835116845280602084015116602085015260408301516040850152806060840151166060850152506080820151608084015260a082015160a084015260c082015160e060c085015261301060e0850182613b62565b73ffffffffffffffffffffffffffffffffffffffff8516815260a060208201526000613eb060a0830186613e14565b8281036040840152613ec28186613e14565b915050823560608301526020830135608083015295945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008219821115613f2157613f21613d5e565b500190565b600067ffffffffffffffff821115613f4057613f40613809565b5060051b60200190565b600082601f830112613f5b57600080fd5b81356020613f6b61398d83613f26565b82815260059290921b84018101918181019086841115613f8a57600080fd5b8286015b84811015613fa55780358352918301918301613f8e565b509695505050505050565b600060c08236031215613fc257600080fd5b613fca613861565b8235613fd5816138f6565b8152602083810135818301526040840135613fef816138f6565b80604084015250606084013560608301526080840135608083015260a084013567ffffffffffffffff8082111561402557600080fd5b81860191506040823603121561403a57600080fd5b614042613884565b82358281111561405157600080fd5b830136601f82011261406257600080fd5b803561407061398d82613f26565b81815260059190911b8201860190868101903683111561408f57600080fd5b8784015b838110156140c7578035878111156140ab5760008081fd5b6140b9368b8389010161396e565b845250918801918801614093565b50845250505082840135828111156140de57600080fd5b6140ea36828601613f4a565b9482019490945260a08501525091949350505050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006130106040830184613e14565b73ffffffffffffffffffffffffffffffffffffffff831681526080810161170b6020830184613da4565b6000835161416b818460208801613b36565b83519083019061417f818360208801613b36565b01949350505050565b60208152600061119f6020830184613e14565b60008183825b60028110156141c05781518352602092830192909101906001016141a1565b50505060408201905092915050565b600081518084526020808501945080840160005b838110156141ff578151875295820195908201906001016141e3565b509495945050505050565b6000815180845260208085019450848260051b860182860160005b8581101561424f57838303895261423d838351613b62565b98850198925090840190600101614225565b5090979650505050505050565b60208152815160208201526000602083015160a0604084015261428260c08401826141cf565b905060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808584030160608601526142be838361420a565b92506060860151915080858403016080860152506142dc82826141cf565b915050608084015160a08401528091505092915050565b815160009082906020808601845b8381101561431d57815185529382019390820190600101614301565b50929695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561439057614390613d5e565b500290565b6000826143cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000606073ffffffffffffffffffffffffffffffffffffffff861683526020818185015260a086516040808588015261440b8388018361420a565b91508389015160807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa089850301818a015261444684836141cf565b898103848b01528a51808252878c019550908701925060005b818110156144b15785518051855288810151898601528581015186860152898101518a8601528381015184860152878101518886015260c090810151908501529487019460e09093019260010161445f565b50919c9b505050505050505050505050565b6000602082840312156144d557600080fd5b815167ffffffffffffffff8111156144ec57600080fd5b8201601f810184136144fd57600080fd5b805161450b61398d82613928565b81815285602083850101111561452057600080fd5b614531826020830160208601613b36565b95945050505050565b60006020828403121561454c57600080fd5b8151801515811461170b57600080fd5b82815260008251614574816020850160208701613b36565b919091016020019392505050565b60008451614594818460208901613b36565b820184815283516145ac816020808501908801613b36565b0160200195945050505050565b6000602082840312156145cb57600080fd5b5051919050565b6000602082840312156145e457600080fd5b815161170b816138f6565b604080825283519082018190526000906020906060840190828701845b8281101561463e57815173ffffffffffffffffffffffffffffffffffffffff168452928401929084019060010161460c565b50505083810382850152613d5481866141cf565b6000602080838503121561466557600080fd5b825167ffffffffffffffff81111561467c57600080fd5b8301601f8101851361468d57600080fd5b805161469b61398d82613f26565b81815260059190911b820183019083810190878311156146ba57600080fd5b928401925b828410156135d8578351825292840192908401906146bf565b600181815b8085111561473157817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561471757614717613d5e565b8085161561472457918102915b93841c93908002906146dd565b509250929050565b600082614748575060016111a2565b81614755575060006111a2565b816001811461476b576002811461477557614791565b60019150506111a2565b60ff84111561478657614786613d5e565b50506001821b6111a2565b5060208310610133831016604e8410600b84101617156147b4575081810a6111a2565b6147be83836146d8565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156147f0576147f0613d5e565b029392505050565b600061119f8383614739565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061301060408301846141cf565b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061453160608301846141cf565b600061119f60ff841683614739565b60008251614889818460208701613b36565b919091019291505056fea26469706673582212208dbafb7bcd48b014402a0a55130cd0c770b52b90593b84266a98db1f404653c064736f6c634300080a0033",
  "devdoc": {
    "events": {
      "Withdraw(address,(address,uint256,uint256),uint256)": {
        "params": {
          "amount": "The amount of tokens withdrawn, can be less than the config amount if the vault does not have the funds available to cover the config amount.",
          "config": "All config sent to the `withdraw` call.",
          "sender": "`msg.sender` withdrawing tokens."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "withdraw((address,uint256,uint256))": {
        "params": {
          "config_": "All config required to withdraw. Notably if the amount is less than the current vault balance then the vault will be cleared to 0 rather than the withdraw transaction reverting."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "storageOpcodesRange()": {
        "notice": "Default is to disallow all storage access to opcodes."
      },
      "withdraw((address,uint256,uint256))": {
        "notice": "Allows the sender to withdraw any tokens from their own vaults."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9229,
        "contract": "contracts/orderbook/OrderBook.sol:OrderBook",
        "label": "orders",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_userDefinedValueType(OrderHash)10217,t_userDefinedValueType(OrderLiveness)10219)"
      },
      {
        "astId": 9238,
        "contract": "contracts/orderbook/OrderBook.sol:OrderBook",
        "label": "vaults",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_userDefinedValueType(VaultId)10410,t_uint256)))"
      },
      {
        "astId": 9243,
        "contract": "contracts/orderbook/OrderBook.sol:OrderBook",
        "label": "clearedOrder",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_userDefinedValueType(OrderHash)10217,t_uint256)"
      },
      {
        "astId": 9250,
        "contract": "contracts/orderbook/OrderBook.sol:OrderBook",
        "label": "clearedCounterparty",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_userDefinedValueType(OrderHash)10217,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_userDefinedValueType(VaultId)10410,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(VaultId => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_userDefinedValueType(VaultId)10410,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_userDefinedValueType(VaultId)10410,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(VaultId => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_userDefinedValueType(VaultId)10410,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_userDefinedValueType(OrderHash)10217,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(OrderHash)10217",
        "label": "mapping(OrderHash => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_userDefinedValueType(OrderHash)10217,t_uint256)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(OrderHash)10217",
        "label": "mapping(OrderHash => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_userDefinedValueType(OrderHash)10217,t_userDefinedValueType(OrderLiveness)10219)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(OrderHash)10217",
        "label": "mapping(OrderHash => OrderLiveness)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(OrderLiveness)10219"
      },
      "t_mapping(t_userDefinedValueType(VaultId)10410,t_uint256)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(VaultId)10410",
        "label": "mapping(VaultId => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(OrderHash)10217": {
        "encoding": "inplace",
        "label": "OrderHash",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(OrderLiveness)10219": {
        "encoding": "inplace",
        "label": "OrderLiveness",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(VaultId)10410": {
        "encoding": "inplace",
        "label": "VaultId",
        "numberOfBytes": "32"
      }
    }
  }
}