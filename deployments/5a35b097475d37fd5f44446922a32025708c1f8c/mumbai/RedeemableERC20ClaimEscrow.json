{
  "address": "0xc26f68FB5E8fcd28661A26f92587c525e54407d0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sale",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemable",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sale",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemable",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PendingDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sale",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemable",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Sweep",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sale",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemable",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Undeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sale",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemable",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sale_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sale_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "depositPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sale_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositor_",
          "type": "address"
        }
      ],
      "name": "sweepPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sale_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "supply_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "undeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sale_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "supply_",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef4abd525a613ef3e6866c87b3f94c80f0ee8fdb3e868b4dadbdc66b797c933b",
  "receipt": {
    "to": null,
    "from": "0xbF334f8BD1420a1CbFE15407f73919424934B1B3",
    "contractAddress": "0xc26f68FB5E8fcd28661A26f92587c525e54407d0",
    "transactionIndex": 17,
    "gasUsed": "1320931",
    "logsBloom": "0x
    "blockHash": "0x4d12863b68d615e6b8b1f80a250f14076795a1ef246a577c29c58746eebbc5e5",
    "transactionHash": "0xef4abd525a613ef3e6866c87b3f94c80f0ee8fdb3e868b4dadbdc66b797c933b",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 26823110,
        "transactionHash": "0xef4abd525a613ef3e6866c87b3f94c80f0ee8fdb3e868b4dadbdc66b797c933b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bf334f8bd1420a1cbfe15407f73919424934b1b3",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002eedcc2591c505000000000000000000000000000000000000000000000000c3d442b7e215c903000000000000000000000000000000000000000000001b449ccb3303e52b0c6a000000000000000000000000000000000000000000000000c3a554ebbc8403fe000000000000000000000000000000000000000000001b449cfa20d00abcd16f",
        "logIndex": 146,
        "blockHash": "0x4d12863b68d615e6b8b1f80a250f14076795a1ef246a577c29c58746eebbc5e5"
      }
    ],
    "blockNumber": 26823110,
    "cumulativeGasUsed": "4123357",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "546b903093f71bcf827666e8259a807f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sale\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sale\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sale\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sale\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Undeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sale\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sale_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sale_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sale_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"sweepPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sale_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"undeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sale_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deposit(address,address,address,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of token deposited.\",\"depositor\":\"Anon `msg.sender` who originally deposited the token. MAY NOT be the current `msg.sender` in the case of a pending sweep.\",\"redeemable\":\"Redeemable token that can claim this deposit.\",\"sale\":\"`ISale` contract deposit is under.\",\"sender\":\"Anon `msg.sender` triggering the deposit. MAY NOT be the `depositor` in the case of a pending sweep.\",\"supply\":\"rTKN supply at moment of deposit.\",\"token\":\"`IERC20` token being deposited.\"}},\"PendingDeposit(address,address,address,address,uint256)\":{\"params\":{\"amount\":\"Amount of token deposited.\",\"redeemable\":\"Redeemable token that can claim this deposit. Implicitly snapshots the redeemable so malicious `Trust` cannot redirect funds later.\",\"sale\":\"`ISale` contract deposit is under.\",\"sender\":\"Anon `msg.sender` depositing the token.\",\"token\":\"`IERC20` token being deposited.\"}},\"Sweep(address,address,address,address,address,uint256)\":{\"params\":{\"amount\":\"Amount of token being swept into a deposit.\",\"depositor\":\"Anon `msg.sender` who originally deposited the token.\",\"redeemable\":\"Redeemable token first reported by the trust.\",\"sale\":\"`ISale` contract deposit is under.\",\"sender\":\"Anon `msg.sender` sweeping the deposit.\",\"token\":\"`IERC20` token being swept into a deposit.\"}},\"Undeposit(address,address,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of token undeposited.\",\"redeemable\":\"Redeemable token that is being undeposited against.\",\"sale\":\"`ISale` contract undeposit is from.\",\"sender\":\"Anon `msg.sender` undepositing the token.\",\"supply\":\"rTKN supply at moment of deposit.\",\"token\":\"`IERC20` token being undeposited.\"}},\"Withdraw(address,address,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of token withdrawn.\",\"redeemable\":\"Redeemable token used to withdraw.\",\"sale\":\"`ISale` contract withdrawal is from.\",\"supply\":\"rTKN supply at moment of deposit.\",\"token\":\"`IERC20` token being withdrawn.\",\"withdrawer\":\"Anon `msg.sender` withdrawing the token.\"}}},\"kind\":\"dev\",\"methods\":{\"deposit(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount of token to deposit. Requires depositor has approved at least this amount to succeed.\",\"sale_\":\"The `Sale` to assign this deposit to.\",\"token_\":\"The `IERC20` token to deposit to the escrow.\"}},\"depositPending(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount of token to despoit. Requires depositor has approved at least this amount to succeed.\",\"sale_\":\"The `Sale` to assign this deposit to.\",\"token_\":\"The `IERC20` token to deposit to the escrow.\"}},\"sweepPending(address,address,address)\":{\"params\":{\"depositor_\":\"The depositor to sweep registered deposits under.\",\"sale_\":\"The sale to sweep all pending deposits for.\",\"token_\":\"The token to sweep into registered deposits.\"}},\"undeposit(address,address,uint256,uint256)\":{\"params\":{\"amount_\":\"The amount to undeposit.\",\"sale_\":\"The `Sale` to undeposit from.\",\"supply_\":\"The total supply of the sale token associated with the deposit being undeposited.\",\"token_\":\"The token to undeposit.\"}},\"withdraw(address,address,uint256)\":{\"params\":{\"sale_\":\"The trust to `withdraw` against.\",\"supply_\":\"The total supply of the sale token at time of deposit to process this withdrawal against.\",\"token_\":\"The token to `withdraw`.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,address,address,address,address,uint256,uint256)\":{\"notice\":\"Emitted for every successful deposit.\"},\"PendingDeposit(address,address,address,address,uint256)\":{\"notice\":\"Emitted for every successful pending deposit.\"},\"Sweep(address,address,address,address,address,uint256)\":{\"notice\":\"Emitted every time a pending deposit is swept to a full deposit.\"},\"Undeposit(address,address,address,address,uint256,uint256)\":{\"notice\":\"Emitted for every successful undeposit.\"},\"Withdraw(address,address,address,address,uint256,uint256)\":{\"notice\":\"Emitted for every successful withdrawal.\"}},\"kind\":\"user\",\"methods\":{\"deposit(address,address,uint256)\":{\"notice\":\"Any address can deposit any amount of its own `IERC20` under a `Sale`. The `Sale` MUST be a child of the trusted factory. The deposit will be accounted for under both the depositor individually and the trust in aggregate. The aggregate value is used by `withdraw` and the individual value by `undeposit`. The depositor is responsible for approving the token for this contract. `deposit` is still enabled after the distribution ends; `undeposit` is always allowed in case of a fail and disabled on success. Multiple `deposit` calls before and after a success result are supported. If a depositor deposits when a raise has failed they will need to undeposit it again manually. Delegated `deposit` is not supported. Every depositor is directly responsible for every `deposit`. WARNING: As `undeposit` can only be called when the `Sale` reports failure, `deposit` should only be called when the caller is sure the `Sale` will reach a clear success/fail status. For example, when a `Sale` has not yet been seeded it may never even start the raise so depositing at this point is dangerous. If the `Sale` never starts the raise it will never fail the raise either.\"},\"depositPending(address,address,uint256)\":{\"notice\":\"Depositor can set aside tokens during pending raise status to be swept into a real deposit later. The problem with doing a normal deposit while the raise is still active is that the `Sale` will burn all unsold tokens when the raise ends. If we captured the token supply mid-raise then many deposited TKN would be allocated to unsold rTKN. Instead we set aside TKN so that raise participants can be sure that they will be claimable upon raise success but they remain unbound to any rTKN supply until `sweepPending` is called. `depositPending` is a one-way function, there is no way to `undeposit` until after the raise fails. Strongly recommended that depositors do NOT call `depositPending` until raise starts, so they know it will also end.\"},\"sweepPending(address,address,address)\":{\"notice\":\"Anon can convert any existing pending deposit to a deposit with known rTKN supply once the escrow has moved out of pending status. As `sweepPending` is anon callable, raise participants know that the depositor cannot later prevent a sweep, and depositor knows that raise participants cannot prevent a sweep. As per normal deposits, the output of swept tokens depends on success/fail state allowing `undeposit` or `withdraw` to be called subsequently. Partial sweeps are NOT supported, to avoid griefers splitting a deposit across many different `supply_` values.\"},\"undeposit(address,address,uint256,uint256)\":{\"notice\":\"The inverse of `deposit`. In the case of a failed distribution the depositors can claim back any tokens they deposited in the escrow. Ideally the distribution is a success and this does not need to be called but it is important that we can walk back deposits and try again for some future raise if needed. Delegated `undeposit` is not supported, only the depositor can wind back their original deposit. `amount_` must be non-zero. If several tokens have been deposited against a given trust for the depositor then each token must be individually undeposited. There is no onchain tracking or bulk processing for the depositor, they are expected to know what they have previously deposited and if/when to process an `undeposit`.\"},\"withdraw(address,address,uint256)\":{\"notice\":\"The successful handover of a `deposit` to a recipient. When a redeemable token distribution is successful the redeemable token holders are automatically and immediately eligible to `withdraw` any and all tokens previously deposited against the relevant `Sale`. The `withdraw` can only happen if/when the relevant `Sale` reaches the success distribution status. Delegated `withdraw` is NOT supported. Every redeemable token holder is directly responsible for being aware of and calling `withdraw`. If a redeemable token holder calls `redeem` they also burn their claim on any tokens held in escrow so they MUST first call `withdraw` THEN `redeem`. It is expected that the redeemable token holder knows about the tokens that they will be withdrawing. This information is NOT tracked onchain or exposed for bulk processing. Partial `withdraw` is not supported, all tokens allocated to the caller are withdrawn`. 0 amount withdrawal is an error, if the prorata share of the token being claimed is small enough to round down to 0 then the withdraw will revert. Multiple withdrawals across multiple deposits is supported and is equivalent to a single withdraw after all relevant deposits.\"}},\"notice\":\"Escrow contract for ERC20 tokens to be deposited and withdrawn against redeemableERC20 tokens from a specific `Sale`. When some token is deposited the running total of that token against the trust is incremented by the deposited amount. When some `redeemableERC20` token holder calls `withdraw` they are sent the full balance they have not previously claimed, multiplied by their fraction of the redeemable token supply that they currently hold. As redeemable tokens are frozen after distribution there are no issues with holders manipulating withdrawals by transferring tokens to claim multiple times. As redeemable tokens can be burned it is possible for the total supply to decrease over time, which naively would result in claims being larger retroactively (prorata increases beyond what can be paid). For example: - Alice and Bob hold 50 rTKN each, 100 total supply - 100 TKN is deposited - Alice withdraws 50% of 100 TKN => alice holds 50 TKN escrow holds 50 TKN - Alice burns her 50 rTKN - Bob attempts to withdraw his 50 rTKN which is now 100% of supply - Escrow tries to pay 100% of 100 TKN deposited and fails as the escrow   only holds 50 TKN (alice + bob = 150%). To avoid the escrow allowing more withdrawals than deposits we include the total rTKN supply in the key of each deposit mapping, and include it in the emmitted event. Alice and Bob must read the events offchain and make a withdrawal relative to the rTKN supply as it was at deposit time. Many deposits can be made under a single rTKN supply and will all combine to a single withdrawal but deposits made across different supplies will require multiple withdrawals. Alice or Bob could burn their tokens before withdrawing and would simply withdraw zero or only some of the deposited TKN. This hurts them individually, so they SHOULD check their indexer for claimable assets in the escrow before considering a burn. But neither of them can cause the other to be able to withdraw more or less relative to the supply as it was at the time of TKN being deposited, or to trick the escrow into overpaying more TKN than was deposited under a given `Sale`. A griefer could attempt to flood the escrow with many dust deposits under many different supplies in an attempt to confuse alice/bob. They are free to filter out events in their indexer that come from an unknown depositor or fall below some dust value threshold. Tokens may also exit the escrow as an `undeposit` call where the depositor receives back the tokens they deposited. As above the depositor must provide the rTKN supply from `deposit` time in order to `undeposit`. As `withdraw` and `undeposit` both represent claims on the same tokens they are mutually exclusive outcomes, hence the need for an escrow. The escrow will process `withdraw` only if the `Sale` is reporting a complete and successful raise. Similarly `undeposit` will only return tokens after the `Sale` completes and reports failure. While the `Sale` is in active distribution neither `withdraw` or `undeposit` will move tokens. This is necessary in part because it is only safe to calculate entitlements once the redeemable tokens are fully distributed and frozen. Because much of the redeemable token supply will never be sold, and then burned, `depositPending` MUST be called rather than `deposit` while the raise is active. When the raise completes anon can call `sweepPending` which will calculate and emit a `Deposit` event for a useful `supply`. Any supported ERC20 token can be deposited at any time BUT ONLY under a `Sale` contract that is the child of the `TrustFactory` that the escrow is deployed for. `TrustEscrow` is used to prevent a `Sale` from changing the pass/fail outcome once it is known due to a bug/attempt to double spend escrow funds. This mechanism is very similar to the native burn mechanism on `redeemableERC20` itself under `redeem` but without requiring any tokens to be burned in the process. Users can claim the same token many times safely, simply receiving 0 tokens if there is nothing left to claim. This does NOT support rebase/elastic token _balance_ mechanisms on the escrowed token as the escrow has no way to track deposits/withdrawals other than 1:1 conservation of input/output. For example, if 100 tokens are deposited under two different trusts and then that token rebases all balances to half, there will be 50 tokens in the escrow but the escrow will attempt transfers up to 100 tokens between the two trusts. Essentially the first 50 tokens will send and the next 50 tokens will fail because the trust literally doesn't have 100 tokens at that point. Elastic _supply_ tokens are supported as every token to be withdrawn must be first deposited, with the caveat that if some mechanism can mint/burn/transfer tokens out from under the escrow contract directly, this will break internal accounting much like the rebase situation. Using a real-world example, stETH from LIDO would be NOT be supported as the balance changes every day to reflect incoming ETH from validators, but wstETH IS supported as balances remain static while the underlying assets per unit of wstETH increase each day. This is of course exactly why wstETH was created in the first place. Every escrowed token has a separate space in the deposited/withdrawn mappings so that some broken/malicious/hacked token that leads to incorrect token movement in/out of the escrow cannot impact other tokens, even for the same trust and redeemable.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/escrow/RedeemableERC20ClaimEscrow.sol\":\"RedeemableERC20ClaimEscrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/erc20/ERC20Config.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// Constructor config for standard Open Zeppelin ERC20.\\n/// @param name Name as defined by Open Zeppelin ERC20.\\n/// @param symbol Symbol as defined by Open Zeppelin ERC20.\\n/// @param distributor Distributor address of the initial supply.\\n/// MAY be zero.\\n/// @param initialSupply Initial supply to mint.\\n/// MAY be zero.\\nstruct ERC20Config {\\n    string name;\\n    string symbol;\\n    address distributor;\\n    uint256 initialSupply;\\n}\\n\",\"keccak256\":\"0xd71c17e9354e155991a6d315fc38050377f65f4a7770b146ba0070819e99c3f0\",\"license\":\"CAL\"},\"contracts/erc20/ERC20Redeem.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\n\\ncontract ERC20Redeem is ERC20BurnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /// Anon has burned their tokens in exchange for some treasury assets.\\n    /// Emitted once per redeemed asset.\\n    /// @param sender `msg.sender` is burning.\\n    /// @param treasuryAsset Treasury asset being sent to redeemer.\\n    /// @param redeemAmount Amount of token being burned.\\n    /// @param assetAmount Amount of treasury asset being sent.\\n    event Redeem(\\n        address sender,\\n        address treasuryAsset,\\n        uint256 redeemAmount,\\n        uint256 assetAmount\\n    );\\n\\n    /// Anon can notify the world that they are adding treasury assets to the\\n    /// contract. Indexers are strongly encouraged to ignore untrusted anons.\\n    /// @param sender `msg.sender` adding a treasury asset.\\n    /// @param asset The treasury asset being added.\\n    event TreasuryAsset(address sender, address asset);\\n\\n    /// Anon can emit a `TreasuryAsset` event to notify token holders that\\n    /// an asset could be redeemed by burning `RedeemableERC20` tokens.\\n    /// As this is callable by anon the events should be filtered by the\\n    /// indexer to those from trusted entities only.\\n    /// @param newTreasuryAsset_ The asset to log.\\n    function newTreasuryAsset(address newTreasuryAsset_) public {\\n        emit TreasuryAsset(msg.sender, newTreasuryAsset_);\\n    }\\n\\n    /// Burn tokens for a prorata share of the current treasury.\\n    ///\\n    /// The assets to be redeemed for must be specified as an array. This keeps\\n    /// the redeem functionality:\\n    /// - Gas efficient as we avoid tracking assets in storage\\n    /// - Decentralised as any user can deposit any asset to be redeemed\\n    /// - Error resistant as any individual asset reverting can be avoided by\\n    ///   redeeming againt sans the problematic asset.\\n    /// It is also a super sharp edge if someone burns their tokens prematurely\\n    /// or with an incorrect asset list. Implementing contracts are strongly\\n    /// encouraged to implement additional safety rails to prevent high value\\n    /// mistakes.\\n    /// Only \\\"vanilla\\\" erc20 token balances are supported as treasury assets.\\n    /// I.e. if the balance is changing such as due to a rebasing token or\\n    /// other mechanism then the WRONG token amounts will be redeemed. The\\n    /// redemption calculation is very simple and naive in that it takes the\\n    /// current balance of this contract of the assets being claimed via\\n    /// redemption to calculate the \\\"prorata\\\" entitlement. If the contract's\\n    /// balance of the claimed token is changing between redemptions (other\\n    /// than due to the redemption itself) then each redemption will send\\n    /// incorrect amounts.\\n    /// @param treasuryAssets_ The list of assets to redeem.\\n    /// @param redeemAmount_ The amount of redeemable token to burn.\\n    function _redeem(IERC20[] memory treasuryAssets_, uint256 redeemAmount_)\\n        internal\\n    {\\n        uint256 assetsLength_ = treasuryAssets_.length;\\n\\n        // Calculate everything before any balances change.\\n        uint256[] memory amounts_ = new uint256[](assetsLength_);\\n\\n        // The fraction of the assets we release is the fraction of the\\n        // outstanding total supply of the redeemable being burned.\\n        // Every treasury asset is released in the same proportion.\\n        // Guard against no asset redemptions and log all events before we\\n        // change any contract state or call external contracts.\\n        require(assetsLength_ > 0, \\\"EMPTY_ASSETS\\\");\\n        uint256 supply_ = IERC20(address(this)).totalSupply();\\n        uint256 amount_ = 0;\\n        for (uint256 i_ = 0; i_ < assetsLength_; i_++) {\\n            amount_ =\\n                (treasuryAssets_[i_].balanceOf(address(this)) * redeemAmount_) /\\n                supply_;\\n            require(amount_ > 0, \\\"ZERO_AMOUNT\\\");\\n            emit Redeem(\\n                msg.sender,\\n                address(treasuryAssets_[i_]),\\n                redeemAmount_,\\n                amount_\\n            );\\n            amounts_[i_] = amount_;\\n        }\\n\\n        // Burn FIRST (reentrancy safety).\\n        _burn(msg.sender, redeemAmount_);\\n\\n        // THEN send all assets.\\n        for (uint256 i_ = 0; i_ < assetsLength_; i_++) {\\n            treasuryAssets_[i_].safeTransfer(msg.sender, amounts_[i_]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x01e0e94c9dabf2a7784af0ec801b0b5f5696821b205bb06117fb31572fb4fc3e\",\"license\":\"CAL\"},\"contracts/escrow/RedeemableERC20ClaimEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {RedeemableERC20} from \\\"../redeemableERC20/RedeemableERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./SaleEscrow.sol\\\";\\n\\n/// Escrow contract for ERC20 tokens to be deposited and withdrawn against\\n/// redeemableERC20 tokens from a specific `Sale`.\\n///\\n/// When some token is deposited the running total of that token against the\\n/// trust is incremented by the deposited amount. When some `redeemableERC20`\\n/// token holder calls `withdraw` they are sent the full balance they have not\\n/// previously claimed, multiplied by their fraction of the redeemable token\\n/// supply that they currently hold. As redeemable tokens are frozen after\\n/// distribution there are no issues with holders manipulating withdrawals by\\n/// transferring tokens to claim multiple times.\\n///\\n/// As redeemable tokens can be burned it is possible for the total supply to\\n/// decrease over time, which naively would result in claims being larger\\n/// retroactively (prorata increases beyond what can be paid).\\n///\\n/// For example:\\n/// - Alice and Bob hold 50 rTKN each, 100 total supply\\n/// - 100 TKN is deposited\\n/// - Alice withdraws 50% of 100 TKN => alice holds 50 TKN escrow holds 50 TKN\\n/// - Alice burns her 50 rTKN\\n/// - Bob attempts to withdraw his 50 rTKN which is now 100% of supply\\n/// - Escrow tries to pay 100% of 100 TKN deposited and fails as the escrow\\n///   only holds 50 TKN (alice + bob = 150%).\\n///\\n/// To avoid the escrow allowing more withdrawals than deposits we include the\\n/// total rTKN supply in the key of each deposit mapping, and include it in the\\n/// emmitted event. Alice and Bob must read the events offchain and make a\\n/// withdrawal relative to the rTKN supply as it was at deposit time. Many\\n/// deposits can be made under a single rTKN supply and will all combine to a\\n/// single withdrawal but deposits made across different supplies will require\\n/// multiple withdrawals.\\n///\\n/// Alice or Bob could burn their tokens before withdrawing and would simply\\n/// withdraw zero or only some of the deposited TKN. This hurts them\\n/// individually, so they SHOULD check their indexer for claimable assets in\\n/// the escrow before considering a burn. But neither of them can cause the\\n/// other to be able to withdraw more or less relative to the supply as it was\\n/// at the time of TKN being deposited, or to trick the escrow into overpaying\\n/// more TKN than was deposited under a given `Sale`.\\n///\\n/// A griefer could attempt to flood the escrow with many dust deposits under\\n/// many different supplies in an attempt to confuse alice/bob. They are free\\n/// to filter out events in their indexer that come from an unknown depositor\\n/// or fall below some dust value threshold.\\n///\\n/// Tokens may also exit the escrow as an `undeposit` call where the depositor\\n/// receives back the tokens they deposited. As above the depositor must\\n/// provide the rTKN supply from `deposit` time in order to `undeposit`.\\n///\\n/// As `withdraw` and `undeposit` both represent claims on the same tokens they\\n/// are mutually exclusive outcomes, hence the need for an escrow. The escrow\\n/// will process `withdraw` only if the `Sale` is reporting a complete and\\n/// successful raise. Similarly `undeposit` will only return tokens after the\\n/// `Sale` completes and reports failure. While the `Sale` is in active\\n/// distribution neither `withdraw` or `undeposit` will move tokens. This is\\n/// necessary in part because it is only safe to calculate entitlements once\\n/// the redeemable tokens are fully distributed and frozen.\\n///\\n/// Because much of the redeemable token supply will never be sold, and then\\n/// burned, `depositPending` MUST be called rather than `deposit` while the\\n/// raise is active. When the raise completes anon can call `sweepPending`\\n/// which will calculate and emit a `Deposit` event for a useful `supply`.\\n///\\n/// Any supported ERC20 token can be deposited at any time BUT ONLY under a\\n/// `Sale` contract that is the child of the `TrustFactory` that the escrow\\n/// is deployed for. `TrustEscrow` is used to prevent a `Sale` from changing\\n/// the pass/fail outcome once it is known due to a bug/attempt to double\\n/// spend escrow funds.\\n///\\n/// This mechanism is very similar to the native burn mechanism on\\n/// `redeemableERC20` itself under `redeem` but without requiring any tokens to\\n/// be burned in the process. Users can claim the same token many times safely,\\n/// simply receiving 0 tokens if there is nothing left to claim.\\n///\\n/// This does NOT support rebase/elastic token _balance_ mechanisms on the\\n/// escrowed token as the escrow has no way to track deposits/withdrawals other\\n/// than 1:1 conservation of input/output. For example, if 100 tokens are\\n/// deposited under two different trusts and then that token rebases all\\n/// balances to half, there will be 50 tokens in the escrow but the escrow will\\n/// attempt transfers up to 100 tokens between the two trusts. Essentially the\\n/// first 50 tokens will send and the next 50 tokens will fail because the\\n/// trust literally doesn't have 100 tokens at that point.\\n///\\n/// Elastic _supply_ tokens are supported as every token to be withdrawn must\\n/// be first deposited, with the caveat that if some mechanism can\\n/// mint/burn/transfer tokens out from under the escrow contract directly, this\\n/// will break internal accounting much like the rebase situation.\\n///\\n/// Using a real-world example, stETH from LIDO would be NOT be supported as\\n/// the balance changes every day to reflect incoming ETH from validators, but\\n/// wstETH IS supported as balances remain static while the underlying assets\\n/// per unit of wstETH increase each day. This is of course exactly why wstETH\\n/// was created in the first place.\\n///\\n/// Every escrowed token has a separate space in the deposited/withdrawn\\n/// mappings so that some broken/malicious/hacked token that leads to incorrect\\n/// token movement in/out of the escrow cannot impact other tokens, even for\\n/// the same trust and redeemable.\\ncontract RedeemableERC20ClaimEscrow is SaleEscrow {\\n    using Math for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// Emitted for every successful pending deposit.\\n    /// @param sender Anon `msg.sender` depositing the token.\\n    /// @param sale `ISale` contract deposit is under.\\n    /// @param redeemable Redeemable token that can claim this deposit.\\n    /// Implicitly snapshots the redeemable so malicious `Trust` cannot\\n    /// redirect funds later.\\n    /// @param token `IERC20` token being deposited.\\n    /// @param amount Amount of token deposited.\\n    event PendingDeposit(\\n        address sender,\\n        address sale,\\n        address redeemable,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    /// Emitted every time a pending deposit is swept to a full deposit.\\n    /// @param sender Anon `msg.sender` sweeping the deposit.\\n    /// @param depositor Anon `msg.sender` who originally deposited the token.\\n    /// @param sale `ISale` contract deposit is under.\\n    /// @param redeemable Redeemable token first reported by the trust.\\n    /// @param token `IERC20` token being swept into a deposit.\\n    /// @param amount Amount of token being swept into a deposit.\\n    event Sweep(\\n        address sender,\\n        address depositor,\\n        address sale,\\n        address redeemable,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    /// Emitted for every successful deposit.\\n    /// @param sender Anon `msg.sender` triggering the deposit.\\n    /// MAY NOT be the `depositor` in the case of a pending sweep.\\n    /// @param depositor Anon `msg.sender` who originally deposited the token.\\n    /// MAY NOT be the current `msg.sender` in the case of a pending sweep.\\n    /// @param sale `ISale` contract deposit is under.\\n    /// @param redeemable Redeemable token that can claim this deposit.\\n    /// @param token `IERC20` token being deposited.\\n    /// @param supply rTKN supply at moment of deposit.\\n    /// @param amount Amount of token deposited.\\n    event Deposit(\\n        address sender,\\n        address depositor,\\n        address sale,\\n        address redeemable,\\n        address token,\\n        uint256 supply,\\n        uint256 amount\\n    );\\n\\n    /// Emitted for every successful undeposit.\\n    /// @param sender Anon `msg.sender` undepositing the token.\\n    /// @param sale `ISale` contract undeposit is from.\\n    /// @param redeemable Redeemable token that is being undeposited against.\\n    /// @param token `IERC20` token being undeposited.\\n    /// @param supply rTKN supply at moment of deposit.\\n    /// @param amount Amount of token undeposited.\\n    event Undeposit(\\n        address sender,\\n        address sale,\\n        address redeemable,\\n        address token,\\n        uint256 supply,\\n        uint256 amount\\n    );\\n\\n    /// Emitted for every successful withdrawal.\\n    /// @param withdrawer Anon `msg.sender` withdrawing the token.\\n    /// @param sale `ISale` contract withdrawal is from.\\n    /// @param redeemable Redeemable token used to withdraw.\\n    /// @param token `IERC20` token being withdrawn.\\n    /// @param supply rTKN supply at moment of deposit.\\n    /// @param amount Amount of token withdrawn.\\n    event Withdraw(\\n        address withdrawer,\\n        address sale,\\n        address redeemable,\\n        address token,\\n        uint256 supply,\\n        uint256 amount\\n    );\\n\\n    /// Every time an address calls `withdraw` their withdrawals increases to\\n    /// match the current `totalDeposits` for that trust/token combination.\\n    /// The token amount they actually receive is only their prorata share of\\n    /// that deposited balance. The prorata scaling calculation happens inline\\n    /// within the `withdraw` function.\\n    /// trust => withdrawn token =>  rTKN supply => withdrawer => amount\\n    // solhint-disable-next-line max-line-length\\n    mapping(address => mapping(address => mapping(uint256 => mapping(address => uint256))))\\n        internal withdrawals;\\n\\n    /// Deposits during an active raise are desirable to trustlessly prove to\\n    /// raise participants that they will in fact be able to access the TKN\\n    /// after the raise succeeds. Deposits during the pending stage are set\\n    /// aside with no rTKN supply mapping, to be swept into a real deposit by\\n    /// anon once the raise completes.\\n    mapping(address => mapping(address => mapping(address => uint256)))\\n        internal pendingDeposits;\\n\\n    /// Every time an address calls `deposit` their deposited trust/token\\n    /// combination is increased. If they call `undeposit` when the raise has\\n    /// failed they will receive the full amount they deposited back. Every\\n    /// depositor must call `undeposit` for themselves.\\n    /// trust => deposited token => depositor => rTKN supply => amount\\n    // solhint-disable-next-line max-line-length\\n    mapping(address => mapping(address => mapping(address => mapping(uint256 => uint256))))\\n        internal deposits;\\n\\n    /// Every time an address calls `deposit` the amount is added to that\\n    /// trust/token/supply combination. This increase becomes the\\n    /// \\\"high water mark\\\" that withdrawals move up to with each `withdraw`\\n    /// call.\\n    /// trust => deposited token => rTKN supply => amount\\n    mapping(address => mapping(address => mapping(uint256 => uint256)))\\n        internal totalDeposits;\\n\\n    /// Redundant tracking of deposits withdrawn.\\n    /// Counts aggregate deposits down as users withdraw, while their own\\n    /// individual withdrawal counters count up.\\n    /// Guards against buggy/malicious redeemable tokens that don't correctly\\n    /// freeze their balances, hence opening up double spends.\\n    /// trust => deposited token => rTKN supply => amount\\n    mapping(address => mapping(address => mapping(uint256 => uint256)))\\n        internal remainingDeposits;\\n\\n    /// Depositor can set aside tokens during pending raise status to be swept\\n    /// into a real deposit later.\\n    /// The problem with doing a normal deposit while the raise is still active\\n    /// is that the `Sale` will burn all unsold tokens when the raise ends. If\\n    /// we captured the token supply mid-raise then many deposited TKN would\\n    /// be allocated to unsold rTKN. Instead we set aside TKN so that raise\\n    /// participants can be sure that they will be claimable upon raise success\\n    /// but they remain unbound to any rTKN supply until `sweepPending` is\\n    /// called.\\n    /// `depositPending` is a one-way function, there is no way to `undeposit`\\n    /// until after the raise fails. Strongly recommended that depositors do\\n    /// NOT call `depositPending` until raise starts, so they know it will also\\n    /// end.\\n    /// @param sale_ The `Sale` to assign this deposit to.\\n    /// @param token_ The `IERC20` token to deposit to the escrow.\\n    /// @param amount_ The amount of token to despoit. Requires depositor has\\n    /// approved at least this amount to succeed.\\n    function depositPending(\\n        address sale_,\\n        address token_,\\n        uint256 amount_\\n    ) external {\\n        require(amount_ > 0, \\\"ZERO_DEPOSIT\\\");\\n        require(escrowStatus(sale_) == EscrowStatus.Pending, \\\"NOT_PENDING\\\");\\n        pendingDeposits[sale_][token_][msg.sender] += amount_;\\n        // Important to snapshot the token from the trust here so it can't be\\n        // changed later by the trust.\\n        address redeemable_ = token(sale_);\\n\\n        emit PendingDeposit(msg.sender, sale_, redeemable_, token_, amount_);\\n\\n        IERC20(token_).safeTransferFrom(msg.sender, address(this), amount_);\\n    }\\n\\n    /// Internal accounting for a deposit.\\n    /// Identical for both a direct deposit and sweeping a pending deposit.\\n    /// @param sale_ The sale to register a deposit under.\\n    /// @param token_ The token being deposited.\\n    /// @param depositor_ The depositor address to register the deposit under.\\n    /// @param amount_ The size of the deposit denominated in `token_`.\\n    function registerDeposit(\\n        address sale_,\\n        address token_,\\n        address depositor_,\\n        uint256 amount_\\n    ) private {\\n        require(escrowStatus(sale_) > EscrowStatus.Pending, \\\"PENDING\\\");\\n        require(amount_ > 0, \\\"ZERO_DEPOSIT\\\");\\n\\n        address redeemable_ = token(sale_);\\n        uint256 supply_ = IERC20(redeemable_).totalSupply();\\n        // Zero supply means the escrow is at best useless (no recipients) and\\n        // at worst dangerous (tokens trapped behind a divide by zero).\\n        require(supply_ > 0, \\\"ZERO_SUPPLY\\\");\\n\\n        deposits[sale_][token_][depositor_][supply_] += amount_;\\n        totalDeposits[sale_][token_][supply_] += amount_;\\n        remainingDeposits[sale_][token_][supply_] += amount_;\\n\\n        emit Deposit(\\n            msg.sender,\\n            depositor_,\\n            sale_,\\n            redeemable_,\\n            token_,\\n            supply_,\\n            amount_\\n        );\\n    }\\n\\n    /// Anon can convert any existing pending deposit to a deposit with known\\n    /// rTKN supply once the escrow has moved out of pending status.\\n    /// As `sweepPending` is anon callable, raise participants know that the\\n    /// depositor cannot later prevent a sweep, and depositor knows that raise\\n    /// participants cannot prevent a sweep. As per normal deposits, the output\\n    /// of swept tokens depends on success/fail state allowing `undeposit` or\\n    /// `withdraw` to be called subsequently.\\n    /// Partial sweeps are NOT supported, to avoid griefers splitting a deposit\\n    /// across many different `supply_` values.\\n    /// @param sale_ The sale to sweep all pending deposits for.\\n    /// @param token_ The token to sweep into registered deposits.\\n    /// @param depositor_ The depositor to sweep registered deposits under.\\n    function sweepPending(\\n        address sale_,\\n        address token_,\\n        address depositor_\\n    ) external {\\n        uint256 amount_ = pendingDeposits[sale_][token_][depositor_];\\n        delete pendingDeposits[sale_][token_][depositor_];\\n        emit Sweep(\\n            msg.sender,\\n            depositor_,\\n            sale_,\\n            token(sale_),\\n            token_,\\n            amount_\\n        );\\n        registerDeposit(sale_, token_, depositor_, amount_);\\n    }\\n\\n    /// Any address can deposit any amount of its own `IERC20` under a `Sale`.\\n    /// The `Sale` MUST be a child of the trusted factory.\\n    /// The deposit will be accounted for under both the depositor individually\\n    /// and the trust in aggregate. The aggregate value is used by `withdraw`\\n    /// and the individual value by `undeposit`.\\n    /// The depositor is responsible for approving the token for this contract.\\n    /// `deposit` is still enabled after the distribution ends; `undeposit` is\\n    /// always allowed in case of a fail and disabled on success. Multiple\\n    /// `deposit` calls before and after a success result are supported. If a\\n    /// depositor deposits when a raise has failed they will need to undeposit\\n    /// it again manually.\\n    /// Delegated `deposit` is not supported. Every depositor is directly\\n    /// responsible for every `deposit`.\\n    /// WARNING: As `undeposit` can only be called when the `Sale` reports\\n    /// failure, `deposit` should only be called when the caller is sure the\\n    /// `Sale` will reach a clear success/fail status. For example, when a\\n    /// `Sale` has not yet been seeded it may never even start the raise so\\n    /// depositing at this point is dangerous. If the `Sale` never starts the\\n    /// raise it will never fail the raise either.\\n    /// @param sale_ The `Sale` to assign this deposit to.\\n    /// @param token_ The `IERC20` token to deposit to the escrow.\\n    /// @param amount_ The amount of token to deposit. Requires depositor has\\n    /// approved at least this amount to succeed.\\n    function deposit(\\n        address sale_,\\n        address token_,\\n        uint256 amount_\\n    ) external {\\n        registerDeposit(sale_, token_, msg.sender, amount_);\\n        IERC20(token_).safeTransferFrom(msg.sender, address(this), amount_);\\n    }\\n\\n    /// The inverse of `deposit`.\\n    /// In the case of a failed distribution the depositors can claim back any\\n    /// tokens they deposited in the escrow.\\n    /// Ideally the distribution is a success and this does not need to be\\n    /// called but it is important that we can walk back deposits and try again\\n    /// for some future raise if needed.\\n    /// Delegated `undeposit` is not supported, only the depositor can wind\\n    /// back their original deposit.\\n    /// `amount_` must be non-zero.\\n    /// If several tokens have been deposited against a given trust for the\\n    /// depositor then each token must be individually undeposited. There is\\n    /// no onchain tracking or bulk processing for the depositor, they are\\n    /// expected to know what they have previously deposited and if/when to\\n    /// process an `undeposit`.\\n    /// @param sale_ The `Sale` to undeposit from.\\n    /// @param token_ The token to undeposit.\\n    /// @param supply_ The total supply of the sale token associated with the\\n    /// deposit being undeposited.\\n    /// @param amount_ The amount to undeposit.\\n    function undeposit(\\n        address sale_,\\n        address token_,\\n        uint256 supply_,\\n        uint256 amount_\\n    ) external {\\n        // Can only undeposit when the `Trust` reports failure.\\n        require(escrowStatus(sale_) == EscrowStatus.Fail, \\\"NOT_FAIL\\\");\\n        require(amount_ > 0, \\\"ZERO_AMOUNT\\\");\\n\\n        deposits[sale_][token_][msg.sender][supply_] -= amount_;\\n        // Guard against outputs exceeding inputs.\\n        // Last undeposit gets a gas refund.\\n        totalDeposits[sale_][token_][supply_] -= amount_;\\n        remainingDeposits[sale_][token_][supply_] -= amount_;\\n\\n        emit Undeposit(\\n            msg.sender,\\n            sale_,\\n            // Include this in the event so that indexer consumers see a\\n            // consistent world view even if the trust_ changes its answer\\n            // about the redeemable.\\n            token(sale_),\\n            token_,\\n            supply_,\\n            amount_\\n        );\\n\\n        IERC20(token_).safeTransfer(msg.sender, amount_);\\n    }\\n\\n    /// The successful handover of a `deposit` to a recipient.\\n    /// When a redeemable token distribution is successful the redeemable token\\n    /// holders are automatically and immediately eligible to `withdraw` any\\n    /// and all tokens previously deposited against the relevant `Sale`.\\n    /// The `withdraw` can only happen if/when the relevant `Sale` reaches the\\n    /// success distribution status.\\n    /// Delegated `withdraw` is NOT supported. Every redeemable token holder is\\n    /// directly responsible for being aware of and calling `withdraw`.\\n    /// If a redeemable token holder calls `redeem` they also burn their claim\\n    /// on any tokens held in escrow so they MUST first call `withdraw` THEN\\n    /// `redeem`.\\n    /// It is expected that the redeemable token holder knows about the tokens\\n    /// that they will be withdrawing. This information is NOT tracked onchain\\n    /// or exposed for bulk processing.\\n    /// Partial `withdraw` is not supported, all tokens allocated to the caller\\n    /// are withdrawn`. 0 amount withdrawal is an error, if the prorata share\\n    /// of the token being claimed is small enough to round down to 0 then the\\n    /// withdraw will revert.\\n    /// Multiple withdrawals across multiple deposits is supported and is\\n    /// equivalent to a single withdraw after all relevant deposits.\\n    /// @param sale_ The trust to `withdraw` against.\\n    /// @param token_ The token to `withdraw`.\\n    /// @param supply_ The total supply of the sale token at time of deposit\\n    /// to process this withdrawal against.\\n    function withdraw(\\n        address sale_,\\n        address token_,\\n        uint256 supply_\\n    ) external {\\n        // Can only withdraw when the `Trust` reports success.\\n        require(escrowStatus(sale_) == EscrowStatus.Success, \\\"NOT_SUCCESS\\\");\\n\\n        uint256 totalDeposited_ = totalDeposits[sale_][token_][supply_];\\n        uint256 withdrawn_ = withdrawals[sale_][token_][supply_][msg.sender];\\n        withdrawals[sale_][token_][supply_][msg.sender] = totalDeposited_;\\n\\n        RedeemableERC20 redeemable_ = RedeemableERC20(token(sale_));\\n\\n        //solhint-disable-next-line max-line-length\\n        uint256 amount_ = (// Underflow MUST error here (should not be possible).\\n        (totalDeposited_ - withdrawn_) *\\n            // prorata share of `msg.sender`'s current balance vs. supply\\n            // as at the time deposit was made. If nobody burns they will\\n            // all get a share rounded down by integer division. 100 split\\n            // 3 ways will be 33 tokens each, leaving 1 TKN as escrow dust,\\n            // for example. If someone burns before withdrawing they will\\n            // receive less, so 0/33/33 from 100 with 34 TKN as escrow\\n            // dust, for example.\\n            redeemable_.balanceOf(msg.sender)) / supply_;\\n\\n        // Guard against outputs exceeding inputs.\\n        // For example a malicious `Trust` could report a `redeemable_` token\\n        // that does NOT freeze balances. In this case token holders can double\\n        // spend their withdrawals by simply shuffling the same token around\\n        // between accounts.\\n        remainingDeposits[sale_][token_][supply_] -= amount_;\\n\\n        require(amount_ > 0, \\\"ZERO_WITHDRAW\\\");\\n        emit Withdraw(\\n            msg.sender,\\n            sale_,\\n            address(redeemable_),\\n            token_,\\n            supply_,\\n            amount_\\n        );\\n        IERC20(token_).safeTransfer(msg.sender, amount_);\\n    }\\n}\\n\",\"keccak256\":\"0x0e1296a103e36dd58966dbd71a6ef3b4ee606d34439b56d1cafa2e61e685fbfb\",\"license\":\"CAL\"},\"contracts/escrow/SaleEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"../sale/ISale.sol\\\";\\n\\n/// Represents the 3 possible statuses an escrow could care about.\\n/// Either the escrow takes no action or consistently allows a success/fail\\n/// action.\\nenum EscrowStatus {\\n    /// The underlying `Sale` has not reached a definitive pass/fail state.\\n    /// Important this is the first item in the enum as inequality is used to\\n    /// check pending vs. pass/fail in security sensitive code.\\n    Pending,\\n    /// The underlying `Sale` distribution failed.\\n    Fail,\\n    /// The underlying `Sale` distribution succeeded.\\n    Success\\n}\\n\\n/// @title SaleEscrow\\n/// An escrow that is designed to work with untrusted `Sale` bytecode.\\n/// `escrowStatus` wraps `Sale` functions to guarantee that results do not\\n/// change. Reserve and token addresses never change for a given `Sale` and\\n/// a pass/fail result is one-way. Even if some bug in the `Sale` causes the\\n/// pass/fail status to flip, this will not result in the escrow double\\n/// spending or otherwise changing the direction that it sends funds.\\ncontract SaleEscrow {\\n    /// ISale address => reserve address.\\n    mapping(address => address) internal reserves;\\n    /// ISale address => token address.\\n    mapping(address => address) internal tokens;\\n    /// ISale address => status.\\n    mapping(address => EscrowStatus) internal escrowStatuses;\\n\\n    /// Immutable wrapper around `ISale.reserve`.\\n    /// Once a `Sale` reports a reserve address the `SaleEscrow` never asks\\n    /// again. Prevents a malicious `Sale` from changing the reserve at some\\n    /// point to break internal escrow accounting.\\n    /// @param sale_ The ISale to fetch reserve for.\\n    function reserve(address sale_) internal returns (address) {\\n        address reserve_ = reserves[sale_];\\n        if (reserve_ == address(0)) {\\n            address saleReserve_ = address(ISale(sale_).reserve());\\n            require(saleReserve_ != address(0), \\\"0_RESERVE\\\");\\n            reserves[sale_] = saleReserve_;\\n            reserve_ = saleReserve_;\\n        }\\n        return reserve_;\\n    }\\n\\n    /// Immutable wrapper around `ISale.token`.\\n    /// Once a `Sale` reports a token address the `SaleEscrow` never asks\\n    /// again. Prevents a malicious `Sale` from changing the token at some\\n    /// point to divert escrow payments after assets have already been set\\n    /// aside.\\n    /// @param sale_ The ISale to fetch token for.\\n    function token(address sale_) internal returns (address) {\\n        address token_ = tokens[sale_];\\n        if (token_ == address(0)) {\\n            address saleToken_ = address(ISale(sale_).token());\\n            require(saleToken_ != address(0), \\\"0_TOKEN\\\");\\n            tokens[sale_] = saleToken_;\\n            token_ = saleToken_;\\n        }\\n        return token_;\\n    }\\n\\n    /// Read the one-way, one-time transition from pending to success/fail.\\n    /// We never change our opinion of a success/fail outcome.\\n    /// If a buggy/malicious `ISale` somehow changes success/fail state then\\n    /// that is obviously bad as the escrow will release funds in the wrong\\n    /// direction. But if we were to change our opinion that would be worse as\\n    /// claims/refunds could potentially be \\\"double spent\\\" somehow.\\n    /// @param sale_ The sale to get the escrow status for.\\n    function escrowStatus(address sale_) internal returns (EscrowStatus) {\\n        EscrowStatus escrowStatus_ = escrowStatuses[sale_];\\n        // Short circuit and ignore the `ISale` if we previously saved a value.\\n        if (escrowStatus_ > EscrowStatus.Pending) {\\n            return escrowStatus_;\\n        }\\n        // We have never seen a success/fail outcome so need to ask the `ISale`\\n        // for the distribution status.\\n        else {\\n            SaleStatus saleStatus_ = ISale(sale_).saleStatus();\\n            // Success maps to success.\\n            if (saleStatus_ == SaleStatus.Success) {\\n                escrowStatuses[sale_] = EscrowStatus.Success;\\n                return EscrowStatus.Success;\\n            }\\n            // Fail maps to fail.\\n            else if (saleStatus_ == SaleStatus.Fail) {\\n                escrowStatuses[sale_] = EscrowStatus.Fail;\\n                return EscrowStatus.Fail;\\n            }\\n            // Everything else is still pending.\\n            else {\\n                return EscrowStatus.Pending;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea7de87cf6adb5eeca906b72407650b01a0de09d866b8af5b94e77970fe0f1bd\",\"license\":\"CAL\"},\"contracts/phased/Phased.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title Phased\\n/// @notice `Phased` is an abstract contract that defines up to `9` phases that\\n/// an implementing contract moves through.\\n///\\n/// Phase `0` is always the first phase and does not, and cannot, be set\\n/// expicitly. Effectively it is implied that phase `0` has been active\\n/// since block zero.\\n///\\n/// Each subsequent phase `1` through `8` must be scheduled sequentially and\\n/// explicitly at a block timestamp.\\n///\\n/// Only the immediate next phase can be scheduled with `scheduleNextPhase`,\\n/// it is not possible to schedule multiple phases ahead.\\n///\\n/// Multiple phases can be scheduled in a single second if each scheduled phase\\n/// is scheduled for the current block OR the contract is operating on a chain\\n/// with sub-second block times. I.e. if uniqueness of block timestamps is NOT\\n/// enforced by a chain then phases scheduling can share a timstamp across\\n/// multiple transactions. To enforce uniqueness of timestamps across\\n/// transactions on subsecond blockchains, simply schedule the final phase\\n/// shift of a transaction in the future.\\n///\\n/// Several utility functions and modifiers are provided.\\n///\\n/// One event `PhaseShiftScheduled` is emitted each time a phase shift is\\n/// scheduled (not when the scheduled phase is reached).\\n///\\n/// @dev `Phased` contracts have a defined timeline with available\\n/// functionality grouped into phases.\\n/// Every `Phased` contract starts at `0` and moves sequentially\\n/// through phases `1` to `8`.\\n/// Every `Phase` other than `0` is optional, there is no requirement\\n/// that all 9 phases are implemented.\\n/// Phases can never be revisited, the inheriting contract always moves through\\n/// each achieved phase linearly.\\n/// This is enforced by only allowing `scheduleNextPhase` to be called once per\\n/// phase.\\n/// It is possible to call `scheduleNextPhase` several times in a single second\\n/// but the `block.timestamp` for each phase must be reached each time to\\n/// schedule the next phase.\\n/// Importantly there are events and several modifiers and checks available to\\n/// ensure that functionality is limited to the current phase.\\n/// The full history of each phase shift block is recorded as a fixed size\\n/// array of `uint32`.\\ncontract Phased {\\n    /// @dev Every phase block starts uninitialized.\\n    /// Only uninitialized blocks can be set by the phase scheduler.\\n    uint32 private constant UNINITIALIZED = type(uint32).max;\\n    /// @dev This is how many phases can fit in a `uint256`.\\n    uint256 private constant MAX_PHASE = 8;\\n\\n    /// `PhaseScheduled` is emitted when the next phase is scheduled.\\n    /// @param sender `msg.sender` that scheduled the next phase.\\n    /// @param newPhase The next phase being scheduled.\\n    /// @param scheduledTime The timestamp the phase will be achieved.\\n    event PhaseScheduled(\\n        address sender,\\n        uint256 newPhase,\\n        uint256 scheduledTime\\n    );\\n\\n    /// 8 phases each as 32 bits to fit a single 32 byte word.\\n    uint32[MAX_PHASE] public phaseTimes;\\n\\n    /// Initialize the blocks at \\\"never\\\".\\n    /// All phase blocks are initialized to `UNINITIALIZED`.\\n    /// i.e. not fallback solidity value of `0`.\\n    function initializePhased() internal {\\n        // Reinitialization is a bug.\\n        // Only need to check the first block as all times are about to be set\\n        // to `UNINITIALIZED`.\\n        assert(phaseTimes[0] < 1);\\n        uint32[MAX_PHASE] memory phaseTimes_ = [\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED,\\n            UNINITIALIZED\\n        ];\\n        phaseTimes = phaseTimes_;\\n        // 0 is always the timestamp for implied phase 0.\\n        emit PhaseScheduled(msg.sender, 0, 0);\\n    }\\n\\n    /// Pure function to reduce an array of phase times and block timestamp to\\n    /// a specific `Phase`.\\n    /// The phase will be the highest attained even if several phases have the\\n    /// same timestamp.\\n    /// If every phase block is after the timestamp then `0` is returned.\\n    /// If every phase block is before the timestamp then `MAX_PHASE` is\\n    /// returned.\\n    /// @param phaseTimes_ Fixed array of phase times to compare against.\\n    /// @param timestamp_ Determine the relevant phase relative to this time.\\n    /// @return phase_ The \\\"current\\\" phase relative to the timestamp and phase\\n    /// times list.\\n    function phaseAtTime(\\n        uint32[MAX_PHASE] memory phaseTimes_,\\n        uint256 timestamp_\\n    ) public pure returns (uint256 phase_) {\\n        for (phase_ = 0; phase_ < MAX_PHASE; phase_++) {\\n            if (timestamp_ < phaseTimes_[phase_]) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// Pure function to reduce an array of phase times and phase to a\\n    /// specific timestamp.\\n    /// `Phase.ZERO` will always return block `0`.\\n    /// Every other phase will map to a time in `phaseTimes_`.\\n    /// @param phaseTimes_ Fixed array of phase blocks to compare against.\\n    /// @param phase_ Determine the relevant block number for this phase.\\n    /// @return timestamp_ The timestamp for the phase according to\\n    /// `phaseTimes_`.\\n    function timeForPhase(uint32[MAX_PHASE] memory phaseTimes_, uint256 phase_)\\n        public\\n        pure\\n        returns (uint256 timestamp_)\\n    {\\n        timestamp_ = phase_ > 0 ? phaseTimes_[phase_ - 1] : 0;\\n    }\\n\\n    /// Impure read-only function to return the \\\"current\\\" phase from internal\\n    /// contract state.\\n    /// Simply wraps `phaseAtTime` for current values of `phaseTimes`\\n    /// and `block.timestamp`.\\n    function currentPhase() public view returns (uint256 phase_) {\\n        phase_ = phaseAtTime(phaseTimes, block.timestamp);\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase.\\n    /// @param phase_ Modified functions can only be called during this phase.\\n    modifier onlyPhase(uint256 phase_) {\\n        require(currentPhase() == phase_, \\\"BAD_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Modifies functions to only be callable in a specific phase OR if the\\n    /// specified phase has passed.\\n    /// @param phase_ Modified function only callable during or after this\\n    /// phase.\\n    modifier onlyAtLeastPhase(uint256 phase_) {\\n        require(currentPhase() >= phase_, \\\"MIN_PHASE\\\");\\n        _;\\n    }\\n\\n    /// Writes the timestamp for the next phase.\\n    /// Only uninitialized times can be written to.\\n    /// Only the immediate next phase relative to `currentPhase` can be written\\n    /// to. It is still required to specify the `phase_` so that it is explicit\\n    /// and clear in the calling code which phase is being moved to.\\n    /// Emits `PhaseShiftScheduled` with the phase timestamp.\\n    /// @param phase_ The phase being scheduled.\\n    /// @param timestamp_ The timestamp for the phase.\\n    function schedulePhase(uint256 phase_, uint256 timestamp_) internal {\\n        require(block.timestamp <= timestamp_, \\\"NEXT_TIME_PAST\\\");\\n        require(timestamp_ < UNINITIALIZED, \\\"NEXT_TIME_UNINITIALIZED\\\");\\n        // Don't need to check for underflow as the index will be used as a\\n        // fixed array index below. Implies that scheduling phase `0` is NOT\\n        // supported.\\n        uint256 index_;\\n        unchecked {\\n            index_ = phase_ - 1;\\n        }\\n        // Bit of a hack to check the current phase against the index to\\n        // save calculating the subtraction twice.\\n        require(currentPhase() == index_, \\\"NEXT_PHASE\\\");\\n\\n        require(UNINITIALIZED == phaseTimes[index_], \\\"NEXT_TIME_SET\\\");\\n\\n        // Cannot exceed UNINITIALIZED (see above) so don't need to check\\n        // overflow on downcast.\\n        unchecked {\\n            phaseTimes[index_] = uint32(timestamp_);\\n        }\\n\\n        emit PhaseScheduled(msg.sender, phase_, timestamp_);\\n    }\\n}\\n\",\"keccak256\":\"0x0660c03cb0a704335a22ad0b2bb969ab411a3b41bd221e085b43ed7a7e9b89df\",\"license\":\"CAL\"},\"contracts/redeemableERC20/RedeemableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ERC20Config} from \\\"../erc20/ERC20Config.sol\\\";\\nimport \\\"../erc20/ERC20Redeem.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ITierV2} from \\\"../tier/ITierV2.sol\\\";\\nimport {TierReport} from \\\"../tier/libraries/TierReport.sol\\\";\\n\\nimport {Phased} from \\\"../phased/Phased.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n/// Everything required by the `RedeemableERC20` constructor.\\n/// @param reserve Reserve token that the associated `Trust` or equivalent\\n/// raise contract will be forwarding to the `RedeemableERC20` contract.\\n/// @param erc20Config ERC20 config forwarded to the ERC20 constructor.\\n/// @param tier Tier contract to compare statuses against on transfer.\\n/// @param minimumTier Minimum tier required for transfers in `Phase.ZERO`.\\n/// Can be `0`.\\n/// @param distributionEndForwardingAddress Optional address to send rTKN to at\\n/// the end of the distribution phase. If `0` address then all undistributed\\n/// rTKN will burn itself at the end of the distribution.\\nstruct RedeemableERC20Config {\\n    address reserve;\\n    ERC20Config erc20Config;\\n    address tier;\\n    uint256 minimumTier;\\n    address distributionEndForwardingAddress;\\n}\\n\\n/// @title RedeemableERC20\\n/// @notice This is the ERC20 token that is minted and distributed.\\n///\\n/// During `Phase.ZERO` the token can be traded and so compatible with the\\n/// Balancer pool mechanics.\\n///\\n/// During `Phase.ONE` the token is frozen and no longer able to be traded on\\n/// any AMM or transferred directly.\\n///\\n/// The token can be redeemed during `Phase.ONE` which burns the token in\\n/// exchange for pro-rata erc20 tokens held by the `RedeemableERC20` contract\\n/// itself.\\n///\\n/// The token balances can be used indirectly for other claims, promotions and\\n/// events as a proof of participation in the original distribution by token\\n/// holders.\\n///\\n/// The token can optionally be restricted by the `ITierV2` contract to only\\n/// allow receipients with a specified membership status.\\n///\\n/// @dev `RedeemableERC20` is an ERC20 with 2 phases.\\n///\\n/// `Phase.ZERO` is the distribution phase where the token can be freely\\n/// transfered but not redeemed.\\n/// `Phase.ONE` is the redemption phase where the token can be redeemed but no\\n/// longer transferred.\\n///\\n/// Redeeming some amount of `RedeemableERC20` burns the token in exchange for\\n/// some other tokens held by the contract. For example, if the\\n/// `RedeemableERC20` token contract holds 100 000 USDC then a holder of the\\n/// redeemable token can burn some of their tokens to receive a % of that USDC.\\n/// If they redeemed (burned) an amount equal to 10% of the redeemable token\\n/// supply then they would receive 10 000 USDC.\\n///\\n/// To make the treasury assets discoverable anyone can call `newTreasuryAsset`\\n/// to emit an event containing the treasury asset address. As malicious and/or\\n/// spam users can emit many treasury events there is a need for sensible\\n/// indexing and filtering of asset events to only trusted users. This contract\\n/// is agnostic to how that trust relationship is defined for each user.\\n///\\n/// Users must specify all the treasury assets they wish to redeem to the\\n/// `redeem` function. After `redeem` is called the redeemed tokens are burned\\n/// so all treasury assets must be specified and claimed in a batch atomically.\\n/// Note: The same amount of `RedeemableERC20` is burned, regardless of which\\n/// treasury assets were specified. Specifying fewer assets will NOT increase\\n/// the proportion of each that is returned.\\n///\\n/// `RedeemableERC20` has several owner administrative functions:\\n/// - Owner can add senders and receivers that can send/receive tokens even\\n///   during `Phase.ONE`\\n/// - Owner can end `Phase.ONE` during `Phase.ZERO` by specifying the address\\n///   of a distributor, which will have any undistributed tokens burned.\\n/// The owner should be a `Trust` not an EOA.\\n///\\n/// The redeem functions MUST be used to redeem and burn RedeemableERC20s\\n/// (NOT regular transfers).\\n///\\n/// `redeem` will simply revert if called outside `Phase.ONE`.\\n/// A `Redeem` event is emitted on every redemption (per treasury asset) as\\n/// `(redeemer, asset, redeemAmount)`.\\ncontract RedeemableERC20 is Initializable, Phased, ERC20Redeem {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev Phase constants.\\n    /// Contract is not yet initialized.\\n    uint256 private constant PHASE_UNINITIALIZED = 0;\\n    /// @dev Token is in the distribution phase and can be transferred freely\\n    /// subject to tier requirements.\\n    uint256 private constant PHASE_DISTRIBUTING = 1;\\n    /// @dev Token is frozen and cannot be transferred unless the\\n    /// sender/receiver is authorized as a sender/receiver.\\n    uint256 private constant PHASE_FROZEN = 2;\\n\\n    /// @dev Bits for a receiver.\\n    uint256 private constant RECEIVER = 0x1;\\n    /// @dev Bits for a sender.\\n    uint256 private constant SENDER = 0x2;\\n\\n    /// @dev To be clear, this admin is NOT intended to be an EOA.\\n    /// This contract is designed assuming the admin is a `Sale` or equivalent\\n    /// contract that itself does NOT have an admin key.\\n    address private admin;\\n    /// @dev Tracks addresses that can always send/receive regardless of phase.\\n    /// sender/receiver => access bits\\n    mapping(address => uint256) private access;\\n\\n    /// Results of initializing.\\n    /// @param sender `msg.sender` of initialize.\\n    /// @param config Initialization config.\\n    event Initialize(address sender, RedeemableERC20Config config);\\n\\n    /// A new token sender has been added.\\n    /// @param sender `msg.sender` that approved the token sender.\\n    /// @param grantedSender address that is now a token sender.\\n    event Sender(address sender, address grantedSender);\\n\\n    /// A new token receiver has been added.\\n    /// @param sender `msg.sender` that approved the token receiver.\\n    /// @param grantedReceiver address that is now a token receiver.\\n    event Receiver(address sender, address grantedReceiver);\\n\\n    /// RedeemableERC20 uses the standard/default 18 ERC20 decimals.\\n    /// The minimum supply enforced by the constructor is \\\"one\\\" token which is\\n    /// `10 ** 18`.\\n    /// The minimum supply does not prevent subsequent redemption/burning.\\n    uint256 private constant MINIMUM_INITIAL_SUPPLY = 10**18;\\n\\n    /// Tier contract that produces the report that `minimumTier` is checked\\n    /// against.\\n    /// Public so external contracts can interface with the required tier.\\n    ITierV2 public tier;\\n\\n    /// The minimum status that a user must hold to receive transfers during\\n    /// `Phase.ZERO`.\\n    /// The tier contract passed to `TierByConstruction` determines if\\n    /// the status is held during `_beforeTokenTransfer`.\\n    /// Public so external contracts can interface with the required tier.\\n    uint256 public minimumTier;\\n\\n    /// Optional address to send rTKN to at the end of the distribution phase.\\n    /// If `0` address then all undistributed rTKN will burn itself at the end\\n    /// of the distribution.\\n    address private distributionEndForwardingAddress;\\n\\n    /// Mint the full ERC20 token supply and configure basic transfer\\n    /// restrictions. Initializes all base contracts.\\n    /// @param config_ Initialized configuration.\\n    function initialize(RedeemableERC20Config calldata config_)\\n        external\\n        initializer\\n    {\\n        initializePhased();\\n\\n        tier = ITierV2(config_.tier);\\n\\n        require(\\n            ERC165Checker.supportsInterface(\\n                config_.tier,\\n                type(ITierV2).interfaceId\\n            ),\\n            \\\"ERC165_TIERV2\\\"\\n        );\\n\\n        __ERC20_init(config_.erc20Config.name, config_.erc20Config.symbol);\\n\\n        require(\\n            config_.erc20Config.initialSupply >= MINIMUM_INITIAL_SUPPLY,\\n            \\\"MINIMUM_INITIAL_SUPPLY\\\"\\n        );\\n        minimumTier = config_.minimumTier;\\n        distributionEndForwardingAddress = config_\\n            .distributionEndForwardingAddress;\\n\\n        // Minting and burning must never fail.\\n        access[address(0)] = RECEIVER | SENDER;\\n\\n        // Admin receives full supply.\\n        access[config_.erc20Config.distributor] = RECEIVER;\\n\\n        // Forwarding address must be able to receive tokens.\\n        if (distributionEndForwardingAddress != address(0)) {\\n            access[distributionEndForwardingAddress] = RECEIVER;\\n        }\\n\\n        admin = config_.erc20Config.distributor;\\n\\n        // Need to mint after assigning access.\\n        _mint(\\n            config_.erc20Config.distributor,\\n            config_.erc20Config.initialSupply\\n        );\\n\\n        // The reserve must always be one of the treasury assets.\\n        newTreasuryAsset(config_.reserve);\\n\\n        emit Initialize(msg.sender, config_);\\n\\n        schedulePhase(PHASE_DISTRIBUTING, block.timestamp);\\n    }\\n\\n    /// Require a function is only admin callable.\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"ONLY_ADMIN\\\");\\n        _;\\n    }\\n\\n    /// Check that an address is a receiver.\\n    /// A sender is also a receiver.\\n    /// @param maybeReceiver_ account to check.\\n    /// @return True if account is a receiver.\\n    function isReceiver(address maybeReceiver_) public view returns (bool) {\\n        return access[maybeReceiver_] & RECEIVER > 0;\\n    }\\n\\n    /// Admin can grant an address receiver rights.\\n    /// @param newReceiver_ The account to grand receiver.\\n    function grantReceiver(address newReceiver_) external onlyAdmin {\\n        // Using `|` preserves sender if previously granted.\\n        access[newReceiver_] |= RECEIVER;\\n        emit Receiver(msg.sender, newReceiver_);\\n    }\\n\\n    /// Check that an address is a sender.\\n    /// @param maybeSender_ account to check.\\n    /// @return True if account is a sender.\\n    function isSender(address maybeSender_) public view returns (bool) {\\n        return access[maybeSender_] & SENDER > 0;\\n    }\\n\\n    /// Admin can grant an addres sender rights.\\n    /// @param newSender_ The account to grant sender.\\n    function grantSender(address newSender_) external onlyAdmin {\\n        // Uinsg `|` preserves receiver if previously granted.\\n        access[newSender_] |= SENDER;\\n        emit Sender(msg.sender, newSender_);\\n    }\\n\\n    /// The admin can forward or burn all tokens of a single address to end\\n    /// `PHASE_DISTRIBUTING`.\\n    /// The intent is that during `PHASE_DISTRIBUTING` there is some contract\\n    /// responsible for distributing the tokens.\\n    /// The admin specifies the distributor to end `PHASE_DISTRIBUTING` and the\\n    /// forwarding address set during initialization is used. If the forwarding\\n    /// address is `0` the rTKN will be burned, otherwise the entire balance of\\n    /// the distributor is forwarded to the nominated address. In practical\\n    /// terms the forwarding allows for escrow depositors to receive a prorata\\n    /// claim on unsold rTKN if they forward it to themselves, otherwise raise\\n    /// participants will receive a greater share of the final escrowed tokens\\n    /// due to the burn reducing the total supply.\\n    /// The distributor is NOT set during the constructor because it may not\\n    /// exist at that point. For example, Balancer needs the paired erc20\\n    /// tokens to exist before the trading pool can be built.\\n    /// @param distributor_ The distributor according to the admin.\\n    /// BURN the tokens if `address(0)`.\\n    function endDistribution(address distributor_)\\n        external\\n        onlyPhase(PHASE_DISTRIBUTING)\\n        onlyAdmin\\n    {\\n        schedulePhase(PHASE_FROZEN, block.timestamp);\\n        address forwardTo_ = distributionEndForwardingAddress;\\n        uint256 distributorBalance_ = balanceOf(distributor_);\\n        if (distributorBalance_ > 0) {\\n            if (forwardTo_ == address(0)) {\\n                _burn(distributor_, distributorBalance_);\\n            } else {\\n                _transfer(distributor_, forwardTo_, distributorBalance_);\\n            }\\n        }\\n    }\\n\\n    /// Wraps `_redeem` from `ERC20Redeem`.\\n    /// Very thin wrapper so be careful when calling!\\n    /// @param treasuryAssets_ The treasury assets to redeem for. If this is\\n    /// empty or incomplete then tokens will be permanently burned for no\\n    /// reason by the caller and the remaining funds will be effectively\\n    /// redistributed to everyone else.\\n    function redeem(IERC20[] calldata treasuryAssets_, uint256 redeemAmount_)\\n        external\\n        onlyPhase(PHASE_FROZEN)\\n    {\\n        _redeem(treasuryAssets_, redeemAmount_);\\n    }\\n\\n    /// Apply phase sensitive transfer restrictions.\\n    /// During `Phase.ZERO` only tier requirements apply.\\n    /// During `Phase.ONE` all transfers except burns are prevented.\\n    /// If a transfer involves either a sender or receiver with the SENDER\\n    /// or RECEIVER role, respectively, it will bypass these restrictions.\\n    /// @inheritdoc ERC20Upgradeable\\n    function _beforeTokenTransfer(\\n        address sender_,\\n        address receiver_,\\n        uint256 amount_\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(sender_, receiver_, amount_);\\n\\n        // Sending tokens to this contract (e.g. instead of redeeming) is\\n        // always an error.\\n        require(receiver_ != address(this), \\\"TOKEN_SEND_SELF\\\");\\n\\n        // Some contracts may attempt a preflight (e.g. Balancer) of a 0 amount\\n        // transfer.\\n        // We don't want to accidentally cause external errors due to zero\\n        // value transfers.\\n        if (\\n            amount_ > 0 &&\\n            // The sender and receiver lists bypass all access restrictions.\\n            !(isSender(sender_) || isReceiver(receiver_))\\n        ) {\\n            // During `PHASE_DISTRIBUTING` transfers are only restricted by the\\n            // tier of the recipient. Every other phase only allows senders and\\n            // receivers as above.\\n            require(currentPhase() == PHASE_DISTRIBUTING, \\\"FROZEN\\\");\\n\\n            // Receivers act as \\\"hubs\\\" that can send to \\\"spokes\\\".\\n            // i.e. any address of the minimum tier.\\n            // Spokes cannot send tokens another \\\"hop\\\" e.g. to each other.\\n            // Spokes can only send back to a receiver (doesn't need to be\\n            // the same receiver they received from).\\n            require(isReceiver(sender_), \\\"2SPOKE\\\");\\n            require(\\n                TierReport.tierAtTimeFromReport(\\n                    tier.report(receiver_, new uint256[](0)),\\n                    block.timestamp\\n                ) >= minimumTier,\\n                \\\"MIN_TIER\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9f6ce4a352972cbd5205a2c3dca2778cb0ba4dcdf204c7b645c3c72896e89be\",\"license\":\"CAL\"},\"contracts/sale/ISale.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// An `ISale` can be in one of 4 possible states and a linear progression is\\n/// expected from an \\\"in flight\\\" status to an immutable definitive outcome.\\n/// - Pending: The sale is deployed onchain but cannot be interacted with yet.\\n/// - Active: The sale can now be bought into and otherwise interacted with.\\n/// - Success: The sale has ended AND reached its minimum raise target.\\n/// - Fail: The sale has ended BUT NOT reached its minimum raise target.\\n/// Once an `ISale` reaches `Active` it MUST NOT return `Pending` ever again.\\n/// Once an `ISale` reaches `Success` or `Fail` it MUST NOT return any other\\n/// status ever again.\\nenum SaleStatus {\\n    Pending,\\n    Active,\\n    Success,\\n    Fail\\n}\\n\\ninterface ISale {\\n    /// Returns the address of the token being sold in the sale.\\n    /// MUST NOT change during the lifecycle of the sale contract.\\n    function token() external view returns (address);\\n\\n    /// Returns the address of the token that sale prices are denominated in.\\n    /// MUST NOT change during the lifecycle of the sale contract.\\n    function reserve() external view returns (address);\\n\\n    /// Returns the current `SaleStatus` of the sale.\\n    /// Represents a linear progression of the sale through its major lifecycle\\n    /// events.\\n    function saleStatus() external view returns (SaleStatus);\\n}\\n\",\"keccak256\":\"0x05ea99f5e024326b2964dfed6c49b895376826e7115265978ceeccd9278a5b20\",\"license\":\"CAL\"},\"contracts/tier/ITierV2.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// @title ITierV2\\n/// @notice `ITierV2` is a simple interface that contracts can implement to\\n/// provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITierV2`:\\n/// - MUST represent held tiers as a `uint`.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the time each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at `1`; Tier `0` is implied if no tier has ever\\n///     been held.\\n///   - Tier `0` is NOT encoded in the report, it is simply the fallback value.\\n///   - If a tier is lost the time data is erased for that tier and will be\\n///     set if/when the tier is regained to the new time.\\n///   - If a tier is held but the historical time information is not available\\n///     the report MAY return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n///   - Context can be a list of numbers that MAY pairwise define tiers such as\\n///     minimum thresholds, or MAY simply provide global context such as a\\n///     relevant NFT ID for example.\\n/// - MUST implement `reportTimeForTier`\\n///   - Functions exactly as `report` but only returns a single time for a\\n///     single tier\\n///   - MUST return the same time value `report` would for any given tier and\\n///     context combination.\\n///\\n/// So the four possible states and report values are:\\n/// - Tier is held and time is known: Timestamp is in the report\\n/// - Tier is held but time is NOT known: `0` is in the report\\n/// - Tier is NOT held: `0xFF..` is in the report\\n/// - Tier is unknown: `0xFF..` is in the report\\n///\\n/// The reason `context` is specified as a list of values rather than arbitrary\\n/// bytes is to allow clear and efficient compatibility with VM stacks. Some N\\n/// values can be taken from a VM stack and used directly as a context, which\\n/// would be difficult or impossible to ensure is safe for arbitrary bytes.\\ninterface ITierV2 {\\n    /// Same as report but only returns the time for a single tier.\\n    /// Often the implementing contract can calculate a single tier more\\n    /// efficiently than all 8 tiers. If the consumer only needs one or a few\\n    /// tiers it MAY be much cheaper to request only those tiers individually.\\n    /// This DOES NOT apply to all contracts, an obvious example is token\\n    /// balance based tiers which always return `ALWAYS` or `NEVER` for all\\n    /// tiers so no efficiency is gained.\\n    /// The return value is a `uint256` for gas efficiency but the values will\\n    /// be bounded by `type(uint32).max` as no single tier can report a value\\n    /// higher than this.\\n    function reportTimeForTier(\\n        address account,\\n        uint256 tier,\\n        uint256[] calldata context\\n    ) external view returns (uint256 time);\\n\\n    /// Same as `ITier` but with a list of values for `context` which allows a\\n    /// single underlying state to present many different reports dynamically.\\n    ///\\n    /// For example:\\n    /// - Staking ledgers can calculate different tier thresholds\\n    /// - NFTs can give different tiers based on different IDs\\n    /// - Snapshot ERC20s can give different reports based on snapshot ID\\n    ///\\n    /// `context` supercedes `setTier` function and `TierChange` event from\\n    /// `ITier` at the interface level. Implementing contracts are free to\\n    /// inherit both `ITier` and `ITierV2` if the old behaviour is desired.\\n    function report(address account, uint256[] calldata context)\\n        external\\n        view\\n        returns (uint256 report);\\n}\\n\",\"keccak256\":\"0xdc851fc7cd82f9752a2bc96dfe3914257af6a970f514a0a7ed50a7b327c4d035\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierConstants.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title TierConstants\\n/// @notice Constants for use with tier logic.\\nlibrary TierConstants {\\n    /// NEVER is 0xFF.. as it is infinitely in the future.\\n    /// NEVER for an entire report.\\n    uint256 internal constant NEVER_REPORT = type(uint256).max;\\n    /// NEVER for a single tier time.\\n    uint32 internal constant NEVER_TIME = type(uint32).max;\\n\\n    /// Always is 0 as it is the genesis block.\\n    /// Tiers can't predate the chain but they can predate an `ITierV2`\\n    /// contract.\\n    uint256 internal constant ALWAYS = 0;\\n\\n    /// Account has never held a tier.\\n    uint256 internal constant TIER_ZERO = 0;\\n\\n    /// Magic number for tier one.\\n    uint256 internal constant TIER_ONE = 1;\\n    /// Magic number for tier two.\\n    uint256 internal constant TIER_TWO = 2;\\n    /// Magic number for tier three.\\n    uint256 internal constant TIER_THREE = 3;\\n    /// Magic number for tier four.\\n    uint256 internal constant TIER_FOUR = 4;\\n    /// Magic number for tier five.\\n    uint256 internal constant TIER_FIVE = 5;\\n    /// Magic number for tier six.\\n    uint256 internal constant TIER_SIX = 6;\\n    /// Magic number for tier seven.\\n    uint256 internal constant TIER_SEVEN = 7;\\n    /// Magic number for tier eight.\\n    uint256 internal constant TIER_EIGHT = 8;\\n    /// Maximum tier is `TIER_EIGHT`.\\n    uint256 internal constant MAX_TIER = TIER_EIGHT;\\n}\\n\",\"keccak256\":\"0x4d73c7a5d50d7dddfd0a6cacaf5a366f99b80199dc9f9e8aa9ba77e2736a19e5\",\"license\":\"CAL\"},\"contracts/tier/libraries/TierReport.sol\":{\"content\":\"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ITierV2} from \\\"../ITierV2.sol\\\";\\nimport \\\"./TierConstants.sol\\\";\\n\\n/// @title TierReport\\n/// @notice `TierReport` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtTimeFromReport`: Returns the highest status achieved relative to\\n/// a block timestamp and report. Statuses gained after that block are ignored.\\n/// - `tierTime`: Returns the timestamp that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateTimesForTierRange`: Updates a report with a timestamp for every\\n///    tier in a range.\\n/// - `updateReportWithTierAtTime`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this\\n/// factors that out.\\nlibrary TierReport {\\n    /// Enforce upper limit on tiers so we can do unchecked math.\\n    /// @param tier_ The tier to enforce bounds on.\\n    modifier maxTier(uint256 tier_) {\\n        require(tier_ <= TierConstants.MAX_TIER, \\\"MAX_TIER\\\");\\n        _;\\n    }\\n\\n    /// Returns the highest tier achieved relative to a block timestamp\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.timestamp` but not always. Tiers gained after the\\n    /// reference time are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `timestamp_` this\\n    /// means the user must have held the tier continuously from `timestamp_`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITierV2`.\\n    /// @param timestamp_ The timestamp to check the tiers against.\\n    /// @return tier_ The highest tier held since `timestamp_` as per `report`.\\n    function tierAtTimeFromReport(uint256 report_, uint256 timestamp_)\\n        internal\\n        pure\\n        returns (uint256 tier_)\\n    {\\n        unchecked {\\n            for (tier_ = 0; tier_ < 8; tier_++) {\\n                if (uint32(uint256(report_ >> (tier_ * 32))) > timestamp_) {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Returns the timestamp that a given tier has been held since from a\\n    /// report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtTimeFromReport`.\\n    ///\\n    /// @param report_ The report to read a timestamp from.\\n    /// @param tier_ The Tier to read the timestamp for.\\n    /// @return timestamp_ The timestamp the tier has been held since.\\n    function reportTimeForTier(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256 timestamp_)\\n    {\\n        unchecked {\\n            // ZERO is a special case. Everyone has always been at least ZERO,\\n            // since block 0.\\n            if (tier_ == 0) {\\n                return 0;\\n            }\\n\\n            uint256 offset_ = (tier_ - 1) * 32;\\n            timestamp_ = uint256(uint32(uint256(report_ >> offset_)));\\n        }\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            uint256 mask_ = (TierConstants.NEVER_REPORT >> offset_) << offset_;\\n            return report_ | mask_;\\n        }\\n    }\\n\\n    /// Updates a report with a timestamp for a given tier.\\n    /// More gas efficient than `updateTimesForTierRange` if only a single\\n    /// tier is being modified.\\n    /// The tier at/above the given tier is updated. E.g. tier `0` will update\\n    /// the time for tier `1`.\\n    /// @param report_ Report to use as the baseline for the updated report.\\n    /// @param tier_ The tier level to update.\\n    /// @param timestamp_ The new block number for `tier_`.\\n    /// @return updatedReport_ The newly updated `report_`.\\n    function updateTimeAtTier(\\n        uint256 report_,\\n        uint256 tier_,\\n        uint256 timestamp_\\n    ) internal pure maxTier(tier_) returns (uint256 updatedReport_) {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            updatedReport_ =\\n                (report_ &\\n                    ~uint256(uint256(TierConstants.NEVER_TIME) << offset_)) |\\n                uint256(timestamp_ << offset_);\\n        }\\n    }\\n\\n    /// Updates a report with a block number for every tier in a range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start tier.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier at the start of the range (exclusive).\\n    /// @param endTier_ The tier at the end of the range (inclusive).\\n    /// @param timestamp_ The timestamp to set for every tier in the range.\\n    /// @return updatedReport_ The updated report.\\n    function updateTimesForTierRange(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 timestamp_\\n    ) internal pure maxTier(endTier_) returns (uint256 updatedReport_) {\\n        unchecked {\\n            uint256 offset_;\\n            for (uint256 i_ = startTier_; i_ < endTier_; i_++) {\\n                offset_ = i_ * 32;\\n                report_ =\\n                    (report_ &\\n                        ~uint256(\\n                            uint256(TierConstants.NEVER_TIME) << offset_\\n                        )) |\\n                    uint256(timestamp_ << offset_);\\n            }\\n            updatedReport_ = report_;\\n        }\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param timestamp_ The timestamp_ to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return updatedReport_ The updated report.\\n    function updateReportWithTierAtTime(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 timestamp_\\n    ) internal pure returns (uint256 updatedReport_) {\\n        updatedReport_ = endTier_ < startTier_\\n            ? truncateTiersAbove(report_, endTier_)\\n            : updateTimesForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                timestamp_\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x814ae8971bdddb4a0c8b3e460d1c338bc03a43c0e27452f5338816408519115e\",\"license\":\"CAL\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061171d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637e56cda8116100505780637e56cda8146100945780638340f549146100a7578063d9caed12146100ba57600080fd5b8063248a85721461006c5780635fc85b7d14610081575b600080fd5b61007f61007a3660046113fe565b6100cd565b005b61007f61008f366004611444565b61035c565b61007f6100a236600461148f565b610426565b61007f6100b536600461148f565b6105fb565b61007f6100c836600461148f565b61062e565b60016100d88561092a565b60028111156100e9576100e96114d0565b14610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f545f4641494c00000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600081116101bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5a45524f5f414d4f554e54000000000000000000000000000000000000000000604482015260640161014c565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600560209081526040808320938716835292815282822033835281528282208583529052908120805483929061021390849061152e565b909155505073ffffffffffffffffffffffffffffffffffffffff808516600090815260066020908152604080832093871683529281528282208583529052908120805483929061026490849061152e565b909155505073ffffffffffffffffffffffffffffffffffffffff80851660009081526007602090815260408083209387168352928152828220858352905290812080548392906102b590849061152e565b909155507f6b7ec092a62c7445c02d988d0c1c01a2da7d8778d62a625accdf18de5efca3b6905033856102e781610ace565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815292841660208401529083169082015290851660608201526080810184905260a0810183905260c00160405180910390a161035673ffffffffffffffffffffffffffffffffffffffff84163383610c49565b50505050565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260046020908152604080832086851684528252808320938516835292905290812080549190557ff1c3618947be77b086aba11baa9d1e07d2df15de2c0e620f295ffd4ddd550e1f3383866103cc81610ace565b6040805173ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529184168383015283166060830152918616608082015260a0810184905290519081900360c00190a161035684848484610d1d565b60008111610490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f4445504f5349540000000000000000000000000000000000000000604482015260640161014c565b600061049b8461092a565b60028111156104ac576104ac6114d0565b14610513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f545f50454e44494e47000000000000000000000000000000000000000000604482015260640161014c565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260046020908152604080832093861683529281528282203383529052908120805483929061055f908490611545565b909155506000905061057084610ace565b6040805133815273ffffffffffffffffffffffffffffffffffffffff878116602083015283811682840152861660608201526080810185905290519192507feabec77378d088e5df884cdb5fb2b55858355c2f6284148d4a30177eb54b52e6919081900360a00190a161035673ffffffffffffffffffffffffffffffffffffffff841633308561106d565b61060783833384610d1d565b61062973ffffffffffffffffffffffffffffffffffffffff831633308461106d565b505050565b60026106398461092a565b600281111561064a5761064a6114d0565b146106b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f545f53554343455353000000000000000000000000000000000000000000604482015260640161014c565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526006602090815260408083209487168084529482528083208684528252808320549383526003825280832094835293815283822085835281528382203383529052918220805490829055909161072386610ace565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152909150600090859073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b9919061155d565b6107c3858761152e565b6107cd9190611576565b6107d791906115b3565b73ffffffffffffffffffffffffffffffffffffffff8089166000908152600760209081526040808320938b16835292815282822089835290529081208054929350839290919061082890849061152e565b909155505080610894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f5a45524f5f574954484452415700000000000000000000000000000000000000604482015260640161014c565b6040805133815273ffffffffffffffffffffffffffffffffffffffff898116602083015284811682840152881660608201526080810187905260a0810183905290517f16976c9767f5174e5289de7594402a1e174ebd2a9622aa3ebafd14e5af4e2ab99181900360c00190a161092173ffffffffffffffffffffffffffffffffffffffff87163383610c49565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081205460ff1681816002811115610966576109666114d0565b11156109725792915050565b60008373ffffffffffffffffffffffffffffffffffffffff1663f9020e336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e391906115ee565b905060028160038111156109f9576109f96114d0565b1415610a545750505073ffffffffffffffffffffffffffffffffffffffff16600090815260026020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168217905590565b6003816003811115610a6857610a686114d0565b1415610ac45750505073ffffffffffffffffffffffffffffffffffffffff16600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915590565b5060009392505050565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526001602052604081205490911680610c435760008373ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6e919061160f565b905073ffffffffffffffffffffffffffffffffffffffff8116610bed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f305f544f4b454e00000000000000000000000000000000000000000000000000604482015260640161014c565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691831691909117905590505b92915050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106299084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526110cb565b6000610d288561092a565b6002811115610d3957610d396114d0565b11610da0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50454e44494e4700000000000000000000000000000000000000000000000000604482015260640161014c565b60008111610e0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f4445504f5349540000000000000000000000000000000000000000604482015260640161014c565b6000610e1585610ace565b905060008173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e88919061155d565b905060008111610ef4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5a45524f5f535550504c59000000000000000000000000000000000000000000604482015260640161014c565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260056020908152604080832089851684528252808320938816835292815282822084835290529081208054859290610f4a908490611545565b909155505073ffffffffffffffffffffffffffffffffffffffff8087166000908152600660209081526040808320938916835292815282822084835290529081208054859290610f9b908490611545565b909155505073ffffffffffffffffffffffffffffffffffffffff8087166000908152600760209081526040808320938916835292815282822084835290529081208054859290610fec908490611545565b90915550506040805133815273ffffffffffffffffffffffffffffffffffffffff86811660208301528881168284015284811660608301528716608082015260a0810183905260c0810185905290517f53591a88ac47bfe3130a7de575c6a6a8c22f7604cbba61b8390fbff773ed40499181900360e00190a1505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526103569085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610c9b565b600061112d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111d79092919063ffffffff16565b805190915015610629578080602001905181019061114b919061162c565b610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161014c565b60606111e684846000856111f0565b90505b9392505050565b606082471015611282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161014c565b73ffffffffffffffffffffffffffffffffffffffff85163b611300576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161014c565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611329919061167a565b60006040518083038185875af1925050503d8060008114611366576040519150601f19603f3d011682016040523d82523d6000602084013e61136b565b606091505b509150915061137b828286611386565b979650505050505050565b606083156113955750816111e9565b8251156113a55782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014c9190611696565b73ffffffffffffffffffffffffffffffffffffffff811681146113fb57600080fd5b50565b6000806000806080858703121561141457600080fd5b843561141f816113d9565b9350602085013561142f816113d9565b93969395505050506040820135916060013590565b60008060006060848603121561145957600080fd5b8335611464816113d9565b92506020840135611474816113d9565b91506040840135611484816113d9565b809150509250925092565b6000806000606084860312156114a457600080fd5b83356114af816113d9565b925060208401356114bf816113d9565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611540576115406114ff565b500390565b60008219821115611558576115586114ff565b500190565b60006020828403121561156f57600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115ae576115ae6114ff565b500290565b6000826115e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561160057600080fd5b8151600481106111e957600080fd5b60006020828403121561162157600080fd5b81516111e9816113d9565b60006020828403121561163e57600080fd5b815180151581146111e957600080fd5b60005b83811015611669578181015183820152602001611651565b838111156103565750506000910152565b6000825161168c81846020870161164e565b9190910192915050565b60208152600082518060208401526116b581604085016020870161164e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220049c19cf3724901f75101544ff351e9b0c76a329dd6896a6157544f2fcdc72d964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80637e56cda8116100505780637e56cda8146100945780638340f549146100a7578063d9caed12146100ba57600080fd5b8063248a85721461006c5780635fc85b7d14610081575b600080fd5b61007f61007a3660046113fe565b6100cd565b005b61007f61008f366004611444565b61035c565b61007f6100a236600461148f565b610426565b61007f6100b536600461148f565b6105fb565b61007f6100c836600461148f565b61062e565b60016100d88561092a565b60028111156100e9576100e96114d0565b14610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f545f4641494c00000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600081116101bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5a45524f5f414d4f554e54000000000000000000000000000000000000000000604482015260640161014c565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600560209081526040808320938716835292815282822033835281528282208583529052908120805483929061021390849061152e565b909155505073ffffffffffffffffffffffffffffffffffffffff808516600090815260066020908152604080832093871683529281528282208583529052908120805483929061026490849061152e565b909155505073ffffffffffffffffffffffffffffffffffffffff80851660009081526007602090815260408083209387168352928152828220858352905290812080548392906102b590849061152e565b909155507f6b7ec092a62c7445c02d988d0c1c01a2da7d8778d62a625accdf18de5efca3b6905033856102e781610ace565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815292841660208401529083169082015290851660608201526080810184905260a0810183905260c00160405180910390a161035673ffffffffffffffffffffffffffffffffffffffff84163383610c49565b50505050565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260046020908152604080832086851684528252808320938516835292905290812080549190557ff1c3618947be77b086aba11baa9d1e07d2df15de2c0e620f295ffd4ddd550e1f3383866103cc81610ace565b6040805173ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529184168383015283166060830152918616608082015260a0810184905290519081900360c00190a161035684848484610d1d565b60008111610490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f4445504f5349540000000000000000000000000000000000000000604482015260640161014c565b600061049b8461092a565b60028111156104ac576104ac6114d0565b14610513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f545f50454e44494e47000000000000000000000000000000000000000000604482015260640161014c565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260046020908152604080832093861683529281528282203383529052908120805483929061055f908490611545565b909155506000905061057084610ace565b6040805133815273ffffffffffffffffffffffffffffffffffffffff878116602083015283811682840152861660608201526080810185905290519192507feabec77378d088e5df884cdb5fb2b55858355c2f6284148d4a30177eb54b52e6919081900360a00190a161035673ffffffffffffffffffffffffffffffffffffffff841633308561106d565b61060783833384610d1d565b61062973ffffffffffffffffffffffffffffffffffffffff831633308461106d565b505050565b60026106398461092a565b600281111561064a5761064a6114d0565b146106b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f545f53554343455353000000000000000000000000000000000000000000604482015260640161014c565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526006602090815260408083209487168084529482528083208684528252808320549383526003825280832094835293815283822085835281528382203383529052918220805490829055909161072386610ace565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152909150600090859073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b9919061155d565b6107c3858761152e565b6107cd9190611576565b6107d791906115b3565b73ffffffffffffffffffffffffffffffffffffffff8089166000908152600760209081526040808320938b16835292815282822089835290529081208054929350839290919061082890849061152e565b909155505080610894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f5a45524f5f574954484452415700000000000000000000000000000000000000604482015260640161014c565b6040805133815273ffffffffffffffffffffffffffffffffffffffff898116602083015284811682840152881660608201526080810187905260a0810183905290517f16976c9767f5174e5289de7594402a1e174ebd2a9622aa3ebafd14e5af4e2ab99181900360c00190a161092173ffffffffffffffffffffffffffffffffffffffff87163383610c49565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081205460ff1681816002811115610966576109666114d0565b11156109725792915050565b60008373ffffffffffffffffffffffffffffffffffffffff1663f9020e336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e391906115ee565b905060028160038111156109f9576109f96114d0565b1415610a545750505073ffffffffffffffffffffffffffffffffffffffff16600090815260026020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168217905590565b6003816003811115610a6857610a686114d0565b1415610ac45750505073ffffffffffffffffffffffffffffffffffffffff16600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915590565b5060009392505050565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526001602052604081205490911680610c435760008373ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6e919061160f565b905073ffffffffffffffffffffffffffffffffffffffff8116610bed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f305f544f4b454e00000000000000000000000000000000000000000000000000604482015260640161014c565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691831691909117905590505b92915050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106299084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526110cb565b6000610d288561092a565b6002811115610d3957610d396114d0565b11610da0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50454e44494e4700000000000000000000000000000000000000000000000000604482015260640161014c565b60008111610e0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f4445504f5349540000000000000000000000000000000000000000604482015260640161014c565b6000610e1585610ace565b905060008173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e88919061155d565b905060008111610ef4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5a45524f5f535550504c59000000000000000000000000000000000000000000604482015260640161014c565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260056020908152604080832089851684528252808320938816835292815282822084835290529081208054859290610f4a908490611545565b909155505073ffffffffffffffffffffffffffffffffffffffff8087166000908152600660209081526040808320938916835292815282822084835290529081208054859290610f9b908490611545565b909155505073ffffffffffffffffffffffffffffffffffffffff8087166000908152600760209081526040808320938916835292815282822084835290529081208054859290610fec908490611545565b90915550506040805133815273ffffffffffffffffffffffffffffffffffffffff86811660208301528881168284015284811660608301528716608082015260a0810183905260c0810185905290517f53591a88ac47bfe3130a7de575c6a6a8c22f7604cbba61b8390fbff773ed40499181900360e00190a1505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526103569085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610c9b565b600061112d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111d79092919063ffffffff16565b805190915015610629578080602001905181019061114b919061162c565b610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161014c565b60606111e684846000856111f0565b90505b9392505050565b606082471015611282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161014c565b73ffffffffffffffffffffffffffffffffffffffff85163b611300576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161014c565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611329919061167a565b60006040518083038185875af1925050503d8060008114611366576040519150601f19603f3d011682016040523d82523d6000602084013e61136b565b606091505b509150915061137b828286611386565b979650505050505050565b606083156113955750816111e9565b8251156113a55782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014c9190611696565b73ffffffffffffffffffffffffffffffffffffffff811681146113fb57600080fd5b50565b6000806000806080858703121561141457600080fd5b843561141f816113d9565b9350602085013561142f816113d9565b93969395505050506040820135916060013590565b60008060006060848603121561145957600080fd5b8335611464816113d9565b92506020840135611474816113d9565b91506040840135611484816113d9565b809150509250925092565b6000806000606084860312156114a457600080fd5b83356114af816113d9565b925060208401356114bf816113d9565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611540576115406114ff565b500390565b60008219821115611558576115586114ff565b500190565b60006020828403121561156f57600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115ae576115ae6114ff565b500290565b6000826115e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561160057600080fd5b8151600481106111e957600080fd5b60006020828403121561162157600080fd5b81516111e9816113d9565b60006020828403121561163e57600080fd5b815180151581146111e957600080fd5b60005b83811015611669578181015183820152602001611651565b838111156103565750506000910152565b6000825161168c81846020870161164e565b9190910192915050565b60208152600082518060208401526116b581604085016020870161164e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220049c19cf3724901f75101544ff351e9b0c76a329dd6896a6157544f2fcdc72d964736f6c634300080a0033",
  "devdoc": {
    "events": {
      "Deposit(address,address,address,address,address,uint256,uint256)": {
        "params": {
          "amount": "Amount of token deposited.",
          "depositor": "Anon `msg.sender` who originally deposited the token. MAY NOT be the current `msg.sender` in the case of a pending sweep.",
          "redeemable": "Redeemable token that can claim this deposit.",
          "sale": "`ISale` contract deposit is under.",
          "sender": "Anon `msg.sender` triggering the deposit. MAY NOT be the `depositor` in the case of a pending sweep.",
          "supply": "rTKN supply at moment of deposit.",
          "token": "`IERC20` token being deposited."
        }
      },
      "PendingDeposit(address,address,address,address,uint256)": {
        "params": {
          "amount": "Amount of token deposited.",
          "redeemable": "Redeemable token that can claim this deposit. Implicitly snapshots the redeemable so malicious `Trust` cannot redirect funds later.",
          "sale": "`ISale` contract deposit is under.",
          "sender": "Anon `msg.sender` depositing the token.",
          "token": "`IERC20` token being deposited."
        }
      },
      "Sweep(address,address,address,address,address,uint256)": {
        "params": {
          "amount": "Amount of token being swept into a deposit.",
          "depositor": "Anon `msg.sender` who originally deposited the token.",
          "redeemable": "Redeemable token first reported by the trust.",
          "sale": "`ISale` contract deposit is under.",
          "sender": "Anon `msg.sender` sweeping the deposit.",
          "token": "`IERC20` token being swept into a deposit."
        }
      },
      "Undeposit(address,address,address,address,uint256,uint256)": {
        "params": {
          "amount": "Amount of token undeposited.",
          "redeemable": "Redeemable token that is being undeposited against.",
          "sale": "`ISale` contract undeposit is from.",
          "sender": "Anon `msg.sender` undepositing the token.",
          "supply": "rTKN supply at moment of deposit.",
          "token": "`IERC20` token being undeposited."
        }
      },
      "Withdraw(address,address,address,address,uint256,uint256)": {
        "params": {
          "amount": "Amount of token withdrawn.",
          "redeemable": "Redeemable token used to withdraw.",
          "sale": "`ISale` contract withdrawal is from.",
          "supply": "rTKN supply at moment of deposit.",
          "token": "`IERC20` token being withdrawn.",
          "withdrawer": "Anon `msg.sender` withdrawing the token."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "deposit(address,address,uint256)": {
        "params": {
          "amount_": "The amount of token to deposit. Requires depositor has approved at least this amount to succeed.",
          "sale_": "The `Sale` to assign this deposit to.",
          "token_": "The `IERC20` token to deposit to the escrow."
        }
      },
      "depositPending(address,address,uint256)": {
        "params": {
          "amount_": "The amount of token to despoit. Requires depositor has approved at least this amount to succeed.",
          "sale_": "The `Sale` to assign this deposit to.",
          "token_": "The `IERC20` token to deposit to the escrow."
        }
      },
      "sweepPending(address,address,address)": {
        "params": {
          "depositor_": "The depositor to sweep registered deposits under.",
          "sale_": "The sale to sweep all pending deposits for.",
          "token_": "The token to sweep into registered deposits."
        }
      },
      "undeposit(address,address,uint256,uint256)": {
        "params": {
          "amount_": "The amount to undeposit.",
          "sale_": "The `Sale` to undeposit from.",
          "supply_": "The total supply of the sale token associated with the deposit being undeposited.",
          "token_": "The token to undeposit."
        }
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "sale_": "The trust to `withdraw` against.",
          "supply_": "The total supply of the sale token at time of deposit to process this withdrawal against.",
          "token_": "The token to `withdraw`."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,address,address,address,address,uint256,uint256)": {
        "notice": "Emitted for every successful deposit."
      },
      "PendingDeposit(address,address,address,address,uint256)": {
        "notice": "Emitted for every successful pending deposit."
      },
      "Sweep(address,address,address,address,address,uint256)": {
        "notice": "Emitted every time a pending deposit is swept to a full deposit."
      },
      "Undeposit(address,address,address,address,uint256,uint256)": {
        "notice": "Emitted for every successful undeposit."
      },
      "Withdraw(address,address,address,address,uint256,uint256)": {
        "notice": "Emitted for every successful withdrawal."
      }
    },
    "kind": "user",
    "methods": {
      "deposit(address,address,uint256)": {
        "notice": "Any address can deposit any amount of its own `IERC20` under a `Sale`. The `Sale` MUST be a child of the trusted factory. The deposit will be accounted for under both the depositor individually and the trust in aggregate. The aggregate value is used by `withdraw` and the individual value by `undeposit`. The depositor is responsible for approving the token for this contract. `deposit` is still enabled after the distribution ends; `undeposit` is always allowed in case of a fail and disabled on success. Multiple `deposit` calls before and after a success result are supported. If a depositor deposits when a raise has failed they will need to undeposit it again manually. Delegated `deposit` is not supported. Every depositor is directly responsible for every `deposit`. WARNING: As `undeposit` can only be called when the `Sale` reports failure, `deposit` should only be called when the caller is sure the `Sale` will reach a clear success/fail status. For example, when a `Sale` has not yet been seeded it may never even start the raise so depositing at this point is dangerous. If the `Sale` never starts the raise it will never fail the raise either."
      },
      "depositPending(address,address,uint256)": {
        "notice": "Depositor can set aside tokens during pending raise status to be swept into a real deposit later. The problem with doing a normal deposit while the raise is still active is that the `Sale` will burn all unsold tokens when the raise ends. If we captured the token supply mid-raise then many deposited TKN would be allocated to unsold rTKN. Instead we set aside TKN so that raise participants can be sure that they will be claimable upon raise success but they remain unbound to any rTKN supply until `sweepPending` is called. `depositPending` is a one-way function, there is no way to `undeposit` until after the raise fails. Strongly recommended that depositors do NOT call `depositPending` until raise starts, so they know it will also end."
      },
      "sweepPending(address,address,address)": {
        "notice": "Anon can convert any existing pending deposit to a deposit with known rTKN supply once the escrow has moved out of pending status. As `sweepPending` is anon callable, raise participants know that the depositor cannot later prevent a sweep, and depositor knows that raise participants cannot prevent a sweep. As per normal deposits, the output of swept tokens depends on success/fail state allowing `undeposit` or `withdraw` to be called subsequently. Partial sweeps are NOT supported, to avoid griefers splitting a deposit across many different `supply_` values."
      },
      "undeposit(address,address,uint256,uint256)": {
        "notice": "The inverse of `deposit`. In the case of a failed distribution the depositors can claim back any tokens they deposited in the escrow. Ideally the distribution is a success and this does not need to be called but it is important that we can walk back deposits and try again for some future raise if needed. Delegated `undeposit` is not supported, only the depositor can wind back their original deposit. `amount_` must be non-zero. If several tokens have been deposited against a given trust for the depositor then each token must be individually undeposited. There is no onchain tracking or bulk processing for the depositor, they are expected to know what they have previously deposited and if/when to process an `undeposit`."
      },
      "withdraw(address,address,uint256)": {
        "notice": "The successful handover of a `deposit` to a recipient. When a redeemable token distribution is successful the redeemable token holders are automatically and immediately eligible to `withdraw` any and all tokens previously deposited against the relevant `Sale`. The `withdraw` can only happen if/when the relevant `Sale` reaches the success distribution status. Delegated `withdraw` is NOT supported. Every redeemable token holder is directly responsible for being aware of and calling `withdraw`. If a redeemable token holder calls `redeem` they also burn their claim on any tokens held in escrow so they MUST first call `withdraw` THEN `redeem`. It is expected that the redeemable token holder knows about the tokens that they will be withdrawing. This information is NOT tracked onchain or exposed for bulk processing. Partial `withdraw` is not supported, all tokens allocated to the caller are withdrawn`. 0 amount withdrawal is an error, if the prorata share of the token being claimed is small enough to round down to 0 then the withdraw will revert. Multiple withdrawals across multiple deposits is supported and is equivalent to a single withdraw after all relevant deposits."
      }
    },
    "notice": "Escrow contract for ERC20 tokens to be deposited and withdrawn against redeemableERC20 tokens from a specific `Sale`. When some token is deposited the running total of that token against the trust is incremented by the deposited amount. When some `redeemableERC20` token holder calls `withdraw` they are sent the full balance they have not previously claimed, multiplied by their fraction of the redeemable token supply that they currently hold. As redeemable tokens are frozen after distribution there are no issues with holders manipulating withdrawals by transferring tokens to claim multiple times. As redeemable tokens can be burned it is possible for the total supply to decrease over time, which naively would result in claims being larger retroactively (prorata increases beyond what can be paid). For example: - Alice and Bob hold 50 rTKN each, 100 total supply - 100 TKN is deposited - Alice withdraws 50% of 100 TKN => alice holds 50 TKN escrow holds 50 TKN - Alice burns her 50 rTKN - Bob attempts to withdraw his 50 rTKN which is now 100% of supply - Escrow tries to pay 100% of 100 TKN deposited and fails as the escrow   only holds 50 TKN (alice + bob = 150%). To avoid the escrow allowing more withdrawals than deposits we include the total rTKN supply in the key of each deposit mapping, and include it in the emmitted event. Alice and Bob must read the events offchain and make a withdrawal relative to the rTKN supply as it was at deposit time. Many deposits can be made under a single rTKN supply and will all combine to a single withdrawal but deposits made across different supplies will require multiple withdrawals. Alice or Bob could burn their tokens before withdrawing and would simply withdraw zero or only some of the deposited TKN. This hurts them individually, so they SHOULD check their indexer for claimable assets in the escrow before considering a burn. But neither of them can cause the other to be able to withdraw more or less relative to the supply as it was at the time of TKN being deposited, or to trick the escrow into overpaying more TKN than was deposited under a given `Sale`. A griefer could attempt to flood the escrow with many dust deposits under many different supplies in an attempt to confuse alice/bob. They are free to filter out events in their indexer that come from an unknown depositor or fall below some dust value threshold. Tokens may also exit the escrow as an `undeposit` call where the depositor receives back the tokens they deposited. As above the depositor must provide the rTKN supply from `deposit` time in order to `undeposit`. As `withdraw` and `undeposit` both represent claims on the same tokens they are mutually exclusive outcomes, hence the need for an escrow. The escrow will process `withdraw` only if the `Sale` is reporting a complete and successful raise. Similarly `undeposit` will only return tokens after the `Sale` completes and reports failure. While the `Sale` is in active distribution neither `withdraw` or `undeposit` will move tokens. This is necessary in part because it is only safe to calculate entitlements once the redeemable tokens are fully distributed and frozen. Because much of the redeemable token supply will never be sold, and then burned, `depositPending` MUST be called rather than `deposit` while the raise is active. When the raise completes anon can call `sweepPending` which will calculate and emit a `Deposit` event for a useful `supply`. Any supported ERC20 token can be deposited at any time BUT ONLY under a `Sale` contract that is the child of the `TrustFactory` that the escrow is deployed for. `TrustEscrow` is used to prevent a `Sale` from changing the pass/fail outcome once it is known due to a bug/attempt to double spend escrow funds. This mechanism is very similar to the native burn mechanism on `redeemableERC20` itself under `redeem` but without requiring any tokens to be burned in the process. Users can claim the same token many times safely, simply receiving 0 tokens if there is nothing left to claim. This does NOT support rebase/elastic token _balance_ mechanisms on the escrowed token as the escrow has no way to track deposits/withdrawals other than 1:1 conservation of input/output. For example, if 100 tokens are deposited under two different trusts and then that token rebases all balances to half, there will be 50 tokens in the escrow but the escrow will attempt transfers up to 100 tokens between the two trusts. Essentially the first 50 tokens will send and the next 50 tokens will fail because the trust literally doesn't have 100 tokens at that point. Elastic _supply_ tokens are supported as every token to be withdrawn must be first deposited, with the caveat that if some mechanism can mint/burn/transfer tokens out from under the escrow contract directly, this will break internal accounting much like the rebase situation. Using a real-world example, stETH from LIDO would be NOT be supported as the balance changes every day to reflect incoming ETH from validators, but wstETH IS supported as balances remain static while the underlying assets per unit of wstETH increase each day. This is of course exactly why wstETH was created in the first place. Every escrowed token has a separate space in the deposited/withdrawn mappings so that some broken/malicious/hacked token that leads to incorrect token movement in/out of the escrow cannot impact other tokens, even for the same trust and redeemable.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8436,
        "contract": "contracts/escrow/RedeemableERC20ClaimEscrow.sol:RedeemableERC20ClaimEscrow",
        "label": "reserves",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8441,
        "contract": "contracts/escrow/RedeemableERC20ClaimEscrow.sol:RedeemableERC20ClaimEscrow",
        "label": "tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8447,
        "contract": "contracts/escrow/RedeemableERC20ClaimEscrow.sol:RedeemableERC20ClaimEscrow",
        "label": "escrowStatuses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_enum(EscrowStatus)8430)"
      },
      {
        "astId": 7937,
        "contract": "contracts/escrow/RedeemableERC20ClaimEscrow.sol:RedeemableERC20ClaimEscrow",
        "label": "withdrawals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256))))"
      },
      {
        "astId": 7946,
        "contract": "contracts/escrow/RedeemableERC20ClaimEscrow.sol:RedeemableERC20ClaimEscrow",
        "label": "pendingDeposits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 7957,
        "contract": "contracts/escrow/RedeemableERC20ClaimEscrow.sol:RedeemableERC20ClaimEscrow",
        "label": "deposits",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256))))"
      },
      {
        "astId": 7966,
        "contract": "contracts/escrow/RedeemableERC20ClaimEscrow.sol:RedeemableERC20ClaimEscrow",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 7975,
        "contract": "contracts/escrow/RedeemableERC20ClaimEscrow.sol:RedeemableERC20ClaimEscrow",
        "label": "remainingDeposits",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(EscrowStatus)8430": {
        "encoding": "inplace",
        "label": "enum EscrowStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_enum(EscrowStatus)8430)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum EscrowStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(EscrowStatus)8430"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => mapping(uint256 => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => mapping(address => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}